{"version":3,"sources":["assets/settingsImg.png","assets/deleteSVG.svg","assets/spinningEarthSVG.svg","assets/bannerBackground4.png","Redux/ActionType.ts","models/UserLoginDetails.ts","Redux/Store.ts","Redux/Reducer.ts","Redux/AppState.ts","components/topBanner/TopBanner.tsx","models/SuccessfulLoginHandler.ts","components/loginPage/LoginPage.tsx","models/UserRegisterDetails.ts","components/registerPage/RegisterPage.tsx","models/InterceptorHandler.ts","models/GetUserInfoFromServerCache.ts","models/IsUserLoggedValidator.ts","components/topNavbar/TopNavbar.tsx","components/reportsPage/ReportsPage.tsx","components/vacationComponent/VacationComponent.tsx","components/allVacations/AllVacations.tsx","components/vacationComponent/FavoriteVacationComponent.tsx","models/GetUserTypeFromStorage.ts","components/favoriteVacations/FavoriteVacations.tsx","components/logo/Logo.tsx","components/vacationsPage/VacationsPage.tsx","components/layout/Layout.tsx","serviceWorker.ts","index.tsx","assets/astronautSVG.svg","assets/noAuthorizationSVG.svg"],"names":["module","exports","ActionType","UserLoginDetails","userName","password","store","createStore","oldAppState","action","newAppState","type","GetAllVacations","allVacations","payload","SetFollowedVacation","favoriteVacations","push","GetFavoriteVacations","UnfollowVacation","splice","AddVacation","UpdateVacation","indexOfClickedVacationInGlobalStore","convertedValidDataForUIDisplay","UpdateFavoriteVacation","indexOfClickedFavoriteVacationInGlobalStore","DeleteVacationViaSocketIO","DeleteFavoriteVacationViaSocketIO","IncreaseVacationFollowersCount","followersCount","newFollowersCount","IncreaseFavoriteVacationFollowersCount","indexOfFavoriteClickedVacationInGlobalStore","DecreaseVacationFollowersCount","DecreaseFavoriteVacationFollowersCount","DeleteVacation","OnUserLogout","Array","TopBanner","className","successfulLoginHandler","loginServerResponse","token","brearerToken","axios","defaults","headers","common","attachTokenToInterceptor","strUserInfo","JSON","stringify","sessionStorage","setItem","dispatch","updateUserName","LoginPage","props","usernameInputField","passwordInputField","userMessagesParagraph","componentDidMount","checkIfGlobalStoreHasAllVacations","document","querySelector","getAllVacationsFromServer","a","get","response","data","errorMessage","error","loginErrorHandler","login","resetInputFields","userNameIsNotEmpty","checkIfUsernameEnteredIsEmpty","passwordIsNotEmpty","checkIfPasswordEnteredIsEmpty","disableLoginButton","userLoginDetails","state","post","serverResponse","serverResponseData","enableLoginBtn","routingHandler","getState","length","updateUserNameValue","event","trimmedUserNameInputFieldValue","target","value","trim","setState","updatePasswordValue","passwordInputFieldValue","notifyUserAboutInvalidUserName","notifyUserAboutInvalidPassword","history","loginBtn","disabled","style","cursor","border","textContent","src","logo","alt","id","onChange","this","name","onClick","to","Component","UserRegisterDetails","firstName","lastName","RegisterPage","firstNameInputFieldset","lastNameInputFieldset","usernameInputFieldset","passwordInputFieldset","onUserRegisterClick","checkIfRegistrationDataIsValid","disableRegisterButton","userRegisterDetails","enableRegisterBtn","registerErrorHandler","isFirstNameValid","checkIfFirstNameIsValid","isLastNameValid","checkIfLastNameIsValid","isPasswordValid","checkIfPasswordIsValid","isUserNameValid","checkIfUserNameIsValid","updateFirstNameValue","trimmedFirstNameInputField","updateLastNameValue","trimmedLastNameInputField","trimmedUserNameInputField","trimmedPasswordInputField","trimmedFirstName","firstNameInputField","notifyUserInputFieldIsNotValid","trimmedLastName","lastNameInputField","trimmedPassword","trimmedUserName","registerBtn","inputField","interceptorHandler","userData","parse","getItem","undefined","getUserInfoFromServerCache","userInfoFromServerCache","isUserLoggedValidator","TopNavbar","useHistory","onUserLoginStautsChange","clear","window","onscroll","topNavBar","logStatusBtn","body","scrollTop","documentElement","backgroundColor","color","ReportsPage","userTypeFromServerCache","userType","getAllFollowedVacationsFromServer","followedVacationsData","followedVacationsNames","extractFollowedVacationsNames","followedVacationsFollowersCount","extractFollowedVacationsFollowersCount","reportsPageErrorHandler","followedVacationsFromGlobalStore","map","vacation","vacationName","snackbar","setTimeout","replace","getRandomChartColor","letters","split","i","Math","floor","random","labels","datasets","label","borderColor","borderWidth","options","legend","display","position","maintainAspectRatio","noAuthorizationSVG","VacationComponent","imageURL","startDate","endDate","vacationPrice","vacationDescription","IconButton","btn","onVacationDeleteAttempt","onVacationEditAttempt","validateVacationIsNotLikedByTheUser","onVacationFollowAttempt","AllVacations","unSubscribeStore","userNameFromServerCache","imageToDeleteFromServer","socket","componentWillUnmount","disconnect","vacationsErrorHandler","subscribe","initiateSocket","checkIfGlobalStoraHasAllVacations","followVacation","clickedVacation","likeButtonsNodeList","getElementsByClassName","likeButtonsArr","from","disableButtonsGroup","clickedVacationID","vacationID","socketInfo","emit","enableButtonsGroup","unfollowVacation","addVacation","addModalBackground","allInputsArr","getAllInputsArrForAddedVacation","validateNewVacationData","isNewVacationDataValid","newVacationData","newlyAddedVacation","hideModal","updateVacation","editModalBackground","getAllInputsArrForUpdatedVacation","convertVacationDataForUIDisplay","put","imageToPreview","deleteVacation","allVacationsInGlobalStore","registerAllSocketListeners","on","addVacationViaSocketIO","updateVacationInfoViaSocketIO","deleteVacationViaSocketIO","increaseVacationFollowersCountViaSocketIO","decreaseVacationFollowersCountViaSocketIO","inputsArr","clickedVacationFollowersCount","newNameTrimmedValue","vacationStartDateValue","vacationEndDateValue","newPriceValue","valueAsNumber","newDescriptionTrimmedValue","newVacationURL","convertStartDateForUIDisplay","convertEndDateForUIDisplay","favoriteVacationsFromGlobalState","find","favoriteVacation","getIndexOfVacationByID","clickedVacationInGlobalStore","indexOf","getIndexOfFavoriteVacationByID","onVacationAdditionAttempt","displayAdditionModal","button","disableButton","displayEditModal","enableButton","displayDeletionModal","isNewVacationURLValid","validateNewVacationURL","isNewDescriptionValid","validateNewDescription","isNewPriceValid","validateNewPrice","areDatesValid","validateNewDates","validateNewName","newTrimmedName","newPrice","newTrimmedDescription","newVacationStartDate","newVacationEndDate","currentDate","Date","setHours","newTrimmedImageURL","updatedVacationID","checkIfUserShouldIncreaseFollowersCountInUI","checkIfUserShouldDecreaseFollowersCountInUI","clickedVacationIndex","userTokenForSocketIdentification","socketIOClient","query","buttonsGroup","displayVacationNameInEditModal","clickedVacationName","displayVacationPriceInEditModal","clickedVacationPrice","displayVacationDatesInEditModal","clickedVacationStartDate","clickedVacationEndDate","editStartDateField","editEndDateField","fullStartDate","fullEndDate","valueAsDate","displayVacationDescriptionInEditModal","clickedVacationDescription","displayVacationImageInEditModal","clickedVacationImageURL","addModalDoneBtn","addModalCancelBtn","onclick","addEventListener","editModalIcon","editModalHeader","editModalDoneBtn","editModalCancelBtn","deletionModalBackground","deletionModalHeader","deletionModalTextParagraph","deleteBtn","dontDeleteBtn","deletionModalVacationName","clearModalInputs","additionModalNameInput","additionModalStartDateInput","additionModalEndDateInput","additionModalPriceInput","additionModalDescriptionInput","additionModalImageURLInput","modal","index","key","disableBtn","enableBtn","settingsImage","deleteSVG","TextField","variant","min","toISOString","slice","max","spinningEarthSVG","withRouter","FavoriteVacationComponent","OnUserDislikeClick","getUserTypeFromStorage","userInfo","FavoriteVacations","checkIfGlobalStoreHasFavoriteVacations","getFavoriteVacationsFromServer","favoriteVacationsErrorHandler","removeClickedVacationFromFavorites","favoriteVacationsInGlobalStore","Logo","require","VacationsPage","Layout","path","component","exact","RerportsPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6940a4b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/settingsImg.4766456e.png\";","module.exports = __webpack_public_path__ + \"static/media/deleteSVG.4eb942cd.svg\";","module.exports = __webpack_public_path__ + \"static/media/spinningEarthSVG.7f4d39c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/bannerBackground4.df0602a9.png\";","export enum ActionType {\r\n    GetAllVacations,\r\n    GetFavoriteVacations,\r\n    SetFollowedVacation,\r\n    UnfollowVacation,\r\n    AddVacation,\r\n    UpdateVacation,\r\n    UpdateFavoriteVacation,\r\n    DeleteVacationViaSocketIO,\r\n    DeleteFavoriteVacationViaSocketIO,\r\n    IncreaseVacationFollowersCount,\r\n    IncreaseFavoriteVacationFollowersCount,\r\n    DecreaseVacationFollowersCount,\r\n    DecreaseFavoriteVacationFollowersCount,\r\n    DeleteVacation,\r\n    updateUserName,\r\n    OnUserLogout\r\n}","export default class UserLoginDetails {\r\n    \r\n    public constructor (\r\n        public userName: string,\r\n        public password: string\r\n    ) {}\r\n}","import { createStore } from \"redux\";\r\nimport AppState from \"./AppState\";\r\nimport reducer from './Reducer';\r\n\r\n// Defining the Global Store (the app's global state)\r\nexport const store = createStore(reducer, new AppState());","import AppState from \"./AppState\";\r\nimport Action from \"./Action\";\r\nimport { ActionType } from \"./ActionType\";\r\nimport Vacation from \"../models/Vacation\";\r\n\r\n\r\n// --------------- This is the reducer (acts like a state machine) --------------- //\r\n\r\nexport default function reduce (oldAppState : AppState, action : Action): AppState {\r\n\r\n    // Copying the old app state, in order to modify it, based on the action\r\n    const newAppState = {...oldAppState};\r\n\r\n    switch (action.type) {\r\n        case ActionType.GetAllVacations:\r\n            newAppState.allVacations = [...action.payload];\r\n            break;\r\n\r\n        case ActionType.SetFollowedVacation:\r\n            newAppState.favoriteVacations.push(action.payload);\r\n            break;\r\n\r\n        case ActionType.GetFavoriteVacations:\r\n            newAppState.favoriteVacations = [...action.payload];\r\n            break;\r\n\r\n        case ActionType.UnfollowVacation:\r\n            newAppState.favoriteVacations.splice(action.payload, 1);\r\n            break;\r\n\r\n        case ActionType.AddVacation:\r\n            newAppState.allVacations.push(action.payload);\r\n            break;\r\n\r\n        case ActionType.UpdateVacation:\r\n            newAppState.allVacations[action.payload.indexOfClickedVacationInGlobalStore] = action.payload.convertedValidDataForUIDisplay;\r\n            break;\r\n        \r\n        case ActionType.UpdateFavoriteVacation:\r\n            newAppState.favoriteVacations[action.payload.indexOfClickedFavoriteVacationInGlobalStore] = action.payload.convertedValidDataForUIDisplay;\r\n            break;\r\n\r\n        case ActionType.DeleteVacationViaSocketIO:\r\n            newAppState.allVacations.splice(action.payload, 1);\r\n            break;\r\n\r\n        case ActionType.DeleteFavoriteVacationViaSocketIO:\r\n            newAppState.favoriteVacations.splice(action.payload, 1);\r\n            break;\r\n\r\n        case ActionType.IncreaseVacationFollowersCount:\r\n            newAppState.allVacations[action.payload.indexOfClickedVacationInGlobalStore].followersCount = action.payload.newFollowersCount;\r\n            break;\r\n\r\n        case ActionType.IncreaseFavoriteVacationFollowersCount:\r\n            newAppState.favoriteVacations[action.payload.indexOfFavoriteClickedVacationInGlobalStore].followersCount = action.payload.newFollowersCount;\r\n            break;\r\n\r\n        case ActionType.DecreaseVacationFollowersCount:\r\n            newAppState.allVacations[action.payload.indexOfClickedVacationInGlobalStore].followersCount = action.payload.newFollowersCount;\r\n            break;\r\n\r\n        case ActionType.DecreaseFavoriteVacationFollowersCount:\r\n            newAppState.favoriteVacations[action.payload.indexOfFavoriteClickedVacationInGlobalStore].followersCount = action.payload.newFollowersCount;\r\n            break;\r\n\r\n        case ActionType.DeleteVacation:\r\n            newAppState.allVacations.splice(action.payload, 1);\r\n            break;            \r\n\r\n        case ActionType.OnUserLogout:\r\n            // Clearing the user's favorite vacations on logout\r\n            newAppState.favoriteVacations = new Array <Vacation> ();\r\n            break;\r\n    }\r\n\r\n    return newAppState;\r\n}","import Vacation from \"../models/Vacation\";\r\n\r\nexport default class AppState {\r\n    \r\n    public allVacations : Vacation[] = new Array <Vacation> ();\r\n    public favoriteVacations : Vacation[] = new Array <Vacation> ();\r\n    public userName: string = \"\";\r\n}","import React from 'react';\r\nimport './topBanner.css';\r\n\r\n\r\n// -------------- This Component Displays The Top Banner On The Login & Registration Pages -------------- //\r\n\r\nexport default function TopBanner() {\r\n\r\n    return (\r\n        <div className=\"topBanner\"></div>\r\n    )\r\n}","import SuccessfulLoginServerResponse from './SuccessfulLoginServerResponse';\r\nimport axios from 'axios';\r\nimport { store } from '../Redux/Store';\r\nimport { ActionType } from '../Redux/ActionType';\r\n\r\n/*\r\n    Explanation -> This Model is called whenever a successful login has happaned\r\n    (Automatically after a successful registration / after a regular login).\r\n\r\n    This Model is designated to prevent duplication of code from all components that needs to make this proccess.\r\n*/\r\n\r\n// ---------- Attaching the user's token to the interceptor ---------- //\r\n\r\nconst attachTokenToInterceptor = (token: string) => {\r\n\r\n    // Attaching the Token and the Bearer string to the Interceptor\r\n\r\n    let brearerToken = \"Bearer \" + token;\r\n    axios.defaults.headers.common['Authorization'] = brearerToken;\r\n}\r\n\r\nexport const successfulLoginHandler = (loginServerResponse : SuccessfulLoginServerResponse) => {\r\n\r\n    // Getting the Token we received from the server\r\n    attachTokenToInterceptor(loginServerResponse.token);\r\n    \r\n    // Inserting the user's info to the sessionStorage\r\n    let strUserInfo = JSON.stringify(loginServerResponse);\r\n    sessionStorage.setItem('userInfo', strUserInfo);\r\n\r\n    store.dispatch({type: ActionType.updateUserName, payload: loginServerResponse.userName});\r\n}","import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport { successfulLoginHandler } from \"../../models/SuccessfulLoginHandler\";\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Login Screen ------------------------------------------------- //\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private usernameInputField: HTMLFieldSetElement;\r\n    private passwordInputField: HTMLFieldSetElement;\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n\r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Checking if the Global Store has the vacations.\r\n        // If not, retrieve them before the user even logs in, in order to load\r\n        // the vacations behind the scenes, while the user is bussy logging -> Better UX\r\n        this.checkIfGlobalStoreHasAllVacations();\r\n\r\n        // Defining global DOM elements\r\n        this.usernameInputField = document.querySelector(\"#usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputField = document.querySelector(\"#passwordFieldset\") as HTMLFieldSetElement;\r\n        this.userMessagesParagraph = document.querySelector(\"#userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            // Updating the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.loginErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.loginErrorHandler(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    private login = async () => {\r\n\r\n        this.resetInputFields();\r\n\r\n        let userNameIsNotEmpty = this.checkIfUsernameEnteredIsEmpty();\r\n        let passwordIsNotEmpty = this.checkIfPasswordEnteredIsEmpty();\r\n\r\n        if (userNameIsNotEmpty && passwordIsNotEmpty) {\r\n\r\n            try {\r\n                this.disableLoginButton();\r\n\r\n                let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n                \r\n                // The response we get, should be type of 'SuccessfulLoginServerResponse' class\r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://34.65.28.6:3001/users/login', userLoginDetails);\r\n    \r\n                // Here we are receiving the token, username & user type from the data we got back from the server\r\n                const serverResponseData = serverResponse.data;\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n\r\n                this.enableLoginBtn();\r\n\r\n                // Handling the URL routing\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n                \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.loginErrorHandler(errorMessage);\r\n                }\r\n\r\n                catch {\r\n                    this.loginErrorHandler(error);\r\n                }\r\n\r\n                finally {\r\n                    this.enableLoginBtn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoreHasAllVacations = () => {\r\n\r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer()\r\n        }\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n    private checkIfUsernameEnteredIsEmpty = () => {\r\n\r\n        // Checking if the username entered in the 'login' page is empty\r\n\r\n        let userNameInputField: HTMLInputElement = document.querySelector(\"#usernameField\") as HTMLInputElement;\r\n        let userNameInputFieldValue = userNameInputField.value;\r\n        let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidUserName();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfPasswordEnteredIsEmpty = () => {\r\n\r\n        // Checking if the password entered in the 'login' page is empty\r\n\r\n        let passwordInputField: HTMLInputElement = document.querySelector(\"#passwordField\") as HTMLInputElement;\r\n        let passwordInputFieldValue = passwordInputField.value;\r\n        let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidPassword();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // Navigating To The Vacations Page URL After a Successful Login\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableLoginButton = () : void => {\r\n        const loginBtn = document.querySelector(\"#loginBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = true;\r\n        loginBtn.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableLoginBtn = () : void => {\r\n        const loginBtn = document.querySelector(\"#loginBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = false;\r\n        loginBtn.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidUserName = () => {\r\n        this.usernameInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidPassword = () => {\r\n        this.passwordInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputField.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputField.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n    private loginErrorHandler = (errorMessage : string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"loginSection\">\r\n                    <div className=\"loginSquare\">\r\n                        <img className=\"login-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Login</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button className=\"loginBtn\" id=\"loginBtn\" onClick={this.login}>Login</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I Don't Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export default class UserRegisterDetails {\r\n    \r\n    public constructor (\r\n        public firstName: string,\r\n        public lastName: string,\r\n        public userName: string,\r\n        public password: string\r\n    ) {}\r\n}","import React, { ChangeEvent, Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport axios from 'axios';\r\nimport './registerPage.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Registration Screen ------------------------------------------------- //\r\n\r\ninterface UserRegisterState {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class RegisterPage extends Component <any, UserRegisterState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private firstNameInputFieldset: HTMLFieldSetElement;\r\n    private lastNameInputFieldset: HTMLFieldSetElement;\r\n    private usernameInputFieldset: HTMLFieldSetElement;\r\n    private passwordInputFieldset: HTMLFieldSetElement;\r\n\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Defining global DOM elements\r\n        \r\n        this.firstNameInputFieldset = document.querySelector(\"#firstNameFieldset\") as HTMLFieldSetElement;\r\n        this.lastNameInputFieldset = document.querySelector(\"#lastNameFieldset\") as HTMLFieldSetElement;\r\n        this.usernameInputFieldset = document.querySelector(\"#usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputFieldset = document.querySelector(\"#passwordFieldset\") as HTMLFieldSetElement;\r\n\r\n        this.userMessagesParagraph = document.querySelector(\"#userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n    \r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n    \r\n    private onUserRegisterClick = async () => {\r\n\r\n        this.resetInputFields();\r\n        \r\n        const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\r\n\r\n        if (isRegistrationDataValid) {\r\n            \r\n            try {\r\n                this.disableRegisterButton();\r\n\r\n                let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n                \r\n                // Explanation ->\r\n                // I chose to make the user login automatically after a successful registration.\r\n                // So, in the server, after a successful insertion of user's info to the DB, it automatically sends the user\r\n                // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\r\n    \r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://34.65.28.6:3001/users/register', userRegisterDetails);\r\n    \r\n                // Getting the server response (after the 'login' function occurred on the server)\r\n                const serverResponseData = serverResponse.data;\r\n\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n    \r\n                this.enableRegisterBtn();\r\n\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.registerErrorHandler(errorMessage)\r\n                }\r\n\r\n                catch {\r\n                    this.registerErrorHandler(error);\r\n                }\r\n\r\n                finally {\r\n                    this.enableRegisterBtn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfRegistrationDataIsValid = () => {\r\n        \r\n        let isFirstNameValid = this.checkIfFirstNameIsValid();\r\n        let isLastNameValid = this.checkIfLastNameIsValid();\r\n        let isPasswordValid = this.checkIfPasswordIsValid();\r\n        let isUserNameValid = this.checkIfUserNameIsValid();\r\n\r\n        // If one of the input fields is not valid, return false\r\n\r\n        if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private updateFirstNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the first name value entered in the first name's input field\r\n\r\n        const firstNameInputField : HTMLInputElement = event.target;\r\n\r\n        const firstNameInputFieldValue : string =  firstNameInputField.value;\r\n        const trimmedFirstNameInputField : string = firstNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            firstName: trimmedFirstNameInputField\r\n        });\r\n    }\r\n\r\n    private updateLastNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the last name value entered in the last name's input field\r\n\r\n        const lastNameInputField : HTMLInputElement = event.target;\r\n\r\n        const lastNameInputFieldValue : string =  lastNameInputField.value;\r\n        const trimmedLastNameInputField : string = lastNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            lastName: trimmedLastNameInputField\r\n        });\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username value entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputField : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputField\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n        const trimmedPasswordInputField : string = passwordInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            password: trimmedPasswordInputField\r\n        });\r\n    }\r\n\r\n    private checkIfFirstNameIsValid = () => {\r\n\r\n        let trimmedFirstName = this.state.firstName.trim();\r\n        const firstNameInputField = this.firstNameInputFieldset;\r\n        \r\n        if (trimmedFirstName !== \"\") {\r\n\r\n            // If the first name entered is less than 26 characters\r\n            if (trimmedFirstName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"First Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(firstNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfLastNameIsValid = () => {\r\n\r\n        let trimmedLastName = this.state.lastName.trim();\r\n        const lastNameInputField = this.lastNameInputFieldset;\r\n\r\n        if (trimmedLastName !== \"\") {\r\n\r\n            // If the last name entered is less than 26 characters\r\n            if (trimmedLastName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"Last Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(lastNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfPasswordIsValid = () => {\r\n        \r\n        let trimmedPassword = this.state.password.trim();\r\n        let passwordInputField = this.passwordInputFieldset;\r\n\r\n        if (trimmedPassword!== \"\") {\r\n\r\n            // If the password is at least 6 characters long\r\n            if (trimmedPassword.length >= 6) {\r\n\r\n                // If the password is a maximum of 15 characters\r\n                if (trimmedPassword.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"The Password Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            // If the password is not empty, but smaller than 6 characters\r\n            else {\r\n                this.registerErrorHandler(\"Password Must Be At Least 6 Characters Long\");\r\n            }\r\n            \r\n            // Either way one of the valdiations failed, notify the user\r\n            this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n            return false;\r\n        }\r\n\r\n        // If the password is empty\r\n        this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfUserNameIsValid = () => {\r\n        \r\n        let trimmedUserName = this.state.userName.trim();\r\n        let usernameInputField = this.usernameInputFieldset;\r\n\r\n        if (trimmedUserName !== \"\") {\r\n\r\n            // if the username entered is at least 3 characters long\r\n            if (trimmedUserName.length >= 3) {\r\n\r\n                // if the username entered is a maximum of 15 characters\r\n                if (trimmedUserName.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"Username Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            else {\r\n                this.registerErrorHandler(\"Username Must Be At Least 3 Characters Long\");\r\n            }\r\n        }\r\n\r\n        // Either way one of the valdiations failed, notify the user\r\n        this.notifyUserInputFieldIsNotValid(usernameInputField);\r\n        return false;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableRegisterButton = () : void => {\r\n        const registerBtn = document.querySelector(\"#registerBtn\") as HTMLButtonElement;\r\n        registerBtn.disabled = true;\r\n        registerBtn.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableRegisterBtn = () : void => {\r\n        const registerBtn = document.querySelector(\"#registerBtn\") as HTMLButtonElement;\r\n        registerBtn.disabled = false;\r\n        registerBtn.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private notifyUserInputFieldIsNotValid = (inputField : HTMLFieldSetElement) => {\r\n\r\n        inputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private registerErrorHandler = (errorMessage : string) => {\r\n        \r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"registerSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"registerSection\">\r\n\r\n                    <div className=\"registerSquare\">\r\n                        <img className=\"register-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Register</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"firstNameFieldset\" className=\"cerdinals-fieldset firstNameFieldset\">\r\n                                <legend>First Name</legend>\r\n                                <input onChange={this.updateFirstNameValue} type=\"text\" name=\"firstName\" id=\"firstNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"lastNameFieldset\" className=\"cerdinals-fieldset lastNameFieldset\">\r\n                                <legend>Last Name</legend>\r\n                                <input onChange={this.updateLastNameValue} type=\"text\" name=\"lastName\" id=\"lastNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset usernameFieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset passwordFieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button id=\"registerBtn\" className=\"registerBtn\" onClick={this.onUserRegisterClick}>Register</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"alreadyRegisteredLink sharp-text\" to=\"/login\">I Already Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import axios from 'axios';\r\n\r\n// Explanation -> The interceptor is a just JS variable (from 'axios' library). On refresh => it resets.\r\n// So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n// and assigns it to the interceptor\r\n\r\nexport const interceptorHandler = () => {\r\n\r\n    let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n    // Checking if the user has a correct sessionStorage JSON\r\n    if (userData !== null) {\r\n\r\n        // Checking if the user has a token\r\n        if (userData.token !== undefined) {\r\n\r\n            // Assigning the Token + Bearer string to the Interceptor\r\n            let brearerToken = \"Bearer \" + userData.token;\r\n            axios.defaults.headers.common['Authorization'] = brearerToken;\r\n        }\r\n    }\r\n}","\r\n// -------------------- This Model Retrieves The User's Type From The Server's Cache And Returns It -------------------- //\r\n\r\nimport axios from 'axios';\r\n\r\nexport const getUserInfoFromServerCache: any = async () => {\r\n\r\n    try {\r\n        \r\n        // Attempting to get The user's type From The Server's Cache\r\n        const response = await axios.post('http://34.65.28.6:3001/users/info');\r\n        const userInfoFromServerCache = response.data;\r\n\r\n        return userInfoFromServerCache;\r\n    }\r\n\r\n    catch (error) {\r\n\r\n        return \"\";\r\n    }\r\n}","\r\n// ------------------ This model checks if the user is still logged in ------------------ //\r\n\r\nexport const isUserLoggedValidator = () => {\r\n\r\n    let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n    // Checking if the user has a correct sessionStorage JSON\r\n    if (userData !== null) {\r\n\r\n        // Checking if the user has a token\r\n        if (userData.token !== undefined) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport axios from 'axios';\r\nimport './topNavbar.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Top Navigation Bar ------------------------------------------------- //\r\n\r\nexport default function TopNavbar() {\r\n\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    // Handles The User's Request To Logout And Login\r\n    const onUserLoginStautsChange = async () => {\r\n        \r\n        let isUserLogged = isUserLoggedValidator() ;\r\n\r\n        if (isUserLogged) {\r\n            \r\n            // Sending a 'logout' request, in order to delete the user from the server's cache\r\n            try {\r\n                await axios.post(`http://34.65.28.6:3001/users/logout`);\r\n            }\r\n            catch {}\r\n            finally {\r\n                // Clearing the user's favorite vacations from the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.OnUserLogout\r\n                });\r\n            }\r\n        }\r\n        \r\n        sessionStorage.clear();\r\n        history.push(\"/login\");\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n    \r\n    // When the user scrolls down, change the navigation bar\r\n    window.onscroll = () => {\r\n        try {\r\n            const topNavBar = document.querySelector(\"#topNavbar\") as HTMLElement;\r\n            const logStatusBtn = document.querySelector(\"#logStatusBtn\") as HTMLElement;\r\n\r\n            if (document.body.scrollTop > 130 || document.documentElement.scrollTop > 130) {\r\n                topNavBar.style.backgroundColor = \"#174d5f\";\r\n                topNavBar.style.color = \"white\";\r\n                logStatusBtn.style.color = 'white';\r\n            }\r\n    \r\n            else if (document.body.scrollTop <= 130 || document.documentElement.scrollTop <= 130) {\r\n                topNavBar.style.backgroundColor = \"transparent\";\r\n                topNavBar.style.color = \"#15304c\";\r\n                logStatusBtn.style.color = 'blue';\r\n            }\r\n        }\r\n        catch {}\r\n    };\r\n\r\n\r\n    return (\r\n        <div id=\"topNavbar\" className=\"topNavbar\">\r\n\r\n            {isUserLoggedValidator() ? \r\n                <div className=\"helloUserSection\">\r\n                    {\r\n                        // Displaying The Username In The Navigation Bar\r\n                        JSON.parse(sessionStorage.getItem(\"userInfo\")).userName\r\n                    }\r\n\r\n                    <span id=\"logStatusBtn\" onClick={onUserLoginStautsChange} className=\"topNavItem loginStatusButton\">\r\n                            Logout\r\n                        </span>\r\n                </div>\r\n                :\r\n                <div className=\"helloUserSection\">\r\n                    <span id=\"loginStatusBtn\" onClick={onUserLoginStautsChange} className=\"topNavItem loginStatusButton\">\r\n                        Login\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Doughnut  } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport noAuthorizationSVG from '../../assets/noAuthorizationSVG.svg';\r\nimport './reportsPage.css';\r\nimport TopNavbar from '../topNavbar/TopNavbar';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n// --------------------------------------- This Component Displays The User's Liked Vacations Reports Screen --------------------------------------- //\r\n\r\ninterface FollowedVacationsState {\r\n    followedVacationsNames: string[];\r\n    followedVacationsFollowersCount: number[];\r\n}\r\n\r\nexport default class ReportsPage extends Component <any, FollowedVacationsState> {\r\n\r\n    private userTypeFromServerCache: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            followedVacationsNames: new Array <string> (),\r\n            followedVacationsFollowersCount: new Array <number> ()\r\n        };\r\n    }\r\n    \r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = async () => {\r\n\r\n        interceptorHandler();\r\n\r\n        // Getting the user type from the server's cache\r\n        let userInfoFromServerCache = await getUserInfoFromServerCache();\r\n        this.userTypeFromServerCache = userInfoFromServerCache.userType;\r\n\r\n        if (this.userTypeFromServerCache === \"ADMIN\") {\r\n    \r\n            this.getAllFollowedVacationsFromServer();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n    \r\n    private getAllFollowedVacationsFromServer = async () => {\r\n        \r\n        interceptorHandler();\r\n        \r\n        // Attempting to get all the followed vacations from the server, and assigning them to the state\r\n        \r\n        try {\r\n            \r\n            // Attempting to get all of the followed vacations from the server\r\n            const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations/all_followed_vacations');\r\n            const followedVacationsData = response.data;\r\n            \r\n            // Creating 2 arrays, one for each vacation's parameter (name and followers count)\r\n            let followedVacationsNames: string[] = this.extractFollowedVacationsNames(followedVacationsData);\r\n            let followedVacationsFollowersCount: number[] = this.extractFollowedVacationsFollowersCount(followedVacationsData);\r\n            \r\n            // Updating the state with the new arrays\r\n            this.setState({\r\n                followedVacationsNames: followedVacationsNames,\r\n                followedVacationsFollowersCount: followedVacationsFollowersCount\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.reportsPageErrorHandler(errorMessage);\r\n            }\r\n            \r\n            catch {\r\n                this.reportsPageErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private extractFollowedVacationsNames = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsNames: string[] = new Array <string> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => followedVacationsNames.push(vacation.vacationName));\r\n\r\n        return followedVacationsNames;\r\n    }\r\n\r\n    private extractFollowedVacationsFollowersCount = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsFollowersCount: number[] = new Array <number> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => followedVacationsFollowersCount.push(vacation.followersCount));\r\n\r\n        return followedVacationsFollowersCount;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private reportsPageErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.querySelector(\"#snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private getRandomChartColor = () => {\r\n\r\n        // Generating a random number for the 'user liked vacations' report chart\r\n\r\n        let letters = '0123456789ABCDEF'.split('');\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++ ) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"reportsPageContainer\">\r\n\r\n                <TopNavbar />\r\n\r\n                <div className=\"reportsPage\">\r\n                    <NavLink to=\"/vacations\" className=\"backHomeBtn\">Back Home</NavLink>\r\n                    {\r\n                        this.userTypeFromServerCache === \"ADMIN\" ?\r\n\r\n                        this.state.followedVacationsNames.length > 0 ?\r\n\r\n                            <div className=\"graphSection\">\r\n                                <h1 className=\"sharp-text likedUsersVacationsHeader\">Liked Users Vacations</h1>\r\n\r\n                                <div className=\"doughnut\">\r\n                                    <Doughnut\r\n                                        data={\r\n                                            {\r\n                                                labels: this.state.followedVacationsNames,\r\n                                                datasets: [\r\n                                                        {\r\n                                                            label: 'Likes',\r\n                                                            backgroundColor: this.state.followedVacationsNames.map( () => this.getRandomChartColor()),\r\n                                                            borderColor: 'white',\r\n                                                            borderWidth: 2,\r\n                                                            data: this.state.followedVacationsFollowersCount\r\n                                                        }\r\n                                                    ]\r\n                                            }\r\n                                        }\r\n                                        options={{\r\n                                            legend:{\r\n                                                display:true,\r\n                                                position:'right'\r\n                                            },\r\n                                            maintainAspectRatio: true\r\n                                        }}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <h1 className=\"sharp-text\">Oops... There are no liked vacations yet</h1>\r\n                                <img className=\"noAuthImg\" src={noAuthorizationSVG} alt=\"No Authorization\"/>\r\n                            </div>\r\n                        :\r\n                        <div className=\"noAuthSection\">\r\n                            <h1 className=\"sharp-text\">Oops... You are not authorized to view that page</h1>\r\n                            <img className=\"noAuthImg\" src={noAuthorizationSVG} alt=\"No Authorization\"/>\r\n                        </div>\r\n                    }\r\n\r\n                    {/* The User's Snackbar Error Indication */}\r\n                    <div id=\"snackbar\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\n// ---------------------------------- This Is The 'Vacation' Component ---------------------------------- //\r\n\r\nexport default function VacationComponent (props: any) {\r\n\r\n    return (\r\n        <div className=\"vacationCardContainer\">\r\n\r\n            <div className=\"topSection\">\r\n                <div className=\"imgSection\">\r\n                    <img className=\"vacationCardImg\" src={props.vacation.imageURL} alt={props.vacation.vacationName}/>\r\n                </div>\r\n\r\n                <div className=\"vacationInfoCard\">\r\n                    <h4 className=\"resortName\">{props.vacation.vacationName}</h4>\r\n\r\n                    <div className=\"vacationDates\">\r\n                        <h4 className=\"vacationDate\">{props.vacation.startDate}</h4>\r\n                        <span> - </span>\r\n                        <h4 className=\"vacationDate\">{props.vacation.endDate}</h4>\r\n                    </div>\r\n\r\n                    <h4 className=\"vacationPrice\">{props.vacation.vacationPrice} $</h4>\r\n                </div>\r\n\r\n                <div className=\"vacationDesc\">\r\n                    {props.vacation.vacationDescription}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"bottomSection\">\r\n\r\n                {/* If The Current User Is An Admin, Show Him The Control Buttons */}\r\n                {props.userTypeFromServerCache === \"ADMIN\" ?\r\n                \r\n                    <div className=\"adminControlPanel\">\r\n                        <IconButton onClick={(btn) => {\r\n                            props.onVacationDeleteAttempt(props.vacation, btn);\r\n                        }}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n\r\n                        <IconButton onClick={(btn) => {\r\n                            props.onVacationEditAttempt(props.vacation, btn);\r\n                        }}>\r\n                            <EditIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <div className=\"vacationLikeCardSection\">\r\n                            {props.validateVacationIsNotLikedByTheUser(props.vacation) ?\r\n                                <button className=\"emptyHeart likeBtn\" onClick={() => props.onVacationFollowAttempt(props.vacation)}></button>\r\n                            :\r\n                                <button className=\"fullHeart likeBtn\" onClick={() => props.onVacationFollowAttempt(props.vacation)}></button>\r\n                            }\r\n                        </div>\r\n                        \r\n                        <p className=\"followersText\">{props.vacation.followersCount}</p>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport deleteSVG from '../../assets/deleteSVG.svg';\r\nimport spinningEarthSVG from '../../assets/spinningEarthSVG.svg';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport VacationComponent from '../vacationComponent/VacationComponent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './allVacations.css';\r\nimport '../topNavbar/topNavbar.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n    private userTypeFromServerCache: string;\r\n    private userNameFromServerCache: string;\r\n    private imageToDeleteFromServer: string;\r\n    private socket: any;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n\r\n        try {\r\n            // Disconnecting from the socket connection\r\n            this.socket.disconnect();\r\n        }\r\n        catch {\r\n            this.vacationsErrorHandler('Something went wrong while trying to disconnect from Socket');\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener. Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            \r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        if (isUserLogged) {\r\n            await this.getUserInfoFromServerCache();\r\n\r\n            // Initiating the Socket connection to the server\r\n            this.initiateSocket();\r\n        }\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n\r\n        // Getting all the vacations from the server and inserting them to the Global Store\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations: Vacation[] = response.data;\r\n\r\n            // Insert all the vacations from the server to the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            // In case of an error, receiving the error, and displaying it in a Pop-Up UI message for the user\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function occurs after validations approved that this vacation can be liked by the user\r\n\r\n        interceptorHandler();\r\n\r\n        // Defining all 'like' buttons in order to disable them until the request is done\r\n        const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n        const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n        try {\r\n\r\n            this.disableButtonsGroup(likeButtonsArr);\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to follow that vacation\r\n            const clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://34.65.28.6:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Updating The Global Store\r\n            // store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n\r\n            // Emitting a socket message to the server, in order to inform all clients about the new followed vacation in the UI\r\n            const socketInfo = {\r\n                clickedVacationID,\r\n                userName: this.userNameFromServerCache\r\n            };\r\n\r\n            this.socket.emit('increase-vacation-followers-count', socketInfo);\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n\r\n        }\r\n\r\n        finally {\r\n            this.enableButtonsGroup(likeButtonsArr);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function is designated to make the user 'unfollow' a vacation\r\n        interceptorHandler();\r\n\r\n        // Defining all 'like' buttons in order to disable them until the request is done\r\n        const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n        const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n        try {\r\n\r\n            this.disableButtonsGroup(likeButtonsArr);\r\n            \r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://34.65.28.6:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n            // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\r\n            const socketInfo = {\r\n                clickedVacationID,\r\n                userName: this.userNameFromServerCache\r\n            };\r\n            this.socket.emit('decrease-vacation-followers-count', socketInfo);\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n        \r\n        finally {\r\n            this.enableButtonsGroup(likeButtonsArr);\r\n        }\r\n    }\r\n\r\n    private addVacation = async (addModalBackground: any) => {\r\n\r\n        let allInputsArr = this.getAllInputsArrForAddedVacation();\r\n        \r\n        // Validating that all the fields of the added vacation are valid\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let serverResponse = await axios.post<Vacation[]>(`http://34.65.28.6:3001/vacations/add_vacation`, newVacationData);\r\n                let newlyAddedVacation: Vacation = serverResponse.data[0];\r\n                \r\n                // Emitting a socket command to the server, in order to inform all clients about the new vacation\r\n                this.socket.emit('add-vacation', newlyAddedVacation);\r\n\r\n                this.hideModal(addModalBackground);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateVacation = async (clickedVacation : Vacation, editModalBackground: any) => {\r\n\r\n        const allInputsArr = this.getAllInputsArrForUpdatedVacation();\r\n        \r\n        // Validating all fields of the updated vacation are valid, and getting back the valid data\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            // Converting the data to for suitable UI display -> preventing retrieving the updated vacation from the DB\r\n            const convertedValidDataForUIDisplay = this.convertVacationDataForUIDisplay(allInputsArr, clickedVacation);\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let clickedVacationID: number = clickedVacation.vacationID;\r\n                const response = await axios.put(`http://34.65.28.6:3001/vacations/update_vacation/${clickedVacationID}`, {newVacationData, imageToDeleteFromServer: this.imageToDeleteFromServer});\r\n\r\n                const imageToPreview = response.data;\r\n                convertedValidDataForUIDisplay.imageURL = imageToPreview;\r\n\r\n                // Emitting a socket command to the server, in order to inform all clients about the updated vacation\r\n                this.socket.emit('update-vacation-info', convertedValidDataForUIDisplay);\r\n\r\n                this.hideModal(editModalBackground);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private deleteVacation = async (clickedVacationID: number) => {\r\n\r\n        interceptorHandler();\r\n\r\n        try {\r\n\r\n            const imageToDeleteFromServer = this.imageToDeleteFromServer;\r\n            await axios.post(`http://34.65.28.6:3001/vacations/delete_vacation/${clickedVacationID}`, {imageToDeleteFromServer});\r\n\r\n            // Emitting a socket command to the server, in order to inform all clients about the new deleted vacation\r\n            this.socket.emit('delete-vacation', clickedVacationID);\r\n        }\r\n        \r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private getUserInfoFromServerCache = async () => {\r\n\r\n        // This function retrieves the user type from the server, because we don't trust the client to tell us his user type\r\n        \r\n        try {\r\n            let userInfoFromServerCache = await getUserInfoFromServerCache();\r\n\r\n            this.userTypeFromServerCache = userInfoFromServerCache.userType;\r\n            this.userNameFromServerCache = userInfoFromServerCache.userName;\r\n        }\r\n\r\n        catch (error) {\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the Gloabl Store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private registerAllSocketListeners = () => {\r\n\r\n        // Registering all Socket.io Listeners\r\n\r\n        // Registering an 'add vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('add-vacation', (newlyAddedVacation: Vacation) => {\r\n            this.addVacationViaSocketIO(newlyAddedVacation);\r\n        });\r\n\r\n        // Registering an 'update vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('update-vacation-info', (convertedValidDataForUIDisplay: Vacation) => {\r\n            this.updateVacationInfoViaSocketIO(convertedValidDataForUIDisplay);\r\n        });\r\n\r\n        // Registering a 'delete vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('delete-vacation', (clickedVacationID: number) => {\r\n            this.deleteVacationViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n        // Registering an 'increase vacation followers count' listener, which updates the UI for all the clients\r\n        this.socket.on('increase-vacation-followers-count', (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n            this.increaseVacationFollowersCountViaSocketIO(socketInfo);\r\n        });\r\n\r\n        // Registering a 'decrease vacation followers count' listener, which updates the UI for all the clients\r\n        this.socket.on('decrease-vacation-followers-count', (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n            this.decreaseVacationFollowersCountViaSocketIO(socketInfo);\r\n        });\r\n    }\r\n\r\n    private convertVacationDataForUIDisplay = (inputsArr : HTMLInputElement[], clickedVacation: Vacation) => {\r\n\r\n        // This function gets a vacation data that the admin has changed locally, and converts it to display it locally (without reaching for the DB)\r\n\r\n        const clickedVacationID: number = clickedVacation.vacationID;\r\n        const clickedVacationFollowersCount: number = clickedVacation.followersCount;\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n\r\n        const convertedStartDate = this.convertStartDateForUIDisplay(vacationStartDateValue);\r\n        const convertedEndDate = this.convertEndDateForUIDisplay(vacationEndDateValue);\r\n\r\n        // Creating the converted vacation UI display object\r\n        const convertedValidDataForUIDisplay = {\r\n            vacationID: clickedVacationID,\r\n            vacationName: newNameTrimmedValue,\r\n            startDate: convertedStartDate,\r\n            endDate: convertedEndDate,\r\n            vacationPrice: newPriceValue,\r\n            vacationDescription: newDescriptionTrimmedValue,\r\n            imageURL: newVacationURL,\r\n            followersCount: clickedVacationFollowersCount\r\n        }\r\n\r\n        return convertedValidDataForUIDisplay;\r\n    }\r\n\r\n    private convertStartDateForUIDisplay = (vacationStartDateValue: string) => {\r\n\r\n        // This function converts the start date of a given vacation, to be suitable for the UI\r\n\r\n        let startDateYear = +vacationStartDateValue.split('-')[2];\r\n        let startDateMonth = +vacationStartDateValue.split('-')[1];\r\n        let startDateDay = +vacationStartDateValue.split('-')[0];\r\n        let fullStartDate = startDateYear+\"/\"+startDateMonth+\"/\"+startDateDay;\r\n\r\n        return fullStartDate;\r\n    }\r\n\r\n    private convertEndDateForUIDisplay = (vacationEndDateValue: string) => {\r\n\r\n        // This function converts the start date of a given vacation, to be suitable for the UI\r\n\r\n        let endDateYear = +vacationEndDateValue.split('-')[2];\r\n        let endDateMonth = +vacationEndDateValue.split('-')[1];\r\n        let endDateDay = +vacationEndDateValue.split('-')[0];\r\n        let fullEndDate = endDateYear+\"/\"+endDateMonth+\"/\"+endDateDay;\r\n\r\n        return fullEndDate;\r\n    }\r\n\r\n    private getAllInputsArrForAddedVacation = () => {\r\n\r\n        // Defining, and returning an array of all the inputs inside the 'Add Vacation' modal\r\n\r\n        const vacationName: HTMLInputElement = document.querySelector(\"#addedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.querySelector(\"#addStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.querySelector(\"#addEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.querySelector(\"#addedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.querySelector(\"#addedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.querySelector(\"#addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n\r\n        return allInputsArr;\r\n    }\r\n\r\n    private getAllInputsArrForUpdatedVacation = () => {\r\n\r\n        // Defining, and returning an array of all the inputs inside the 'Update Vacation' modal\r\n\r\n        const vacationName: HTMLInputElement = document.querySelector(\"#editedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.querySelector(\"#editStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.querySelector(\"#editEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.querySelector(\"#editedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.querySelector(\"#editedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.querySelector(\"#editedVacationImageURL\") as HTMLInputElement;\r\n\r\n        const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n\r\n        return allInputsArr;\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the 'follow' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        const isUserLogged = isUserLoggedValidator();\r\n        \r\n        // If the user is currently logged in\r\n        if (isUserLogged) {\r\n            \r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is already liked by the user, unfollow that vacation.\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateVacationIsNotLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        // Validating the vacation chosen is not already liked by the user\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find(\r\n            favoriteVacation => favoriteVacation.vacationID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation from the Global Store's 'all vacations' array\r\n\r\n        let allVacations: Vacation[] = store.getState().allVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = allVacations.find( allVacations =>  allVacations.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = allVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation from the Global Store's 'favorites' array\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private onVacationAdditionAttempt = () => {\r\n\r\n        /*\r\n            Before the 'add' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            this.displayAdditionModal();\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationEditAttempt = (clickedVacation: Vacation, event : MouseEvent) => {\r\n\r\n        /*\r\n            Before the 'edit' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to edit a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            const button = event.target as HTMLButtonElement;\r\n            this.disableButton(button);\r\n            this.displayEditModal(clickedVacation);\r\n            this.enableButton(button);\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationDeleteAttempt = (clickedVacation: Vacation, event : MouseEvent) => {\r\n\r\n        /*\r\n            Before the 'delete' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        \r\n        if (isUserLogged) {\r\n            const button = event.target as HTMLButtonElement;\r\n            this.disableButton(button);\r\n            this.displayDeletionModal(clickedVacation);\r\n            this.enableButton(button);\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateNewVacationData = (inputsArr: HTMLInputElement[]) => {\r\n\r\n        // This function validates all the Modal's fields are valid\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n \r\n\r\n        // Validating all Modal fields are valid\r\n\r\n        let isNewVacationURLValid = this.validateNewVacationURL(newVacationURL);\r\n        let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\r\n        let isNewPriceValid = this.validateNewPrice(newPriceValue);\r\n        let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\r\n        let isNewNameValid = this.validateNewName(newNameTrimmedValue);\r\n\r\n        if (isNewNameValid) {\r\n            if (isNewPriceValid) {\r\n                if (isNewDescriptionValid) {\r\n                    if (areDatesValid) {\r\n                        if (isNewVacationURLValid) {\r\n\r\n                            // Creating an object that has all the necessary data for adding / updating a vacation locally\r\n                            let newVacationData = {\r\n                                vacationName: newNameTrimmedValue,\r\n                                vacationPrice: newPriceValue,\r\n                                vacationDescription: newDescriptionTrimmedValue,\r\n                                startDate: vacationStartDateValue,\r\n                                endDate: vacationEndDateValue,\r\n                                imageURL: newVacationURL,\r\n                            };\r\n    \r\n                            // retrning the data + a 'true', in order to inform the caller that the data is valid\r\n                            return [true, newVacationData];\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // In case one of the parameters of the updated vacation is not valid\r\n        return [false, {}];\r\n    }\r\n\r\n    private validateNewName = (newTrimmedName: string) => {\r\n\r\n        // Validating the vacation's name inside the Modal\r\n\r\n        if (newTrimmedName !== \"\") {\r\n            if (newTrimmedName.length >= 3) {\r\n                if (newTrimmedName.length <= 44) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewPrice = (newPrice: number) => {\r\n\r\n        // Validating the vacation's price inside the Modal\r\n\r\n        if (newPrice > 0) {\r\n            if (newPrice < 100000) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new price must be larger than 0 and Lower than 100,000\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDescription = (newTrimmedDescription: string) => {\r\n\r\n        // Validating the vacation's description inside the Modal\r\n\r\n        if (newTrimmedDescription !== \"\") {\r\n            if (newTrimmedDescription.length >= 5) {\r\n                if (newTrimmedDescription.length <= 249) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDates = (newVacationStartDate: string, newVacationEndDate: string) => {\r\n\r\n        // Validating the logic of the dates inputs in the 'add Modal'\r\n\r\n        if (newVacationStartDate !== \"\") {\r\n            if (newVacationStartDate !== undefined) {\r\n\r\n                if (newVacationEndDate !== \"\") {\r\n                    if (newVacationEndDate !== undefined) {\r\n\r\n                        let currentDate = new Date().setHours(0, 0, 0, 0);\r\n                        let startDate = new Date(newVacationStartDate).setHours(0, 0, 0, 0);\r\n                        let endDate = new Date(newVacationEndDate).setHours(0, 0, 0, 0);\r\n\r\n                        // Checking if the starting date is not in the past\r\n                        if (startDate >= currentDate) {\r\n\r\n                            // Checking if the ending date is greater than the starting date\r\n                            if (endDate > startDate) {\r\n                                return true;\r\n                            }\r\n\r\n                            else {\r\n                                this.vacationsErrorHandler(\"The return date must be later than the starting date\");\r\n                                return false;\r\n                            }\r\n                        }\r\n\r\n                        else {\r\n                            this.vacationsErrorHandler(\"The starting date must be later than today\");\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewVacationURL = (newTrimmedImageURL: string) => {\r\n\r\n        // Validating the vacation's URL inside the Modal\r\n\r\n        if (newTrimmedImageURL !== \"\") {\r\n            if (newTrimmedImageURL.length >= 10) {\r\n                if (newTrimmedImageURL.length <= 998) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Image URL must be between 10 - 998 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private addVacationViaSocketIO = (newlyAddedVacation: Vacation) => {\r\n\r\n        // This function occurs whenever an admin adds a new vacation (the listener triggers this function using a Socket.io message).\r\n        // Updating the Global Store with the new vacation, in order to update the UI\r\n\r\n        store.dispatch({type: ActionType.AddVacation, payload: newlyAddedVacation});\r\n    }\r\n\r\n    private updateVacationInfoViaSocketIO = (convertedValidDataForUIDisplay: Vacation) => {\r\n\r\n        // Updating the user's UI with the vacation that was updated (edited) by the admin, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let updatedVacationID = convertedValidDataForUIDisplay.vacationID;\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(updatedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(updatedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.UpdateVacation, payload: {indexOfClickedVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n            store.dispatch({type: ActionType.UpdateFavoriteVacation, payload: {indexOfClickedFavoriteVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n        }\r\n    }\r\n\r\n    private deleteVacationViaSocketIO = (clickedVacationID: number) => {\r\n        \r\n        // Updating the user's UI with the vacation that was deleted by the admin, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.DeleteVacationViaSocketIO, payload: indexOfClickedVacationInGlobalStore });\r\n\r\n        // Checking if the user has liked this vacation\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n            store.dispatch({type: ActionType.DeleteFavoriteVacationViaSocketIO, payload: indexOfClickedFavoriteVacationInGlobalStore });\r\n        }\r\n    }\r\n\r\n    private increaseVacationFollowersCountViaSocketIO = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        // Updating the user's UI with the followers count of the vacation that was liked by other users, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\r\n\r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount + 1;\r\n\r\n        // Checking if the user has liked this vacation\r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.IncreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.IncreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n\r\n        this.checkIfUserShouldIncreaseFollowersCountInUI(socketInfo);\r\n    }\r\n\r\n    private decreaseVacationFollowersCountViaSocketIO = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        // Updating the user's UI with the followers count of the vacation that was unliked by other users, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\r\n        \r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount - 1;\r\n\r\n        // Checking if the user has liked this vacation\r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n            \r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.DecreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.DecreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n\r\n        this.checkIfUserShouldDecreaseFollowersCountInUI(socketInfo);\r\n    }\r\n\r\n    private checkIfUserShouldIncreaseFollowersCountInUI = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        const clickedVacationID = socketInfo.clickedVacationID;\r\n        const clickedVacationIndex = this.getIndexOfVacationByID(clickedVacationID);\r\n        const clickedVacation = store.getState().allVacations[clickedVacationIndex];\r\n\r\n        if (this.userNameFromServerCache === socketInfo.userName) {\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        };\r\n    }\r\n\r\n    private checkIfUserShouldDecreaseFollowersCountInUI = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        const clickedVacationID = socketInfo.clickedVacationID;\r\n        const clickedVacationIndex = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n        if (this.userNameFromServerCache === socketInfo.userName) {\r\n            store.dispatch({type: ActionType.UnfollowVacation, payload: clickedVacationIndex});\r\n        };\r\n    }\r\n\r\n    private initiateSocket = () => {\r\n\r\n        // Connecting to the server's socket\r\n        const userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo')).token;\r\n        \r\n        this.socket = socketIOClient('http://34.65.28.6:3002', { query: \"userToken=\" + userTokenForSocketIdentification});\r\n        this.registerAllSocketListeners();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = true;\r\n        button.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = false;\r\n        button.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private disableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.disableButton(button)\r\n        }\r\n    }\r\n\r\n    private enableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.enableButton(button)\r\n        }\r\n    }\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.querySelector(\"#snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private displayVacationNameInEditModal = (clickedVacationName: string) => {\r\n\r\n        // Displaying 'Edit' Modal Name\r\n\r\n        const editedVacationNameField = document.querySelector(\"#editedVacationName\") as HTMLInputElement;\r\n        editedVacationNameField.value = clickedVacationName;\r\n    }\r\n\r\n    private displayVacationPriceInEditModal = (clickedVacationPrice: number) => {\r\n\r\n        // Dusplaying 'Edit' Modal Price\r\n\r\n        const editedVacationPriceField = document.querySelector(\"#editedVacationPrice\") as HTMLInputElement;\r\n        editedVacationPriceField.valueAsNumber = clickedVacationPrice;\r\n    }\r\n\r\n    private displayVacationDatesInEditModal = (clickedVacationStartDate: string, clickedVacationEndDate: string) => {\r\n\r\n        // Displaying 'Edit' Modal Dates\r\n\r\n        const editStartDateField = document.querySelector(\"#editStartDate\") as HTMLInputElement;\r\n        const editEndDateField = document.querySelector(\"#editEndDate\") as HTMLInputElement;\r\n\r\n        // Start Date\r\n        let startDateYear = +clickedVacationStartDate.split('/')[2];\r\n        let startDateMonth = +clickedVacationStartDate.split('/')[1];\r\n        let startDateDay = +clickedVacationStartDate.split('/')[0];\r\n        let fullStartDate = startDateYear+\"-\"+startDateMonth+\"-\"+startDateDay;\r\n\r\n        // End Date\r\n        let endDateYear = +clickedVacationEndDate.split('/')[2];\r\n        let endDateMonth = +clickedVacationEndDate.split('/')[1];\r\n        let endDateDay = +clickedVacationEndDate.split('/')[0];\r\n        let fullEndDate = endDateYear+\"-\"+endDateMonth+\"-\"+endDateDay;\r\n        \r\n        editStartDateField.valueAsDate = new Date(fullStartDate);\r\n        editEndDateField.valueAsDate = new Date(fullEndDate);\r\n    }\r\n\r\n    private displayVacationDescriptionInEditModal = (clickedVacationDescription: string) => {\r\n\r\n        // Displaying 'Edit' Modal Description\r\n\r\n        const editVacationDescriptionField = document.querySelector(\"#editedVacationDescription\") as HTMLInputElement;\r\n        editVacationDescriptionField.value = clickedVacationDescription;\r\n    }\r\n\r\n    private displayVacationImageInEditModal = (clickedVacationImageURL: string) => {\r\n        \r\n        const editedVacationImageURL = document.querySelector(\"#editedVacationImageURL\") as HTMLInputElement;\r\n        editedVacationImageURL.value = clickedVacationImageURL;\r\n    }\r\n\r\n    private displayAdditionModal = () => {\r\n\r\n        // Defining the 'Add' Modal in the UI\r\n\r\n        const addModalBackground = document.querySelector(\"#addModalContainer\") as HTMLElement;\r\n        const addModalDoneBtn = document.querySelector(\"#addModalDoneBtn\") as HTMLButtonElement;\r\n        const addModalCancelBtn = document.querySelector(\"#addModalCancelBtn\") as HTMLButtonElement;\r\n\r\n        addModalBackground.style.display = \"block\";\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        addModalCancelBtn.onclick = () => {this.hideModal(addModalBackground)};\r\n\r\n        addModalDoneBtn.onclick = () => {\r\n\r\n            this.addVacation(addModalBackground);\r\n        };\r\n\r\n        window.addEventListener(\"click\", (event: MouseEvent) => {\r\n            if (event.target === addModalBackground) {\r\n                this.hideModal(addModalBackground);\r\n            }\r\n        })\r\n    }\r\n\r\n    private displayEditModal = (clickedVacation: Vacation) => {\r\n\r\n        // Defining the 'Edit' Modal in the UI\r\n\r\n        const editModalBackground = document.querySelector(\"#editModalContainer\") as HTMLElement;\r\n        const editModalIcon = document.querySelector(\"#editModalIcon\") as HTMLImageElement;\r\n        const editModalHeader = document.querySelector(\"#editModalHeader\");\r\n        const editModalDoneBtn = document.querySelector(\"#editModalDoneBtn\") as HTMLButtonElement;\r\n        const editModalCancelBtn = document.querySelector(\"#editModalCancelBtn\") as HTMLButtonElement;\r\n\r\n        // Displaying the values inside the 'Edit' Modal\r\n        this.displayVacationNameInEditModal(clickedVacation.vacationName);\r\n        this.displayVacationPriceInEditModal(clickedVacation.vacationPrice);\r\n        this.displayVacationDescriptionInEditModal(clickedVacation.vacationDescription);\r\n        this.displayVacationDatesInEditModal(clickedVacation.startDate, clickedVacation.endDate);\r\n        this.displayVacationImageInEditModal(clickedVacation.imageURL);\r\n        this.imageToDeleteFromServer = clickedVacation.imageURL;\r\n        \r\n        editModalBackground.style.display = \"block\";\r\n        editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\r\n        editModalIcon.src = clickedVacation.imageURL;\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        editModalCancelBtn.onclick = () => {this.hideModal(editModalBackground)};\r\n\r\n        editModalDoneBtn.onclick = () => {\r\n\r\n            this.updateVacation(clickedVacation, editModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === editModalBackground) {\r\n                editModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private displayDeletionModal = (clickedVacation: Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        const deletionModalBackground = document.querySelector(\"#deletionModalContainer\") as HTMLElement;\r\n        const deletionModalHeader = document.querySelector(\"#deletionModalHeader\");\r\n        const deletionModalTextParagraph = document.querySelector(\"#deletionModalText\");\r\n        const deleteBtn = document.querySelector(\"#deleteBtn\") as HTMLButtonElement;\r\n        const dontDeleteBtn = document.querySelector(\"#dontDeleteBtn\") as HTMLButtonElement;\r\n        const deletionModalVacationName = document.querySelector(\"#deletionModalVacationName\");\r\n\r\n        deletionModalBackground.style.display = \"block\";\r\n        deletionModalHeader.textContent = \"Confirm Your Deletion\";\r\n        deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\r\n        deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`;\r\n        this.imageToDeleteFromServer = clickedVacation.imageURL;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        dontDeleteBtn.onclick = () => {this.hideModal(deletionModalBackground)};\r\n\r\n        deleteBtn.onclick = () => {\r\n            this.deleteVacation(clickedVacationID);\r\n            this.hideModal(deletionModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === deletionModalBackground) {\r\n                deletionModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearModalInputs = () => {\r\n\r\n        // Clearing the inputs of the 'Add' Modal\r\n\r\n        let additionModalNameInput = document.querySelector(\"#addedVacationName\") as HTMLInputElement;\r\n        let additionModalStartDateInput = document.querySelector(\"#addStartDate\") as HTMLInputElement;\r\n        let additionModalEndDateInput = document.querySelector(\"#addEndDate\") as HTMLInputElement;\r\n        let additionModalPriceInput = document.querySelector(\"#addedVacationPrice\") as HTMLInputElement;\r\n        let additionModalDescriptionInput = document.querySelector(\"#addedVacationDescription\") as HTMLInputElement;\r\n        let additionModalImageURLInput = document.querySelector(\"#addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        additionModalNameInput.value = \"\";\r\n        additionModalStartDateInput.value = \"\";\r\n        additionModalEndDateInput.value = \"\";\r\n        additionModalPriceInput.valueAsNumber = 0;\r\n        additionModalDescriptionInput.value = \"\";\r\n        additionModalImageURLInput.value = \"\";\r\n    }\r\n\r\n    private hideModal = (modal: any) => {\r\n\r\n        modal.style.display = \"none\";\r\n        this.clearModalInputs();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                    {this.userTypeFromServerCache === \"ADMIN\"\r\n                    && \r\n                        <div className=\"topNavbarSection\">\r\n                            <span id=\"adminText\">Logged as an Admin</span>\r\n\r\n                            <span id=\"reportsNavItem\" className=\"topNavItem reportsNavItem\">\r\n                                <NavLink to=\"/reports\">View Reports Page</NavLink>\r\n                            </span>\r\n                        </div>\r\n                    }\r\n\r\n                    {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                    <div className=\"headerContainer\">\r\n                        {this.userTypeFromServerCache === \"ADMIN\" ?\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations You Can Edit</h2>\r\n                            :\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You</h2>\r\n                        }\r\n                    </div>\r\n                \r\n                    <div className=\"allVacations\">\r\n\r\n                        {/* If The Current User Is An Admin, Show Him The 'Add Vacation' Button */}\r\n\r\n                        {this.userTypeFromServerCache === \"ADMIN\"\r\n                            &&\r\n\r\n                            <div className=\"addVacationSquare\" onClick={this.onVacationAdditionAttempt}>\r\n                                <div className=\"newVacationText\">\r\n                                    <h2 className=\"sharp-text\">New Vacation</h2>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                        {\r\n                            this.state.allVacations.length > 0 ?\r\n\r\n                            // ---------- In case the user type in the server's cache is type 'USER' ---------- //\r\n\r\n                            this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                                <VacationComponent key={index} vacation= {vacation} onVacationFollowAttempt= {this.onVacationFollowAttempt}\r\n                                                    validateVacationIsNotLikedByTheUser= {this.validateVacationIsNotLikedByTheUser} onVacationDeleteAttempt= {this.onVacationDeleteAttempt}\r\n                                                    onVacationEditAttempt= {this.onVacationEditAttempt} userTypeFromServerCache= {this.userTypeFromServerCache}\r\n                                                    disableBtn= {this.disableButton} enableBtn= {this.enableButton} />\r\n                            )\r\n                            \r\n                            // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\r\n                            :\r\n                            <div className=\"noVcationsSection\">\r\n                                <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                                <h1 className=\"sharp-text\">Oops, We Could Not Find Any Vacations</h1>\r\n                            </div>\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n                {/* ---------------------------------------------- Modals and Snackbar ---------------------------------------------- */}\r\n\r\n                {/* --------------- The 'Deletion' Modal --------------- */}\r\n                <div id=\"deletionModalContainer\">\r\n                    <div id=\"deletionModal\">\r\n                        <h1 id=\"deletionModalHeader\">.</h1>\r\n                        <p id=\"deletionModalText\"></p>\r\n                        <h2 id=\"deletionModalVacationName\">.</h2>\r\n\r\n                        <img id=\"deleteModalIcon\" src={deleteSVG} alt=\"Delete Vacation Modal\" />\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"dontDeleteBtn\">Don't Delete</button>\r\n                            <button id=\"deleteBtn\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"editModalContainer\">\r\n                    <div id=\"editModal\">\r\n                        <h1 id=\"editModalHeader\">.</h1>\r\n\r\n                        <img id=\"editModalIcon\" alt=\"Add New Vacation Modal\" />\r\n\r\n                        <div id=\"editInputs\">\r\n                            <TextField id=\"editedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"editDatesSection\">\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"editStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"editEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"editedVacationPrice\" type=\"number\" label=\"Price\"variant=\"standard\" />\r\n\r\n                            <TextField id=\"editedVacationDescription\" label=\"Description\" />\r\n\r\n                            <TextField id=\"editedVacationImageURL\" label=\"Image URL\" />\r\n                            <p>The Image You Upload Will Be Saved!</p>\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"editModalCancelBtn\">Cancel</button>\r\n                            <button id=\"editModalDoneBtn\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"addModalContainer\">\r\n                    <div id=\"addModal\">\r\n                        <h1 id=\"addModalHeader\">Add a New Vacation !</h1>\r\n\r\n                        <img id=\"addModalIcon\" src={spinningEarthSVG} alt=\"Vacation URL Is Broken\" />\r\n\r\n                        <div id=\"addInputs\">\r\n                            <TextField id=\"addedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"addDatesSection\">\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"addStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"addEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"addedVacationPrice\" type=\"number\" label=\"Price\" variant=\"standard\" />\r\n\r\n                            <TextField id=\"addedVacationDescription\"label=\"Description\" />\r\n\r\n                            <TextField id=\"addedVacationImageURL\" label=\"Image URL\" />\r\n                            <p>The Image You Upload Will Be Saved!</p>\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"addModalCancelBtn\">Cancel</button>\r\n                            <button id=\"addModalDoneBtn\">Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);","import React from 'react';\r\n\r\n\r\n// ---------------------------------- This Is The 'Favorite Vacation' Component ---------------------------------- //\r\n\r\nexport default function FavoriteVacationComponent (props: any) {\r\n\r\n    return (\r\n        <div className=\"vacationCardContainer\">\r\n\r\n            <div className=\"topSection\">\r\n                <div className=\"imgSection\">\r\n                    <img className=\"vacationCardImg\" src={props.vacation.imageURL} alt={props.vacation.vacationDescription}/>\r\n                </div>\r\n\r\n                <div className=\"vacationInfoCard\">\r\n                    <h4 className=\"resortName\">{props.vacation.vacationName}</h4>\r\n\r\n                    <div className=\"vacationDates\">\r\n                        <h4 className=\"vacationDate\">{props.vacation.startDate}</h4>\r\n                        <span> - </span>\r\n                        <h4 className=\"vacationDate\">{props.vacation.endDate}</h4>\r\n                    </div>\r\n\r\n                    <h4 className=\"vacationPrice\">{props.vacation.vacationPrice} $</h4>\r\n                </div>\r\n\r\n                <div className=\"vacationDesc\">\r\n                    {props.vacation.vacationDescription}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"bottomSection\">\r\n                <div className=\"vacationLikeCardSection\">\r\n                    <button className=\"fullHeart likeBtn\" onClick={ () => {props.OnUserDislikeClick(props.vacation)}}></button>\r\n                </div>\r\n\r\n                <p className=\"followersText\">{props.vacation.followersCount}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","// -------------------- This Model Retrieves The User's Type From The sessionStorage And Returns It -------------------- //\r\n\r\n\r\nexport const getUserTypeFromStorage = () => {\r\n    \r\n    let userInfo = JSON.parse(sessionStorage.getItem('userInfo'));\r\n\r\n    if (userInfo !== null) {\r\n\r\n        if (userInfo.userType !== undefined) {\r\n            \r\n            return userInfo.userType;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport {withRouter} from 'react-router';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\r\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './favoriteVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n    private userNameFromServerCache: string;\r\n    private socket: any;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n    \r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small optimization\r\n        this.unSubscribeStore();\r\n\r\n        try {\r\n            // Disconnecting from the socket connection\r\n            this.socket.disconnect();\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        interceptorHandler();\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        if (isUserLogged) {\r\n            \r\n            const userInfoFromServerCache: {userType: string, userName: string} = await getUserInfoFromServerCache();\r\n            this.userNameFromServerCache = userInfoFromServerCache.userName;\r\n\r\n            // Initiating the Socket connection to the server\r\n            this.initiateSocket();\r\n        }\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the Global Store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        // Explanation -> 2 layers validation:\r\n        // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\r\n        // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\r\n        // If the validation fails in the server, the request will not retrieve any favorite vacations.\r\n        // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\r\n        \r\n        const userTypeFromStorage = getUserTypeFromStorage();\r\n\r\n        if (userTypeFromStorage === \"USER\") {\r\n\r\n            try {\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the user's favorite vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                // Updating the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.favoriteVacationsErrorHandler(errorMessage);\r\n                }\r\n                catch {\r\n                    this.favoriteVacationsErrorHandler(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again. -> Don't waste a server request on him.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            interceptorHandler();\r\n\r\n            // Defining all 'like' buttons in order to disable them until the request is done\r\n            const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n            const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n            try {\r\n\r\n                this.disableButtonsGroup(likeButtonsArr);\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post(`http://34.65.28.6:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n       \r\n                // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\r\n                const socketInfo = {\r\n                    clickedVacationID,\r\n                    userName: this.userNameFromServerCache\r\n                };\r\n\r\n                this.socket.emit('decrease-vacation-followers-count', socketInfo);\r\n            }\r\n    \r\n            catch (error) {\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            finally {\r\n                this.enableButtonsGroup(likeButtonsArr);\r\n            }\r\n        }\r\n\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n\r\n        const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\r\n\r\n        if (favoriteVacationsInGlobalStore.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: favoriteVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private initiateSocket = () => {\r\n\r\n        // Connecting to the server's Socket\r\n        const userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo')).token;\r\n        this.socket = socketIOClient('http://34.65.28.6:3002', { query: \"userToken=\" + userTokenForSocketIdentification});\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = true;\r\n        button.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = false;\r\n        button.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private disableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.disableButton(button)\r\n        }\r\n    }\r\n\r\n    private enableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.enableButton(button)\r\n        }\r\n    }\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error as a Popup message\r\n\r\n        let snackbar: HTMLDivElement = document.querySelector(\"#snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    // --------- If the user has no favorite vacations --------- //\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h2 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h2>\r\n                            </div>\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- All Vacations Cards, Using a Designated 'Favorite Vacation' Component ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <FavoriteVacationComponent key={index} vacation={vacation} OnUserDislikeClick={this.OnUserDislikeClick} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);","import React from 'react';\r\nimport './logo.css'\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Logo Of The Website ------------------------------------------------- //\r\n\r\nexport default function Logo() {\r\n\r\n    return (\r\n        <div className=\"logoContainer\">\r\n            <img className=\"logo\" src={require('../../assets//bannerBackground4.png')} alt=\"logo\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport AllVacations from '../allVacations/AllVacations';\r\nimport FavoriteVacations from '../favoriteVacations/FavoriteVacations';\r\nimport TopNavbar from '../topNavbar/TopNavbar';\r\nimport Logo from '../logo/Logo';\r\n\r\n\r\n// --------------- This Component Is The Layout For The Favorite Vacations Component & All Vacations Compoenent --------------- //\r\n\r\nexport default function VacationsPage() {\r\n\r\n    return (\r\n        <div className=\"vacationsAndNavbar\">\r\n            <div className=\"topNavbarSection\">\r\n                <Logo />\r\n                <TopNavbar />\r\n            </div>\r\n\r\n            <div className=\"allVacationsSectionsContainer\">\r\n                <FavoriteVacations />\r\n                <AllVacations />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport LoginPage from '../loginPage/LoginPage';\r\nimport RegisterPage from '../registerPage/RegisterPage';\r\nimport RerportsPage from '../reportsPage/ReportsPage';\r\nimport VacationsPage from '../vacationsPage/VacationsPage';\r\nimport './layout.css';\r\n\r\n\r\nexport default function Layout() {\r\n\r\n    return (\r\n        <div className=\"layout\" id=\"topPage\">\r\n            <BrowserRouter>\r\n\r\n                <Switch>\r\n                    <Route path=\"/login\" component={LoginPage} exact />\r\n                    <Route path=\"/register\" component={RegisterPage} exact />\r\n                    <Route path=\"/vacations\" component={VacationsPage} exact />\r\n                    <Route path=\"/reports\" component={RerportsPage} exact />\r\n                    \r\n                    <Redirect from=\"/\" to=\"/login\" exact />\r\n                </Switch>\r\n\r\n            </BrowserRouter>\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from '../src/components/layout/Layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/astronautSVG.a83ce8a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/noAuthorizationSVG.ae39de01.svg\";"],"sourceRoot":""}