{"ast":null,"code":"import axios from 'axios';\nimport { store } from '../Redux/Store';\nimport { ActionType } from '../Redux/ActionType';\n/*\r\n    Explanation -> This Model is called whenever a successful login has happaned\r\n    (Automatically after a successful registration / after a regular login).\r\n\r\n    This Model is designated to prevent duplication of code from all components that needs to make this proccess.\r\n*/\n// ---------- Attaching the user's token to the interceptor ---------- //\n\nconst attachTokenToInterceptor = token => {\n  // Attaching the Token and the Bearer string to the Interceptor\n  let brearerToken = \"Bearer \" + token;\n  axios.defaults.headers.common['Authorization'] = brearerToken;\n};\n\nexport const successfulLoginHandler = loginServerResponse => {\n  // Getting the Token we received from the server\n  attachTokenToInterceptor(loginServerResponse.token); // Inserting the user's info to the sessionStorage\n\n  let strUserInfo = JSON.stringify(loginServerResponse);\n  sessionStorage.setItem('userInfo', strUserInfo);\n  store.dispatch({\n    type: ActionType.updateUserName,\n    payload: loginServerResponse.userName\n  });\n};","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/models/SuccessfulLoginHandler.ts"],"names":["axios","store","ActionType","attachTokenToInterceptor","token","brearerToken","defaults","headers","common","successfulLoginHandler","loginServerResponse","strUserInfo","JSON","stringify","sessionStorage","setItem","dispatch","type","updateUserName","payload","userName"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA;;;;;;AAOA;;AAEA,MAAMC,wBAAwB,GAAIC,KAAD,IAAmB;AAEhD;AAEA,MAAIC,YAAY,GAAG,YAAYD,KAA/B;AACAJ,EAAAA,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDH,YAAjD;AACH,CAND;;AAQA,OAAO,MAAMI,sBAAsB,GAAIC,mBAAD,IAAyD;AAE3F;AACAP,EAAAA,wBAAwB,CAACO,mBAAmB,CAACN,KAArB,CAAxB,CAH2F,CAK3F;;AACA,MAAIO,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeH,mBAAf,CAAlB;AACAI,EAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCJ,WAAnC;AAEAV,EAAAA,KAAK,CAACe,QAAN,CAAe;AAACC,IAAAA,IAAI,EAAEf,UAAU,CAACgB,cAAlB;AAAkCC,IAAAA,OAAO,EAAET,mBAAmB,CAACU;AAA/D,GAAf;AACH,CAVM","sourcesContent":["import SuccessfulLoginServerResponse from './SuccessfulLoginServerResponse';\r\nimport axios from 'axios';\r\nimport { store } from '../Redux/Store';\r\nimport { ActionType } from '../Redux/ActionType';\r\n\r\n/*\r\n    Explanation -> This Model is called whenever a successful login has happaned\r\n    (Automatically after a successful registration / after a regular login).\r\n\r\n    This Model is designated to prevent duplication of code from all components that needs to make this proccess.\r\n*/\r\n\r\n// ---------- Attaching the user's token to the interceptor ---------- //\r\n\r\nconst attachTokenToInterceptor = (token: string) => {\r\n\r\n    // Attaching the Token and the Bearer string to the Interceptor\r\n\r\n    let brearerToken = \"Bearer \" + token;\r\n    axios.defaults.headers.common['Authorization'] = brearerToken;\r\n}\r\n\r\nexport const successfulLoginHandler = (loginServerResponse : SuccessfulLoginServerResponse) => {\r\n\r\n    // Getting the Token we received from the server\r\n    attachTokenToInterceptor(loginServerResponse.token);\r\n    \r\n    // Inserting the user's info to the sessionStorage\r\n    let strUserInfo = JSON.stringify(loginServerResponse);\r\n    sessionStorage.setItem('userInfo', strUserInfo);\r\n\r\n    store.dispatch({type: ActionType.updateUserName, payload: loginServerResponse.userName});\r\n}"]},"metadata":{},"sourceType":"module"}