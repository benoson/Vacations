{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\registerPage\\\\RegisterPage.tsx\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport logo from \"../../assets/astronautSVG.svg\";\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\nimport TopBanner from '../topBanner/TopBanner';\nimport axios from 'axios';\nimport './registerPage.css';\nexport default class RegisterPage extends Component {\n  // Defining the global DOM elemends\n  constructor(props) {\n    super(props);\n    this.firstNameInputFieldset = void 0;\n    this.lastNameInputFieldset = void 0;\n    this.usernameInputFieldset = void 0;\n    this.passwordInputFieldset = void 0;\n    this.firstNameInputField = void 0;\n    this.lastNameInputField = void 0;\n    this.usernameInputField = void 0;\n    this.passwordInputField = void 0;\n    this.userMessagesParagraph = void 0;\n\n    this.componentDidMount = () => {\n      // Defining global DOM elements\n      this.firstNameInputFieldset = document.getElementById(\"firstNameFieldset\");\n      this.lastNameInputFieldset = document.getElementById(\"lastNameFieldset\");\n      this.usernameInputFieldset = document.getElementById(\"usernameFieldset\");\n      this.passwordInputFieldset = document.getElementById(\"passwordFieldset\");\n      this.firstNameInputField = document.getElementById(\"firstNameField\");\n      this.lastNameInputField = document.getElementById(\"lastNameField\");\n      this.usernameInputField = document.getElementById(\"usernameField\");\n      this.passwordInputField = document.getElementById(\"passwordField\");\n      this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\");\n    };\n\n    this.updateFirstNameValue = event => {\n      // getting the first name value entered in the first name's input field\n      const firstNameInputField = event.target;\n      const firstNameInputFieldValue = firstNameInputField.value;\n      const trimmedFirstNameInputField = firstNameInputFieldValue.trim();\n      this.setState({\n        firstName: trimmedFirstNameInputField\n      });\n    };\n\n    this.updateLastNameValue = event => {\n      // getting the password value entered in the password's input field\n      const lastNameInputField = event.target;\n      const lastNameInputFieldValue = lastNameInputField.value;\n      const trimmedLastNameInputField = lastNameInputFieldValue.trim();\n      this.setState({\n        lastName: trimmedLastNameInputField\n      });\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the password value entered in the password's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputField = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputField\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password value entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      const trimmedPasswordInputField = passwordInputFieldValue.trim();\n      this.setState({\n        password: trimmedPasswordInputField\n      });\n    };\n\n    this.registerErrorHandler = errorMessage => {\n      this.userMessagesParagraph.textContent = errorMessage;\n    };\n\n    this.notifyUserInputFieldIsNotValid = inputField => {\n      inputField.style.border = \"2px solid red\";\n    };\n\n    this.checkIfFirstNameIsValid = () => {\n      if (this.state.firstName === \"\") {\n        const firstNameInputField = this.firstNameInputFieldset;\n        this.notifyUserInputFieldIsNotValid(firstNameInputField);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkIfLastNameIsValid = () => {\n      if (this.state.lastName === \"\") {\n        const firstNameInputField = this.lastNameInputFieldset;\n        this.notifyUserInputFieldIsNotValid(firstNameInputField);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkIfPasswordIsValid = () => {\n      const passwordInputField = this.passwordInputFieldset;\n\n      if (this.state.password !== \"\") {\n        // If the password is at least 6 characters long\n        if (this.state.password.length > 5) {\n          return true;\n        } else {\n          this.notifyUserPasswordFieldIsTooShort();\n          this.notifyUserInputFieldIsNotValid(passwordInputField);\n          return false;\n        }\n      }\n\n      this.notifyUserPasswordFieldIsEmpty();\n      return false;\n    };\n\n    this.notifyUserPasswordFieldIsEmpty = () => {\n      this.notifyUserInputFieldIsNotValid(this.passwordInputFieldset);\n      this.userMessagesParagraph.textContent = \"Password Field Must Not Be Empty\";\n    };\n\n    this.notifyUserPasswordFieldIsTooShort = () => {\n      this.userMessagesParagraph.textContent = \"Password Must Be At Least 6 Characters Long\";\n    };\n\n    this.notifyUserUserNameIsTooShort = () => {\n      this.userMessagesParagraph.textContent = \"Username Must Be At Least 3 Characters Long\";\n    };\n\n    this.checkIfUserNameIsValid = () => {\n      const usernameInputField = this.usernameInputFieldset;\n\n      if (this.state.userName !== \"\") {\n        if (this.state.userName.length >= 3) {\n          return true;\n        }\n\n        this.notifyUserUserNameIsTooShort();\n      }\n\n      this.notifyUserInputFieldIsNotValid(usernameInputField);\n      return false;\n    };\n\n    this.resetInputFields = () => {\n      this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.userMessagesParagraph.textContent = \"\";\n    };\n\n    this.checkIfRegistrationDataIsValid = () => {\n      let isFirstNameValid = this.checkIfFirstNameIsValid();\n      let isLastNameValid = this.checkIfLastNameIsValid();\n      let isUserNameValid = this.checkIfUserNameIsValid();\n      let isPasswordValid = this.checkIfPasswordIsValid(); // If one of the input fields is not valid, return false\n\n      if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.onUserRegisterClick = async () => {\n      this.resetInputFields();\n      const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\n\n      if (isRegistrationDataValid) {\n        try {\n          let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password); // Explanation ->\n          // I chose to make the user login automatically after a successful registration.\n          // So, in the server, after a successful insertion of data to the DB, it automatically sends the user\n          // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\n\n          const serverResponse = await axios.post('http://localhost:3001/users/register', userRegisterDetails); // Getting the server response (after the 'login' function occurred on the server)\n          // (Token & User Type)\n\n          const serverResponseData = serverResponse.data;\n          /*\r\n              @ This model's roles: Attaching the token to the interceptor & Inserting the token and user type to the sessionStorage.\r\n          \n              I made this model in order to handle successful login responses both after a successful registration proccess,\r\n              and after a regular logic proccess. It prevents duplication of code.\r\n          */\n\n          successfulLoginHandler(serverResponseData);\n          this.routingHandler();\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.registerErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.routingHandler = () => {\n      // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n      const userInfo = JSON.parse(sessionStorage.getItem('userInfo'));\n      let userType = userInfo.userType;\n\n      if (userType === \"ADMIN\") {\n        this.props.history.push('/admin');\n      } else if (userType === \"USER\") {\n        this.props.history.push('/user');\n      }\n    };\n\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      userName: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSectionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopBanner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"register-logo\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 25\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 25\n      }\n    }, \"To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"firstNameFieldset\",\n      className: \"cerdinals-fieldset firstNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 33\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateFirstNameValue,\n      type: \"text\",\n      name: \"firstName\",\n      id: \"firstNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"lastNameFieldset\",\n      className: \"cerdinals-fieldset lastNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 33\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateLastNameValue,\n      type: \"text\",\n      name: \"lastName\",\n      id: \"lastNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"usernameFieldset\",\n      className: \"cerdinals-fieldset usernameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"passwordFieldset\",\n      className: \"cerdinals-fieldset passwordFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"registerBtn\",\n      onClick: this.onUserRegisterClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 29\n      }\n    }, \"Register\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"alreadyRegisteredLink sharp-text\",\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, \"I Already Have An Account\")), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"userMessagesParagraph\",\n      className: \"userMessagesParagraph sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/registerPage/RegisterPage.tsx"],"names":["React","Component","NavLink","UserRegisterDetails","successfulLoginHandler","TopBanner","axios","RegisterPage","constructor","props","firstNameInputFieldset","lastNameInputFieldset","usernameInputFieldset","passwordInputFieldset","firstNameInputField","lastNameInputField","usernameInputField","passwordInputField","userMessagesParagraph","componentDidMount","document","getElementById","updateFirstNameValue","event","target","firstNameInputFieldValue","value","trimmedFirstNameInputField","trim","setState","firstName","updateLastNameValue","lastNameInputFieldValue","trimmedLastNameInputField","lastName","updateUserNameValue","userNameInputField","userNameInputFieldValue","trimmedUserNameInputField","userName","updatePasswordValue","passwordInputFieldValue","trimmedPasswordInputField","password","registerErrorHandler","errorMessage","textContent","notifyUserInputFieldIsNotValid","inputField","style","border","checkIfFirstNameIsValid","state","checkIfLastNameIsValid","checkIfPasswordIsValid","length","notifyUserPasswordFieldIsTooShort","notifyUserPasswordFieldIsEmpty","notifyUserUserNameIsTooShort","checkIfUserNameIsValid","resetInputFields","checkIfRegistrationDataIsValid","isFirstNameValid","isLastNameValid","isUserNameValid","isPasswordValid","onUserRegisterClick","isRegistrationDataValid","userRegisterDetails","serverResponse","post","serverResponseData","data","routingHandler","error","response","userInfo","JSON","parse","sessionStorage","getItem","userType","history","push","render","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport axios from 'axios';\r\nimport './registerPage.css';\r\n\r\n\r\n\r\ninterface UserRegisterState {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class RegisterPage extends Component <any, UserRegisterState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private firstNameInputFieldset: HTMLFieldSetElement;\r\n    private lastNameInputFieldset: HTMLFieldSetElement;\r\n    private usernameInputFieldset: HTMLFieldSetElement;\r\n    private passwordInputFieldset: HTMLFieldSetElement;\r\n\r\n    private firstNameInputField: HTMLInputElement;\r\n    private lastNameInputField: HTMLInputElement;\r\n    private usernameInputField: HTMLInputElement;\r\n    private passwordInputField: HTMLInputElement;\r\n\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Defining global DOM elements\r\n        this.firstNameInputFieldset = document.getElementById(\"firstNameFieldset\") as HTMLFieldSetElement;\r\n        this.lastNameInputFieldset = document.getElementById(\"lastNameFieldset\") as HTMLFieldSetElement;\r\n        this.usernameInputFieldset = document.getElementById(\"usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputFieldset = document.getElementById(\"passwordFieldset\") as HTMLFieldSetElement;\r\n\r\n        this.firstNameInputField = document.getElementById(\"firstNameField\") as HTMLInputElement;\r\n        this.lastNameInputField = document.getElementById(\"lastNameField\") as HTMLInputElement;\r\n        this.usernameInputField = document.getElementById(\"usernameField\") as HTMLInputElement;\r\n        this.passwordInputField = document.getElementById(\"passwordField\") as HTMLInputElement;\r\n\r\n        this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n    \r\n\r\n    \r\n    private updateFirstNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the first name value entered in the first name's input field\r\n        const firstNameInputField : HTMLInputElement = event.target;\r\n\r\n        const firstNameInputFieldValue : string =  firstNameInputField.value;\r\n        const trimmedFirstNameInputField : string = firstNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            firstName: trimmedFirstNameInputField\r\n        });\r\n    }\r\n\r\n    private updateLastNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const lastNameInputField : HTMLInputElement = event.target;\r\n\r\n        const lastNameInputFieldValue : string =  lastNameInputField.value;\r\n        const trimmedLastNameInputField : string = lastNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            lastName: trimmedLastNameInputField\r\n        });\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputField : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputField\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n        const trimmedPasswordInputField : string = passwordInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            password: trimmedPasswordInputField\r\n        });\r\n    }\r\n\r\n    private registerErrorHandler = (errorMessage : string) => {\r\n\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n    private notifyUserInputFieldIsNotValid = (inputField : HTMLFieldSetElement) => {\r\n\r\n        inputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private checkIfFirstNameIsValid = () => {\r\n        \r\n        if (this.state.firstName === \"\") {\r\n\r\n            const firstNameInputField = this.firstNameInputFieldset;\r\n            this.notifyUserInputFieldIsNotValid(firstNameInputField);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfLastNameIsValid = () => {\r\n        \r\n        if (this.state.lastName === \"\") {\r\n\r\n            const firstNameInputField = this.lastNameInputFieldset;\r\n            this.notifyUserInputFieldIsNotValid(firstNameInputField);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfPasswordIsValid = () => {\r\n        \r\n        const passwordInputField = this.passwordInputFieldset;\r\n\r\n        if (this.state.password !== \"\") {\r\n\r\n            // If the password is at least 6 characters long\r\n            if (this.state.password.length > 5) {\r\n                return true;\r\n            }\r\n            \r\n            else {\r\n                this.notifyUserPasswordFieldIsTooShort();\r\n                this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this.notifyUserPasswordFieldIsEmpty();\r\n\r\n        return false;\r\n    }\r\n\r\n    private notifyUserPasswordFieldIsEmpty = () => {\r\n\r\n        this.notifyUserInputFieldIsNotValid(this.passwordInputFieldset);\r\n        this.userMessagesParagraph.textContent = \"Password Field Must Not Be Empty\";\r\n    }\r\n\r\n    private notifyUserPasswordFieldIsTooShort = () => {\r\n\r\n        this.userMessagesParagraph.textContent = \"Password Must Be At Least 6 Characters Long\";\r\n    }\r\n\r\n    private notifyUserUserNameIsTooShort = () => {\r\n        this.userMessagesParagraph.textContent = \"Username Must Be At Least 3 Characters Long\";\r\n    }\r\n\r\n    private checkIfUserNameIsValid = () => {\r\n        \r\n        const usernameInputField = this.usernameInputFieldset;\r\n\r\n        if (this.state.userName !== \"\") {\r\n\r\n            if (this.state.userName.length >= 3) {\r\n                return true;\r\n            }\r\n\r\n            this.notifyUserUserNameIsTooShort();\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(usernameInputField);\r\n        return false;\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n    private checkIfRegistrationDataIsValid = () => {\r\n        \r\n        let isFirstNameValid = this.checkIfFirstNameIsValid();\r\n        let isLastNameValid = this.checkIfLastNameIsValid();\r\n        let isUserNameValid = this.checkIfUserNameIsValid();\r\n        let isPasswordValid = this.checkIfPasswordIsValid();\r\n\r\n        // If one of the input fields is not valid, return false\r\n        if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private onUserRegisterClick = async () => {\r\n\r\n        this.resetInputFields();\r\n        const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\r\n\r\n        if (isRegistrationDataValid) {\r\n            try {\r\n\r\n                let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n                \r\n                // Explanation ->\r\n                // I chose to make the user login automatically after a successful registration.\r\n                // So, in the server, after a successful insertion of data to the DB, it automatically sends the user\r\n                // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\r\n    \r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/register', userRegisterDetails);\r\n    \r\n                // Getting the server response (after the 'login' function occurred on the server)\r\n                // (Token & User Type)\r\n                const serverResponseData = serverResponse.data;\r\n                \r\n    \r\n                /*\r\n                    @ This model's roles: Attaching the token to the interceptor & Inserting the token and user type to the sessionStorage.\r\n               \r\n                    I made this model in order to handle successful login responses both after a successful registration proccess,\r\n                    and after a regular logic proccess. It prevents duplication of code.\r\n                */\r\n                \r\n                successfulLoginHandler(serverResponseData);\r\n    \r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.registerErrorHandler(errorMessage)\r\n            }\r\n        }\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        const userInfo = JSON.parse(sessionStorage.getItem('userInfo'));\r\n        let userType = userInfo.userType;\r\n\r\n        if (userType === \"ADMIN\") {\r\n            this.props.history.push('/admin');\r\n        }\r\n\r\n        else if (userType === \"USER\") {\r\n            this.props.history.push('/user');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"registerSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"registerSection\">\r\n\r\n                    <div className=\"registerSquare\">\r\n                        <img className=\"register-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Register</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"firstNameFieldset\" className=\"cerdinals-fieldset firstNameFieldset\">\r\n                                <legend>First Name</legend>\r\n                                <input onChange={this.updateFirstNameValue} type=\"text\" name=\"firstName\" id=\"firstNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"lastNameFieldset\" className=\"cerdinals-fieldset lastNameFieldset\">\r\n                                <legend>Last Name</legend>\r\n                                <input onChange={this.updateLastNameValue} type=\"text\" name=\"lastName\" id=\"lastNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset usernameFieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset passwordFieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button className=\"registerBtn\" onClick={this.onUserRegisterClick}>Register</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"alreadyRegisteredLink sharp-text\" to=\"/login\">I Already Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}