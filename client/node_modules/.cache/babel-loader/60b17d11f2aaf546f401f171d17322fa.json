{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport settingsImage from '../../assets/settingsImg.png';\nimport VacationComponent from '../vacationComponent/VacationComponent';\nimport './allVacations.css';\nimport { interceptorHandler } from '../../models/InterceptorHandler'; // ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\n\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n      this.checkIfGlobalStoraHasAllVacations();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      // Getting all the vacations from the server and inserting them to the Global Store\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations/'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data; // Insert all the vacations from the server to the Global Store\n\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      // This function occurs after validations approved that this vacation can be liked by the user\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`); // Updating The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      // This function is designated to make the user 'unfollow' a vacation\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\n        let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\n\n        store.dispatch({\n          type: ActionType.UnfolloweVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.checkIfGlobalStoraHasAllVacations = () => {\n      // Checking if the global store has all the vacations to display, and if not, get them from the server\n      let allVacationsInGlobalStore = store.getState().allVacations;\n\n      if (allVacationsInGlobalStore.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: allVacationsInGlobalStore\n        });\n      }\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      /*\r\n          Before the 'follow' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      interceptorHandler(); // If the user is currently logged in\n      // checking if the user hasn't liked this vacation already\n\n      const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n      if (vacationIsNotAlreadyLikedByTheUser) {\n        this.followVacation(clickedVacation);\n      } // If the vacation selected is already liked by the user, unfollow that vacation.\n      else {\n          this.unfollowVacation(clickedVacation);\n        } // In case a guest tried to follow a vacation, send him to the login page in order for him to login\n\n\n      this.props.history.push('/login');\n    };\n\n    this.validateVacationIsNotLikedByTheUser = clickedVacation => {\n      // Validating the vacation chosen is not already liked by the user\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.vacationID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.vacationID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getIndexOfFavoriteVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, this.state.allVacations.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 25\n      }\n    }, this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(VacationComponent, {\n      key: index,\n      vacation: vacation,\n      onVacationFollowAttempt: this.onVacationFollowAttempt,\n      validateVacationIsNotLikedByTheUser: this.validateVacationIsNotLikedByTheUser,\n      userTypeFromServerCache: \"USER\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 33\n      }\n    })))) // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\n    :\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"noVcationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"settingsImage\",\n      src: settingsImage,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 25\n      }\n    }, \"We Are Sorry, There Was a Problem\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 25\n      }\n    }, \"Getting The Vacations From The Server\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","store","axios","ActionType","withRouter","settingsImage","VacationComponent","interceptorHandler","AllVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","allVacations","getState","checkIfGlobalStoraHasAllVacations","getAllVacationsFromServer","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","vacationsErrorHandler","followVacation","clickedVacation","clickedVacationID","vacationID","post","SetFollowedVacation","unfollowVacation","indexOfClickedVacationInGlobalStore","getIndexOfFavoriteVacationByID","UnfolloweVacation","allVacationsInGlobalStore","length","onVacationFollowAttempt","vacationIsNotAlreadyLikedByTheUser","validateVacationIsNotLikedByTheUser","history","push","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationInGlobalStore","find","favoriteVacation","undefined","indexOf","snackbar","document","getElementById","className","textContent","setTimeout","replace","state","Array","render","map","vacation","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport VacationComponent from '../vacationComponent/VacationComponent';\r\nimport './allVacations.css';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            \r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n\r\n        // Getting all the vacations from the server and inserting them to the Global Store\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            \r\n            // Insert all the vacations from the server to the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function occurs after validations approved that this vacation can be liked by the user\r\n\r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Updating The Global Store\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function is designated to make the user 'unfollow' a vacation\r\n        \r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n            let indexOfClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n            // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\r\n            store.dispatch({type: ActionType.UnfolloweVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the global store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the 'follow' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        interceptorHandler();\r\n\r\n        // If the user is currently logged in\r\n\r\n        // checking if the user hasn't liked this vacation already\r\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation);\r\n\r\n        // If the vacation selected is not already liked by the user, follow that vacation\r\n        if (vacationIsNotAlreadyLikedByTheUser) {\r\n            this.followVacation(clickedVacation);\r\n        }\r\n\r\n        // If the vacation selected is already liked by the user, unfollow that vacation.\r\n        else {\r\n            this.unfollowVacation(clickedVacation);\r\n        }\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login\r\n        this.props.history.push('/login');\r\n    }\r\n\r\n    private validateVacationIsNotLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        // Validating the vacation chosen is not already liked by the user\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find(\r\n            favoriteVacation => favoriteVacation.vacationID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.allVacations.length > 0 ?\r\n\r\n                    <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                        {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                        <div className=\"headerContainer\">\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You\r\n                            </h2>\r\n                        </div>\r\n                    \r\n                        <div className=\"allVacations\">\r\n\r\n                            {/* ---------- In case the user type in the server's cache is type 'USER' ---------- */}\r\n                            \r\n                            {this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n\r\n                                <VacationComponent key={index} vacation= {vacation} onVacationFollowAttempt= {this.onVacationFollowAttempt}\r\n                                                   validateVacationIsNotLikedByTheUser= {this.validateVacationIsNotLikedByTheUser} userTypeFromServerCache = \"USER\" />\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>      \r\n\r\n                    // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\r\n                    :\r\n                    <div className=\"noVcationsSection\">\r\n                        <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                        <h1 className=\"sharp-text\">We Are Sorry, There Was a Problem</h1>\r\n                        <h1 className=\"sharp-text\">Getting The Vacations From The Server</h1>\r\n                    </div>\r\n                }\r\n\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}