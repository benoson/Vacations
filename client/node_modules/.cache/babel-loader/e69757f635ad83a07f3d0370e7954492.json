{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{NavLink}from'react-router-dom';import logo from\"../../assets/astronautSVG.svg\";import UserRegisterDetails from'../../models/UserRegisterDetails';import{successfulLoginHandler}from'../../models/SuccessfulLoginHandler';import TopBanner from'../topBanner/TopBanner';import axios from'axios';import'./registerPage.css';// ------------------------------------------------- This Component Displays The Registration Screen ------------------------------------------------- //\nvar RegisterPage=/*#__PURE__*/function(_Component){_inherits(RegisterPage,_Component);var _super=_createSuper(RegisterPage);// Defining the global DOM elemends\nfunction RegisterPage(props){var _this;_classCallCheck(this,RegisterPage);_this=_super.call(this,props);_this.firstNameInputFieldset=void 0;_this.lastNameInputFieldset=void 0;_this.usernameInputFieldset=void 0;_this.passwordInputFieldset=void 0;_this.userMessagesParagraph=void 0;_this.componentDidMount=function(){// Defining global DOM elements\n_this.firstNameInputFieldset=document.querySelector(\"#firstNameFieldset\");_this.lastNameInputFieldset=document.querySelector(\"#lastNameFieldset\");_this.usernameInputFieldset=document.querySelector(\"#usernameFieldset\");_this.passwordInputFieldset=document.querySelector(\"#passwordFieldset\");_this.userMessagesParagraph=document.querySelector(\"#userMessagesParagraph\");};_this.onUserRegisterClick=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var isRegistrationDataValid,userRegisterDetails,serverResponse,serverResponseData,errorMessage;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this.resetInputFields();isRegistrationDataValid=_this.checkIfRegistrationDataIsValid();if(!isRegistrationDataValid){_context.next=18;break;}_context.prev=3;_this.disableRegisterButton();userRegisterDetails=new UserRegisterDetails(_this.state.firstName,_this.state.lastName,_this.state.userName,_this.state.password);// Explanation ->\n// I chose to make the user login automatically after a successful registration.\n// So, in the server, after a successful insertion of user's info to the DB, it automatically sends the user\n// to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\n_context.next=8;return axios.post('http://34.65.28.6:3001/users/register',userRegisterDetails);case 8:serverResponse=_context.sent;// Getting the server response (after the 'login' function occurred on the server)\nserverResponseData=serverResponse.data;// A Model that handles a successful login response from the server\nsuccessfulLoginHandler(serverResponseData);_this.enableRegisterBtn();_this.routingHandler();_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](3);try{errorMessage=_context.t0.response.data.error;_this.registerErrorHandler(errorMessage);}catch(_unused){_this.registerErrorHandler(_context.t0);}finally{_this.enableRegisterBtn();}case 18:case\"end\":return _context.stop();}}},_callee,null,[[3,15]]);}));_this.checkIfRegistrationDataIsValid=function(){var isFirstNameValid=_this.checkIfFirstNameIsValid();var isLastNameValid=_this.checkIfLastNameIsValid();var isPasswordValid=_this.checkIfPasswordIsValid();var isUserNameValid=_this.checkIfUserNameIsValid();// If one of the input fields is not valid, return false\nif(!isFirstNameValid||!isLastNameValid||!isUserNameValid||!isPasswordValid){return false;}return true;};_this.updateFirstNameValue=function(event){// getting the first name value entered in the first name's input field\nvar firstNameInputField=event.target;var firstNameInputFieldValue=firstNameInputField.value;var trimmedFirstNameInputField=firstNameInputFieldValue.trim();_this.setState({firstName:trimmedFirstNameInputField});};_this.updateLastNameValue=function(event){// getting the last name value entered in the last name's input field\nvar lastNameInputField=event.target;var lastNameInputFieldValue=lastNameInputField.value;var trimmedLastNameInputField=lastNameInputFieldValue.trim();_this.setState({lastName:trimmedLastNameInputField});};_this.updateUserNameValue=function(event){// getting the username value entered in the username's input field\nvar userNameInputField=event.target;var userNameInputFieldValue=userNameInputField.value;var trimmedUserNameInputField=userNameInputFieldValue.trim();_this.setState({userName:trimmedUserNameInputField});};_this.updatePasswordValue=function(event){// getting the password value entered in the password's input field\nvar passwordInputField=event.target;var passwordInputFieldValue=passwordInputField.value;var trimmedPasswordInputField=passwordInputFieldValue.trim();_this.setState({password:trimmedPasswordInputField});};_this.checkIfFirstNameIsValid=function(){var trimmedFirstName=_this.state.firstName.trim();var firstNameInputField=_this.firstNameInputFieldset;if(trimmedFirstName!==\"\"){// If the first name entered is less than 26 characters\nif(trimmedFirstName.length<=25){return true;}// If the last name entered is more than 25 characters\nelse{_this.registerErrorHandler(\"First Name Must Not Be More Than 25 characters\");}}_this.notifyUserInputFieldIsNotValid(firstNameInputField);return false;};_this.checkIfLastNameIsValid=function(){var trimmedLastName=_this.state.lastName.trim();var lastNameInputField=_this.lastNameInputFieldset;if(trimmedLastName!==\"\"){// If the last name entered is less than 26 characters\nif(trimmedLastName.length<=25){return true;}// If the last name entered is more than 25 characters\nelse{_this.registerErrorHandler(\"Last Name Must Not Be More Than 25 characters\");}}_this.notifyUserInputFieldIsNotValid(lastNameInputField);return false;};_this.checkIfPasswordIsValid=function(){var trimmedPassword=_this.state.password.trim();var passwordInputField=_this.passwordInputFieldset;if(trimmedPassword!==\"\"){// If the password is at least 6 characters long\nif(trimmedPassword.length>=6){// If the password is a maximum of 15 characters\nif(trimmedPassword.length<=15){return true;}else{_this.registerErrorHandler(\"The Password Must Be a Maximum of 15 Characters\");}}// If the password is not empty, but smaller than 6 characters\nelse{_this.registerErrorHandler(\"Password Must Be At Least 6 Characters Long\");}// Either way one of the valdiations failed, notify the user\n_this.notifyUserInputFieldIsNotValid(passwordInputField);return false;}// If the password is empty\n_this.notifyUserInputFieldIsNotValid(passwordInputField);return false;};_this.checkIfUserNameIsValid=function(){var trimmedUserName=_this.state.userName.trim();var usernameInputField=_this.usernameInputFieldset;if(trimmedUserName!==\"\"){// if the username entered is at least 3 characters long\nif(trimmedUserName.length>=3){// if the username entered is a maximum of 15 characters\nif(trimmedUserName.length<=15){return true;}else{_this.registerErrorHandler(\"Username Must Be a Maximum of 15 Characters\");}}else{_this.registerErrorHandler(\"Username Must Be At Least 3 Characters Long\");}}// Either way one of the valdiations failed, notify the user\n_this.notifyUserInputFieldIsNotValid(usernameInputField);return false;};_this.routingHandler=function(){// ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n_this.props.history.push('/vacations');};_this.disableRegisterButton=function(){var registerBtn=document.querySelector(\"#registerBtn\");registerBtn.disabled=true;registerBtn.style.cursor=\"not-allowed\";};_this.enableRegisterBtn=function(){var registerBtn=document.querySelector(\"#registerBtn\");registerBtn.disabled=false;registerBtn.style.cursor=\"pointer\";};_this.notifyUserInputFieldIsNotValid=function(inputField){inputField.style.border=\"2px solid red\";};_this.registerErrorHandler=function(errorMessage){// Letting the user know he received an error, by displaying the error message\n_this.userMessagesParagraph.textContent=errorMessage;};_this.resetInputFields=function(){_this.usernameInputFieldset.style.border=\"1px solid #00d1ff\";_this.passwordInputFieldset.style.border=\"1px solid #00d1ff\";_this.firstNameInputFieldset.style.border=\"1px solid #00d1ff\";_this.lastNameInputFieldset.style.border=\"1px solid #00d1ff\";_this.userMessagesParagraph.textContent=\"\";};_this.state={firstName:\"\",lastName:\"\",userName:\"\",password:\"\"};return _this;}// ------------------------------------------------- Component Settings ------------------------------------------------- //\n_createClass(RegisterPage,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"registerSectionContainer\"},/*#__PURE__*/React.createElement(TopBanner,null),/*#__PURE__*/React.createElement(\"div\",{className:\"registerSection\"},/*#__PURE__*/React.createElement(\"div\",{className:\"registerSquare\"},/*#__PURE__*/React.createElement(\"img\",{className:\"register-logo\",src:logo,alt:\"Explorer\"}),/*#__PURE__*/React.createElement(\"h2\",{className:\"sharp-text\"},\"Register\"),/*#__PURE__*/React.createElement(\"h3\",{className:\"sharp-text margin-bottom-2\"},\"To Explorer\"),/*#__PURE__*/React.createElement(\"div\",{className:\"inputFieldSection\"},/*#__PURE__*/React.createElement(\"fieldset\",{id:\"firstNameFieldset\",className:\"cerdinals-fieldset firstNameFieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"First Name\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updateFirstNameValue,type:\"text\",name:\"firstName\",id:\"firstNameField\"})),/*#__PURE__*/React.createElement(\"fieldset\",{id:\"lastNameFieldset\",className:\"cerdinals-fieldset lastNameFieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"Last Name\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updateLastNameValue,type:\"text\",name:\"lastName\",id:\"lastNameField\"})),/*#__PURE__*/React.createElement(\"fieldset\",{id:\"usernameFieldset\",className:\"cerdinals-fieldset usernameFieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"Username\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updateUserNameValue,type:\"text\",name:\"username\",id:\"usernameField\"})),/*#__PURE__*/React.createElement(\"fieldset\",{id:\"passwordFieldset\",className:\"cerdinals-fieldset passwordFieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"Password\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updatePasswordValue,type:\"password\",name:\"password\",id:\"passwordField\"})),/*#__PURE__*/React.createElement(\"button\",{id:\"registerBtn\",className:\"registerBtn\",onClick:this.onUserRegisterClick},\"Register\")),/*#__PURE__*/React.createElement(NavLink,{className:\"alreadyRegisteredLink sharp-text\",to:\"/login\"},\"I Already Have An Account\")),/*#__PURE__*/React.createElement(\"p\",{id:\"userMessagesParagraph\",className:\"userMessagesParagraph sharp-text\"})));}}]);return RegisterPage;}(Component);export{RegisterPage as default};","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/registerPage/RegisterPage.tsx"],"names":["React","Component","NavLink","UserRegisterDetails","successfulLoginHandler","TopBanner","axios","RegisterPage","props","firstNameInputFieldset","lastNameInputFieldset","usernameInputFieldset","passwordInputFieldset","userMessagesParagraph","componentDidMount","document","querySelector","onUserRegisterClick","resetInputFields","isRegistrationDataValid","checkIfRegistrationDataIsValid","disableRegisterButton","userRegisterDetails","state","firstName","lastName","userName","password","post","serverResponse","serverResponseData","data","enableRegisterBtn","routingHandler","errorMessage","response","error","registerErrorHandler","isFirstNameValid","checkIfFirstNameIsValid","isLastNameValid","checkIfLastNameIsValid","isPasswordValid","checkIfPasswordIsValid","isUserNameValid","checkIfUserNameIsValid","updateFirstNameValue","event","firstNameInputField","target","firstNameInputFieldValue","value","trimmedFirstNameInputField","trim","setState","updateLastNameValue","lastNameInputField","lastNameInputFieldValue","trimmedLastNameInputField","updateUserNameValue","userNameInputField","userNameInputFieldValue","trimmedUserNameInputField","updatePasswordValue","passwordInputField","passwordInputFieldValue","trimmedPasswordInputField","trimmedFirstName","length","notifyUserInputFieldIsNotValid","trimmedLastName","trimmedPassword","trimmedUserName","usernameInputField","history","push","registerBtn","disabled","style","cursor","inputField","border","textContent","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport axios from 'axios';\r\nimport './registerPage.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Registration Screen ------------------------------------------------- //\r\n\r\ninterface UserRegisterState {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class RegisterPage extends Component <any, UserRegisterState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private firstNameInputFieldset: HTMLFieldSetElement;\r\n    private lastNameInputFieldset: HTMLFieldSetElement;\r\n    private usernameInputFieldset: HTMLFieldSetElement;\r\n    private passwordInputFieldset: HTMLFieldSetElement;\r\n\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Defining global DOM elements\r\n        \r\n        this.firstNameInputFieldset = document.querySelector(\"#firstNameFieldset\") as HTMLFieldSetElement;\r\n        this.lastNameInputFieldset = document.querySelector(\"#lastNameFieldset\") as HTMLFieldSetElement;\r\n        this.usernameInputFieldset = document.querySelector(\"#usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputFieldset = document.querySelector(\"#passwordFieldset\") as HTMLFieldSetElement;\r\n\r\n        this.userMessagesParagraph = document.querySelector(\"#userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n    \r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n    \r\n    private onUserRegisterClick = async () => {\r\n\r\n        this.resetInputFields();\r\n        \r\n        const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\r\n\r\n        if (isRegistrationDataValid) {\r\n            \r\n            try {\r\n                this.disableRegisterButton();\r\n\r\n                let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n                \r\n                // Explanation ->\r\n                // I chose to make the user login automatically after a successful registration.\r\n                // So, in the server, after a successful insertion of user's info to the DB, it automatically sends the user\r\n                // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\r\n    \r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://34.65.28.6:3001/users/register', userRegisterDetails);\r\n    \r\n                // Getting the server response (after the 'login' function occurred on the server)\r\n                const serverResponseData = serverResponse.data;\r\n\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n    \r\n                this.enableRegisterBtn();\r\n\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.registerErrorHandler(errorMessage)\r\n                }\r\n\r\n                catch {\r\n                    this.registerErrorHandler(error);\r\n                }\r\n\r\n                finally {\r\n                    this.enableRegisterBtn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfRegistrationDataIsValid = () => {\r\n        \r\n        let isFirstNameValid = this.checkIfFirstNameIsValid();\r\n        let isLastNameValid = this.checkIfLastNameIsValid();\r\n        let isPasswordValid = this.checkIfPasswordIsValid();\r\n        let isUserNameValid = this.checkIfUserNameIsValid();\r\n\r\n        // If one of the input fields is not valid, return false\r\n\r\n        if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private updateFirstNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the first name value entered in the first name's input field\r\n\r\n        const firstNameInputField : HTMLInputElement = event.target;\r\n\r\n        const firstNameInputFieldValue : string =  firstNameInputField.value;\r\n        const trimmedFirstNameInputField : string = firstNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            firstName: trimmedFirstNameInputField\r\n        });\r\n    }\r\n\r\n    private updateLastNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the last name value entered in the last name's input field\r\n\r\n        const lastNameInputField : HTMLInputElement = event.target;\r\n\r\n        const lastNameInputFieldValue : string =  lastNameInputField.value;\r\n        const trimmedLastNameInputField : string = lastNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            lastName: trimmedLastNameInputField\r\n        });\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username value entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputField : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputField\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n        const trimmedPasswordInputField : string = passwordInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            password: trimmedPasswordInputField\r\n        });\r\n    }\r\n\r\n    private checkIfFirstNameIsValid = () => {\r\n\r\n        let trimmedFirstName = this.state.firstName.trim();\r\n        const firstNameInputField = this.firstNameInputFieldset;\r\n        \r\n        if (trimmedFirstName !== \"\") {\r\n\r\n            // If the first name entered is less than 26 characters\r\n            if (trimmedFirstName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"First Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(firstNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfLastNameIsValid = () => {\r\n\r\n        let trimmedLastName = this.state.lastName.trim();\r\n        const lastNameInputField = this.lastNameInputFieldset;\r\n\r\n        if (trimmedLastName !== \"\") {\r\n\r\n            // If the last name entered is less than 26 characters\r\n            if (trimmedLastName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"Last Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(lastNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfPasswordIsValid = () => {\r\n        \r\n        let trimmedPassword = this.state.password.trim();\r\n        let passwordInputField = this.passwordInputFieldset;\r\n\r\n        if (trimmedPassword!== \"\") {\r\n\r\n            // If the password is at least 6 characters long\r\n            if (trimmedPassword.length >= 6) {\r\n\r\n                // If the password is a maximum of 15 characters\r\n                if (trimmedPassword.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"The Password Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            // If the password is not empty, but smaller than 6 characters\r\n            else {\r\n                this.registerErrorHandler(\"Password Must Be At Least 6 Characters Long\");\r\n            }\r\n            \r\n            // Either way one of the valdiations failed, notify the user\r\n            this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n            return false;\r\n        }\r\n\r\n        // If the password is empty\r\n        this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfUserNameIsValid = () => {\r\n        \r\n        let trimmedUserName = this.state.userName.trim();\r\n        let usernameInputField = this.usernameInputFieldset;\r\n\r\n        if (trimmedUserName !== \"\") {\r\n\r\n            // if the username entered is at least 3 characters long\r\n            if (trimmedUserName.length >= 3) {\r\n\r\n                // if the username entered is a maximum of 15 characters\r\n                if (trimmedUserName.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"Username Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            else {\r\n                this.registerErrorHandler(\"Username Must Be At Least 3 Characters Long\");\r\n            }\r\n        }\r\n\r\n        // Either way one of the valdiations failed, notify the user\r\n        this.notifyUserInputFieldIsNotValid(usernameInputField);\r\n        return false;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableRegisterButton = () : void => {\r\n        const registerBtn = document.querySelector(\"#registerBtn\") as HTMLButtonElement;\r\n        registerBtn.disabled = true;\r\n        registerBtn.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableRegisterBtn = () : void => {\r\n        const registerBtn = document.querySelector(\"#registerBtn\") as HTMLButtonElement;\r\n        registerBtn.disabled = false;\r\n        registerBtn.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private notifyUserInputFieldIsNotValid = (inputField : HTMLFieldSetElement) => {\r\n\r\n        inputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private registerErrorHandler = (errorMessage : string) => {\r\n        \r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"registerSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"registerSection\">\r\n\r\n                    <div className=\"registerSquare\">\r\n                        <img className=\"register-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Register</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"firstNameFieldset\" className=\"cerdinals-fieldset firstNameFieldset\">\r\n                                <legend>First Name</legend>\r\n                                <input onChange={this.updateFirstNameValue} type=\"text\" name=\"firstName\" id=\"firstNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"lastNameFieldset\" className=\"cerdinals-fieldset lastNameFieldset\">\r\n                                <legend>Last Name</legend>\r\n                                <input onChange={this.updateLastNameValue} type=\"text\" name=\"lastName\" id=\"lastNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset usernameFieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset passwordFieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button id=\"registerBtn\" className=\"registerBtn\" onClick={this.onUserRegisterClick}>Register</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"alreadyRegisteredLink sharp-text\" to=\"/login\">I Already Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}