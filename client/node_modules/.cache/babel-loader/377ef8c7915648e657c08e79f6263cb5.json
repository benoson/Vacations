{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import axios from'axios';import{store}from'../../Redux/Store';import{ActionType}from'../../Redux/ActionType';import{withRouter}from'react-router';import{isUserLoggedValidator}from'../../models/IsUserLoggedValidator';import{interceptorHandler}from'../../models/InterceptorHandler';import FavoriteVacationComponent from'../vacationComponent/FavoriteVacationComponent';import{getUserTypeFromStorage}from'../../models/GetUserTypeFromStorage';import{getUserInfoFromServerCache}from'../../models/GetUserInfoFromServerCache';import socketIOClient from\"socket.io-client\";import'./favoriteVacations.css';// ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\nexport var FavoriteVacations=/*#__PURE__*/function(_Component){_inherits(FavoriteVacations,_Component);var _super=_createSuper(FavoriteVacations);function FavoriteVacations(props){var _this;_classCallCheck(this,FavoriteVacations);_this=_super.call(this,props);_this.unSubscribeStore=void 0;_this.userNameFromServerCache=void 0;_this.socket=void 0;_this.componentWillUnmount=function(){// Unsubscribing the store's listener right before the component will unmount\n// In order to make a small optimization\n_this.unSubscribeStore();try{// Disconnecting from the socket connection\n_this.socket.disconnect();}catch(_unused){}};_this.componentDidMount=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var isUserLogged,userInfoFromServerCache;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n// So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\n// and assign it to the interceptor\ninterceptorHandler();isUserLogged=isUserLoggedValidator();if(!isUserLogged){_context.next=8;break;}_context.next=5;return getUserInfoFromServerCache();case 5:userInfoFromServerCache=_context.sent;_this.userNameFromServerCache=userInfoFromServerCache.userName;// Initiating the Socket connection to the server\n_this.initiateSocket();case 8:// Optimizing a bit the memory leak of the store listener\n// Also subscribes automatically to the store\n_this.unSubscribeStore=store.subscribe(function(){return _this.setState({favoriteVacations:store.getState().favoriteVacations});});// Checks whether the user's favorite vacations exist in the Global Store\n_this.checkIfGlobalStoreHasFavoriteVacations();case 10:case\"end\":return _context.stop();}}},_callee);}));_this.getFavoriteVacationsFromServer=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var userTypeFromStorage,response,favoriteVacations,errorMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Explanation -> 2 layers validation:\n// Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\n// This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\n// If the validation fails in the server, the request will not retrieve any favorite vacations.\n// This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\nuserTypeFromStorage=getUserTypeFromStorage();if(!(userTypeFromStorage===\"USER\")){_context2.next=13;break;}_context2.prev=2;_context2.next=5;return axios.get('http://34.65.28.6:3001/vacations/favorite_vacations');case 5:response=_context2.sent;// Here we are receiving all the user's favorite vacations from the server, as a JSON\nfavoriteVacations=response.data;// Updating the Global Store\nstore.dispatch({type:ActionType.GetFavoriteVacations,payload:favoriteVacations});_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](2);try{errorMessage=_context2.t0.response.data.error;_this.favoriteVacationsErrorHandler(errorMessage);}catch(_unused2){_this.favoriteVacationsErrorHandler(_context2.t0);}case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,10]]);}));_this.removeClickedVacationFromFavorites=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(clickedVacationID){var isUserLogged,likeButtonsNodeList,likeButtonsArr,socketInfo,errorMessage;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:/*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again. -> Don't waste a server request on him.\r\n        */ // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\nisUserLogged=isUserLoggedValidator();if(!isUserLogged){_context3.next=22;break;}interceptorHandler();// Defining all 'like' buttons in order to disable them until the request is done\nlikeButtonsNodeList=document.getElementsByClassName(\"likeBtn\");likeButtonsArr=Array.from(likeButtonsNodeList);_context3.prev=5;_this.disableButtonsGroup(likeButtonsArr);// The response we get, should be type of 'Vacation' class\n_context3.next=9;return axios.post(\"http://34.65.28.6:3001/vacations/unfollow_vacation/\".concat(clickedVacationID));case 9:// Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\nsocketInfo={clickedVacationID:clickedVacationID,userName:_this.userNameFromServerCache};_this.socket.emit('decrease-vacation-followers-count',socketInfo);_context3.next=17;break;case 13:_context3.prev=13;_context3.t0=_context3[\"catch\"](5);errorMessage=_context3.t0.response.data.error;_this.favoriteVacationsErrorHandler(errorMessage);case 17:_context3.prev=17;_this.enableButtonsGroup(likeButtonsArr);return _context3.finish(17);case 20:_context3.next=23;break;case 22:_this.props.history.push('/login');case 23:case\"end\":return _context3.stop();}}},_callee3,null,[[5,13,17,20]]);}));return function(_x){return _ref3.apply(this,arguments);};}();_this.OnUserDislikeClick=function(clickedVacation){var clickedVacationID=clickedVacation.vacationID;_this.removeClickedVacationFromFavorites(clickedVacationID);};_this.checkIfGlobalStoreHasFavoriteVacations=function(){// If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\nvar favoriteVacationsInGlobalStore=store.getState().favoriteVacations;if(favoriteVacationsInGlobalStore.length===0){_this.getFavoriteVacationsFromServer();}// If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\nelse{_this.setState({favoriteVacations:favoriteVacationsInGlobalStore});}};_this.initiateSocket=function(){// Connecting to the server's Socket\nvar userTokenForSocketIdentification=JSON.parse(sessionStorage.getItem('userInfo')).token;_this.socket=socketIOClient('http://34.65.28.6:3002',{query:\"userToken=\"+userTokenForSocketIdentification});};_this.disableButton=function(button){button.disabled=true;button.style.cursor=\"not-allowed\";};_this.enableButton=function(button){button.disabled=false;button.style.cursor=\"pointer\";};_this.disableButtonsGroup=function(buttonsGroup){var _iterator=_createForOfIteratorHelper(buttonsGroup),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var button=_step.value;_this.disableButton(button);}}catch(err){_iterator.e(err);}finally{_iterator.f();}};_this.enableButtonsGroup=function(buttonsGroup){var _iterator2=_createForOfIteratorHelper(buttonsGroup),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var button=_step2.value;_this.enableButton(button);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}};_this.favoriteVacationsErrorHandler=function(errorMessage){// Letting the user know he received an error, by displaying the error as a Popup message\nvar snackbar=document.querySelector(\"#snackbar\");snackbar.className=\"show\";snackbar.textContent=errorMessage;setTimeout(function(){snackbar.className=snackbar.className.replace(\"show\",\"\");},3000);};_this.state={favoriteVacations:new Array()};return _this;}// ------------------------------------------------- Component Settings ------------------------------------------------- //\n_createClass(FavoriteVacations,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(\"div\",null,// --------- If the user has no favorite vacations --------- //\nthis.state.favoriteVacations.length>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"favoriteVacationsSection\"},/*#__PURE__*/React.createElement(\"div\",{className:\"headerContainer\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"sharp-text favoritesHeader\"},\"Your Favorite Vacations\")),/*#__PURE__*/React.createElement(\"div\",{className:\"favoriteVacations\"},this.state.favoriteVacations.map(function(vacation,index){return/*#__PURE__*/React.createElement(FavoriteVacationComponent,{key:index,vacation:vacation,OnUserDislikeClick:_this2.OnUserDislikeClick});}))),/*#__PURE__*/React.createElement(\"div\",{id:\"snackbar\"}));}}]);return FavoriteVacations;}(Component);export default withRouter(FavoriteVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","axios","store","ActionType","withRouter","isUserLoggedValidator","interceptorHandler","FavoriteVacationComponent","getUserTypeFromStorage","getUserInfoFromServerCache","socketIOClient","FavoriteVacations","props","unSubscribeStore","userNameFromServerCache","socket","componentWillUnmount","disconnect","componentDidMount","isUserLogged","userInfoFromServerCache","userName","initiateSocket","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","getFavoriteVacationsFromServer","userTypeFromStorage","get","response","data","dispatch","type","GetFavoriteVacations","payload","errorMessage","error","favoriteVacationsErrorHandler","removeClickedVacationFromFavorites","clickedVacationID","likeButtonsNodeList","document","getElementsByClassName","likeButtonsArr","Array","from","disableButtonsGroup","post","socketInfo","emit","enableButtonsGroup","history","push","OnUserDislikeClick","clickedVacation","vacationID","favoriteVacationsInGlobalStore","length","userTokenForSocketIdentification","JSON","parse","sessionStorage","getItem","token","query","disableButton","button","disabled","style","cursor","enableButton","buttonsGroup","snackbar","querySelector","className","textContent","setTimeout","replace","state","map","vacation","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport {withRouter} from 'react-router';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\r\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './favoriteVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n    private userNameFromServerCache: string;\r\n    private socket: any;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n    \r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small optimization\r\n        this.unSubscribeStore();\r\n\r\n        try {\r\n            // Disconnecting from the socket connection\r\n            this.socket.disconnect();\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        interceptorHandler();\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        if (isUserLogged) {\r\n            \r\n            const userInfoFromServerCache: {userType: string, userName: string} = await getUserInfoFromServerCache();\r\n            this.userNameFromServerCache = userInfoFromServerCache.userName;\r\n\r\n            // Initiating the Socket connection to the server\r\n            this.initiateSocket();\r\n        }\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the Global Store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        // Explanation -> 2 layers validation:\r\n        // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\r\n        // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\r\n        // If the validation fails in the server, the request will not retrieve any favorite vacations.\r\n        // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\r\n        \r\n        const userTypeFromStorage = getUserTypeFromStorage();\r\n\r\n        if (userTypeFromStorage === \"USER\") {\r\n\r\n            try {\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the user's favorite vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                // Updating the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.favoriteVacationsErrorHandler(errorMessage);\r\n                }\r\n                catch {\r\n                    this.favoriteVacationsErrorHandler(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again. -> Don't waste a server request on him.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            interceptorHandler();\r\n\r\n            // Defining all 'like' buttons in order to disable them until the request is done\r\n            const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n            const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n            try {\r\n\r\n                this.disableButtonsGroup(likeButtonsArr);\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post(`http://34.65.28.6:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n       \r\n                // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\r\n                const socketInfo = {\r\n                    clickedVacationID,\r\n                    userName: this.userNameFromServerCache\r\n                };\r\n\r\n                this.socket.emit('decrease-vacation-followers-count', socketInfo);\r\n            }\r\n    \r\n            catch (error) {\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            finally {\r\n                this.enableButtonsGroup(likeButtonsArr);\r\n            }\r\n        }\r\n\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n\r\n        const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\r\n\r\n        if (favoriteVacationsInGlobalStore.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: favoriteVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private initiateSocket = () => {\r\n\r\n        // Connecting to the server's Socket\r\n        const userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo')).token;\r\n        this.socket = socketIOClient('http://34.65.28.6:3002', { query: \"userToken=\" + userTokenForSocketIdentification});\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = true;\r\n        button.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = false;\r\n        button.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private disableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.disableButton(button)\r\n        }\r\n    }\r\n\r\n    private enableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.enableButton(button)\r\n        }\r\n    }\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error as a Popup message\r\n\r\n        let snackbar: HTMLDivElement = document.querySelector(\"#snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    // --------- If the user has no favorite vacations --------- //\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h2 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h2>\r\n                            </div>\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- All Vacations Cards, Using a Designated 'Favorite Vacation' Component ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <FavoriteVacationComponent key={index} vacation={vacation} OnUserDislikeClick={this.OnUserDislikeClick} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);"]},"metadata":{},"sourceType":"module"}