{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\favoriteVacations\\\\FavoriteVacations.tsx\";\nimport React, { Component } from 'react';\nimport fullHeart from '../../assets/likedIMG.png';\nimport axios from 'axios';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport './favoriteVacations.css';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nexport class FavoriteVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      this.handleInterceptor(); // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        favoriteVacations: store.getState().favoriteVacations\n      })); // Checks whether the user's favorite vacations exist in the global store\n\n      this.checkIfGlobalStoreHasFavoriteVacations();\n    };\n\n    this.checkIfGlobalStoreHasFavoriteVacations = () => {\n      // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\n      if (store.getState().favoriteVacations.length === 0) {\n        this.getFavoriteVacationsFromServer();\n      } // If we have the user's favorite vacations in the global store, fetch them instead of sending a request to the server\n      else {\n          this.setState({\n            favoriteVacations: store.getState().favoriteVacations\n          });\n        }\n    };\n\n    this.handleInterceptor = () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      // Checking if the interceptor is empty\n      if (axios.defaults.headers.common['Authorization'] === undefined) {\n        let userData = JSON.parse(sessionStorage.getItem(\"userInfo\")); // Checking if the user has a correct sessionStorage JSON\n\n        if (userData !== null) {\n          // Checking if the user has a token\n          if (userData.token !== undefined) {\n            let brearerToken = \"Bearer \" + userData.token;\n            axios.defaults.headers.common['Authorization'] = brearerToken;\n          }\n        }\n      }\n    };\n\n    this.OnUserDislikeClick = clickedVacation => {\n      let clickedVacationID = clickedVacation.Vacation_ID;\n      this.removeClickedVacationFromFavorites(clickedVacationID);\n    };\n\n    this.removeClickedVacationFromFavorites = async clickedVacationID => {\n      /*\r\n          Before the action, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the global store\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          await axios.post('http://localhost:3001/vacations/unfollow_vacation', {\n            clickedVacationID\n          }); // -------------------- Inserting the vacation to the global store for future use (acts like cache) -------------------- //\n\n          let favoriteVacations = store.getState().favoriteVacations; // Finding the clicked vacation in the global store, in order to remove it\n\n          let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n          let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore); // Updating the global store, in order to refresh the view without the unfollowed vacation\n\n          store.dispatch({\n            type: ActionType.UnfolloweVacation,\n            payload: indexOfClickedVacationInGlobalStore\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n        this.props.history.push('/login');\n      }\n    };\n\n    this.getFavoriteVacationsFromServer = async () => {\n      /*\r\n          Before the action, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the global store\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          const response = await axios.get('http://localhost:3001/vacations/favorite_vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n          const favoriteVacations = response.data;\n          store.dispatch({\n            type: ActionType.GetFavoriteVacations,\n            payload: favoriteVacations\n          });\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.favoriteVacationsErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.favoriteVacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.state = {\n      favoriteVacations: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, this.state.favoriteVacations.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text favoritesHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }, \"Your Favorite Vacations\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, this.state.favoriteVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardWithoutInfoSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.Image_URL,\n      alt: vacation.Vacation_Description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dislike\",\n      onClick: () => this.OnUserDislikeClick(vacation),\n      src: fullHeart,\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 53\n      }\n    }, vacation.Followers_Count)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 45\n      }\n    }, vacation.Vacation_Description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 49\n      }\n    }, vacation.Start_Date), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 49\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 49\n      }\n    }, vacation.End_Date)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 45\n      }\n    }, vacation.Vacation_Price, \" $\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(FavoriteVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","fullHeart","axios","store","ActionType","withRouter","isUserLoggedValidator","FavoriteVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","handleInterceptor","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","length","getFavoriteVacationsFromServer","defaults","headers","common","undefined","userData","JSON","parse","sessionStorage","getItem","token","brearerToken","OnUserDislikeClick","clickedVacation","clickedVacationID","Vacation_ID","removeClickedVacationFromFavorites","isUserLogged","post","clickedVacationInGlobalStore","find","favoriteVacation","indexOfClickedVacationInGlobalStore","indexOf","dispatch","type","UnfolloweVacation","payload","error","console","log","history","push","response","get","data","GetFavoriteVacations","errorMessage","favoriteVacationsErrorHandler","snackbar","document","getElementById","className","textContent","setTimeout","replace","state","Array","render","map","vacation","index","Image_URL","Vacation_Description","Followers_Count","Start_Date","End_Date","Vacation_Price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport poundingHeartAnimation from '../../assets/poundingHeart.svg';\r\nimport fullHeart from '../../assets/likedIMG.png';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport colorfulAstroid from '../../assets/wavyLine.png';\r\nimport noVacations from '../../assets/noVacations.png';\r\nimport {withRouter} from 'react-router';\r\nimport './favoriteVacations.css';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\n\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        this.handleInterceptor();\r\n\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the global store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n        if (store.getState().favoriteVacations.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the global store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleInterceptor = () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n\r\n        // Checking if the interceptor is empty\r\n        if (axios.defaults.headers.common['Authorization'] === undefined) {\r\n\r\n            let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n            // Checking if the user has a correct sessionStorage JSON\r\n            if (userData !== null) {\r\n\r\n                // Checking if the user has a token\r\n                if (userData.token !== undefined) {\r\n\r\n                    let brearerToken = \"Bearer \" + userData.token;\r\n                    axios.defaults.headers.common['Authorization'] = brearerToken;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.Vacation_ID;\r\n\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before the action, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post('http://localhost:3001/vacations/unfollow_vacation', {clickedVacationID});\r\n    \r\n    \r\n                // -------------------- Inserting the vacation to the global store for future use (acts like cache) -------------------- //\r\n    \r\n                let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n    \r\n                // Finding the clicked vacation in the global store, in order to remove it\r\n                let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n                let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n    \r\n    \r\n                // Updating the global store, in order to refresh the view without the unfollowed vacation\r\n                store.dispatch({\r\n                    type: ActionType.UnfolloweVacation,\r\n                    payload: indexOfClickedVacationInGlobalStore\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        else {\r\n            // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        /*\r\n            Before the action, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function(){ snackbar.className = snackbar.className.replace(\"show\", \"\"); }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"favoriteVacationsSection\">\r\n\r\n                {\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h1 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h1>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- Favorite Vacations Cards ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <div className=\"vacationCardContainer\" key={index}>\r\n\r\n                                        <div className=\"vacationCardWithoutInfoSection\">\r\n                                            <img className=\"vacationCardImg\" src={vacation.Image_URL} alt={vacation.Vacation_Description}/>\r\n                                \r\n                                            <div className=\"vacationCard\">\r\n                                                <div className=\"topVacationCardSection\">\r\n                                                    <img className=\"dislike\" onClick={ () => this.OnUserDislikeClick(vacation)} src={fullHeart} alt=\"Like Button\"/>\r\n                                                    <p className=\"followersText\">{vacation.Followers_Count}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"vacationInfoCard\">\r\n                                            <h4 className=\"resortName\">{vacation.Vacation_Description}</h4>\r\n                                \r\n                                            <div className=\"vacationDates\">\r\n                                                <h4 className=\"vacationDate\">{vacation.Start_Date}</h4>\r\n                                                <span> - </span>\r\n                                                <h4 className=\"vacationDate\">{vacation.End_Date}</h4>\r\n                                            </div>\r\n                                \r\n                                            <h4 className=\"vacationPrice\">{vacation.Vacation_Price} $</h4>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);"]},"metadata":{},"sourceType":"module"}