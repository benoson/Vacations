{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\vacations\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport LocationImage from '../../assets/locationImage.png';\nimport emptyHeart from '../../assets/likeImg.png';\nimport fullHeart from '../../assets/likedIMG.png';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport colorfulAstroid from '../../assets/wavyLine.png';\nimport { withRouter } from 'react-router';\nimport './allVacations.css';\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n\n      if (store.getState().allVacations.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: store.getState().allVacations\n        });\n      }\n    };\n\n    this.checkIfUserIsLogged = () => {\n      let userData = JSON.parse(sessionStorage.getItem(\"userInfo\")); // Checking if the user has a correct sessionStorage JSON\n\n      if (userData !== null) {\n        // Checking if the user has a token\n        if (userData.token !== undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.validateVacationIsNotAlreadyLikedByTheUser = clickedVacation => {\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.Vacation_ID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations/all_vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data;\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        // alert(error.message);\n        console.log(error);\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      try {\n        let clickedVacationID = clickedVacation.Vacation_ID;\n        await axios.post('http://localhost:3001/vacations/follow_vacation', {\n          clickedVacationID\n        }); // Update The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      // Checking if the user is logged based on the global store\n      const isUserLogged = this.checkIfUserIsLogged(); // checking if the user hasn't liked this vacation already\n\n      const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation); // If the user is currently logged in (If the current person is not a guest)\n\n      if (isUserLogged) {\n        // If the vacation selected is not already liked by the user\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        }\n      } else {\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n        this.props.history.push('/login');\n      }\n    };\n\n    this.checkIfVacationIsFollowed = vacation => {\n      // Inserting the vacation to the global store for future use (acts like cache)\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationID = vacation.Vacation_ID; // Finding the clicked vacation in the global store, in order to remove it\n\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\", /*#__PURE__*/React.createElement(\"img\", {\n      className: \"locationImage\",\n      src: LocationImage,\n      alt: \"All Vacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"colorfulAstroidImg\",\n      src: colorfulAstroid,\n      alt: \"Colorful Astroid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.Image_URL,\n      alt: vacation.Vacation_Description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }, this.checkIfVacationIsFollowed(vacation) ? /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon\",\n      src: fullHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon\",\n      src: emptyHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 37\n      }\n    }, vacation.Followers_Count)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 37\n      }\n    }, vacation.Vacation_Description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 41\n      }\n    }, vacation.Start_Date), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 41\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 41\n      }\n    }, vacation.End_Date)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 37\n      }\n    }, vacation.Vacation_Price, \" $\")))))));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/vacations/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","LocationImage","emptyHeart","fullHeart","store","axios","ActionType","colorfulAstroid","withRouter","AllVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","allVacations","getState","length","getAllVacationsFromServer","checkIfUserIsLogged","userData","JSON","parse","sessionStorage","getItem","token","undefined","validateVacationIsNotAlreadyLikedByTheUser","clickedVacation","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationID","Vacation_ID","clickedVacationInGlobalStore","find","favoriteVacation","response","get","data","dispatch","type","GetAllVacations","payload","error","console","log","followVacation","post","SetFollowedVacation","onVacationFollowAttempt","isUserLogged","vacationIsNotAlreadyLikedByTheUser","history","push","checkIfVacationIsFollowed","vacation","state","Array","render","map","index","Image_URL","Vacation_Description","Followers_Count","Start_Date","End_Date","Vacation_Price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport LocationImage from '../../assets/locationImage.png';\r\nimport Vacation from '../../models/Vacation';\r\nimport emptyHeart from '../../assets/likeImg.png';\r\nimport fullHeart from '../../assets/likedIMG.png';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport colorfulAstroid from '../../assets/wavyLine.png';\r\nimport {withRouter} from 'react-router';\r\nimport './allVacations.css';\r\n\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        if (store.getState().allVacations.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private checkIfUserIsLogged = () => {\r\n\r\n        let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n        // Checking if the user has a correct sessionStorage JSON\r\n        if (userData !== null) {\r\n\r\n            // Checking if the user has a token\r\n            if (userData.token !== undefined) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private validateVacationIsNotAlreadyLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.Vacation_ID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find( favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/all_vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n            // alert(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n        try {\r\n\r\n            let clickedVacationID : number = clickedVacation.Vacation_ID;\r\n            await axios.post('http://localhost:3001/vacations/follow_vacation', {clickedVacationID});\r\n\r\n            // Update The Global Store\r\n\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = this.checkIfUserIsLogged();\r\n\r\n        // checking if the user hasn't liked this vacation already\r\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation);\r\n\r\n        // If the user is currently logged in (If the current person is not a guest)\r\n        if (isUserLogged) {\r\n\r\n            // If the vacation selected is not already liked by the user\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n\r\n                this.followVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        else {\r\n\r\n            // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private checkIfVacationIsFollowed = (vacation : Vacation) => {\r\n\r\n        // Inserting the vacation to the global store for future use (acts like cache)\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n        let clickedVacationID = vacation.Vacation_ID;\r\n\r\n        // Finding the clicked vacation in the global store, in order to remove it\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                <div className=\"headerContainer\">\r\n                    <h3 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You\r\n                        <img className=\"locationImage\" src={LocationImage} alt=\"All Vacations\"/>\r\n                    </h3>\r\n\r\n                    <img className=\"colorfulAstroidImg\" src={colorfulAstroid} alt=\"Colorful Astroid\"/>\r\n                </div>\r\n            \r\n\r\n                <div className=\"allVacations\">\r\n\r\n                    {/* ---------- All Vacations Cards ---------- */}\r\n\r\n                    {this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                        <div className=\"vacationCardContainer\" key={index}>\r\n                            <img className=\"vacationCardImg\" src={vacation.Image_URL} alt={vacation.Vacation_Description}/>\r\n\r\n                            <div className=\"vacationCard\">\r\n                                \r\n                                <div className=\"topVacationCardSection\">\r\n                                    {this.checkIfVacationIsFollowed(vacation) ?\r\n                                        <img className=\"heartIcon\" src={fullHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                    :\r\n                                        <img className=\"heartIcon\" src={emptyHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                    }\r\n                                    <p className=\"followersText\">{vacation.Followers_Count}</p>\r\n                                </div>\r\n\r\n                                <div className=\"vacationInfoCard\">\r\n                                    <h4 className=\"resortName\">{vacation.Vacation_Description}</h4>\r\n\r\n                                    <div className=\"vacationDates\">\r\n                                        <h4 className=\"vacationDate\">{vacation.Start_Date}</h4>\r\n                                        <span> - </span>\r\n                                        <h4 className=\"vacationDate\">{vacation.End_Date}</h4>\r\n                                    </div>\r\n\r\n                                    <h4 className=\"vacationPrice\">{vacation.Vacation_Price} $</h4>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}