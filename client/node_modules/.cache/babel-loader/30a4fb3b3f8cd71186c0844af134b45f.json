{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\favoriteVacations\\\\FavoriteVacations.tsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\nimport socketIOClient from \"socket.io-client\";\nimport './favoriteVacations.css'; // ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\n\nexport class FavoriteVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n    this.userNameFromServerCache = void 0;\n    this.socket = void 0;\n    this.userTokenForSocketIdentification = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small optimization\n      this.unSubscribeStore();\n\n      try {\n        // Disconnecting from the socket connection\n        this.socket.disconnect();\n      } catch {}\n    };\n\n    this.componentDidMount = async () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      interceptorHandler();\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        const userInfoFromServerCache = await getUserInfoFromServerCache();\n        this.userNameFromServerCache = userInfoFromServerCache.userName;\n        const userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo'));\n        this.userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo')); // Initiating the Socket connection to the server\n\n        this.initiateSocket();\n      } // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        favoriteVacations: store.getState().favoriteVacations\n      })); // Checks whether the user's favorite vacations exist in the Global Store\n\n      this.checkIfGlobalStoreHasFavoriteVacations();\n    };\n\n    this.getFavoriteVacationsFromServer = async () => {\n      // Explanation -> 2 layers validation:\n      // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\n      // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\n      // If the validation fails in the server, the request will not retrieve any favorite vacations.\n      // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\n      const userTypeFromStorage = getUserTypeFromStorage();\n\n      if (userTypeFromStorage === \"USER\") {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          const response = await axios.get('http://localhost:3001/vacations/favorite_vacations'); // Here we are receiving all the user's favorite vacations from the server, as a JSON\n\n          const favoriteVacations = response.data; // Updating the Global Store\n\n          store.dispatch({\n            type: ActionType.GetFavoriteVacations,\n            payload: favoriteVacations\n          });\n        } catch (error) {\n          try {\n            let errorMessage = error.response.data.error;\n            this.favoriteVacationsErrorHandler(errorMessage);\n          } catch {\n            this.favoriteVacationsErrorHandler(error);\n          }\n        }\n      }\n    };\n\n    this.removeClickedVacationFromFavorites = async clickedVacationID => {\n      /*\r\n          Before unfollowing a vacation, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to unfollow a vacation. In that case, throw him out to login again. -> Don't waste a server request on him.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        interceptorHandler(); // Defining all 'like' buttons in order to disable them until the request is done\n\n        const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\n        const likeButtonsArr = Array.from(likeButtonsNodeList);\n\n        try {\n          this.disableButtonsGroup(likeButtonsArr); // The response we get, should be type of 'Vacation' class\n\n          await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`); // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\n\n          const socketInfo = {\n            clickedVacationID,\n            userName: this.userNameFromServerCache\n          };\n          this.socket.emit('decrease-vacation-followers-count', socketInfo);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.favoriteVacationsErrorHandler(errorMessage);\n        } finally {\n          this.enableButtonsGroup(likeButtonsArr);\n        }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.OnUserDislikeClick = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      this.removeClickedVacationFromFavorites(clickedVacationID);\n    };\n\n    this.checkIfGlobalStoreHasFavoriteVacations = () => {\n      // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\n      const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\n\n      if (favoriteVacationsInGlobalStore.length === 0) {\n        this.getFavoriteVacationsFromServer();\n      } // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\n      else {\n          this.setState({\n            favoriteVacations: favoriteVacationsInGlobalStore\n          });\n        }\n    };\n\n    this.initiateSocket = () => {\n      // Connecting to the server's Socket\n      this.socket = socketIOClient('http://localhost:3002', {\n        query: \"userToken=\" + this.userTokenForSocketIdentification\n      });\n    };\n\n    this.disableButton = button => {\n      button.disabled = true;\n      button.style.cursor = \"not-allowed\";\n    };\n\n    this.enableButton = button => {\n      button.disabled = false;\n      button.style.cursor = \"pointer\";\n    };\n\n    this.disableButtonsGroup = buttonsGroup => {\n      for (let button of buttonsGroup) {\n        this.disableButton(button);\n      }\n    };\n\n    this.enableButtonsGroup = buttonsGroup => {\n      for (let button of buttonsGroup) {\n        this.enableButton(button);\n      }\n    };\n\n    this.favoriteVacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying the error as a Popup message\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.state = {\n      favoriteVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }\n    }, // --------- If the user has no favorite vacations --------- //\n    this.state.favoriteVacations.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text favoritesHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 33\n      }\n    }, \"Your Favorite Vacations\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 29\n      }\n    }, this.state.favoriteVacations.map((vacation, index) => /*#__PURE__*/React.createElement(FavoriteVacationComponent, {\n      key: index,\n      vacation: vacation,\n      OnUserDislikeClick: this.OnUserDislikeClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(FavoriteVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","axios","store","ActionType","withRouter","isUserLoggedValidator","interceptorHandler","FavoriteVacationComponent","getUserTypeFromStorage","getUserInfoFromServerCache","socketIOClient","FavoriteVacations","constructor","props","unSubscribeStore","userNameFromServerCache","socket","userTokenForSocketIdentification","componentWillUnmount","disconnect","componentDidMount","isUserLogged","userInfoFromServerCache","userName","JSON","parse","sessionStorage","getItem","initiateSocket","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","getFavoriteVacationsFromServer","userTypeFromStorage","response","get","data","dispatch","type","GetFavoriteVacations","payload","error","errorMessage","favoriteVacationsErrorHandler","removeClickedVacationFromFavorites","clickedVacationID","likeButtonsNodeList","document","getElementsByClassName","likeButtonsArr","Array","from","disableButtonsGroup","post","socketInfo","emit","enableButtonsGroup","history","push","OnUserDislikeClick","clickedVacation","vacationID","favoriteVacationsInGlobalStore","length","query","disableButton","button","disabled","style","cursor","enableButton","buttonsGroup","snackbar","getElementById","className","textContent","setTimeout","replace","state","render","map","vacation","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport {withRouter} from 'react-router';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\r\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './favoriteVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n    private userNameFromServerCache: string;\r\n    private socket: any;\r\n    private userTokenForSocketIdentification: number;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n    \r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small optimization\r\n        this.unSubscribeStore();\r\n\r\n        try {\r\n            // Disconnecting from the socket connection\r\n            this.socket.disconnect();\r\n        }\r\n        catch {}\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        interceptorHandler();\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        if (isUserLogged) {\r\n            \r\n            const userInfoFromServerCache: {userType: string, userName: string} = await getUserInfoFromServerCache();\r\n            this.userNameFromServerCache = userInfoFromServerCache.userName;\r\n\r\n        const userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo'));\r\n            this.userTokenForSocketIdentification = JSON.parse(sessionStorage.getItem('userInfo'));\r\n\r\n            // Initiating the Socket connection to the server\r\n            this.initiateSocket();\r\n        }\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the Global Store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        // Explanation -> 2 layers validation:\r\n        // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\r\n        // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\r\n        // If the validation fails in the server, the request will not retrieve any favorite vacations.\r\n        // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\r\n        \r\n        const userTypeFromStorage = getUserTypeFromStorage();\r\n\r\n        if (userTypeFromStorage === \"USER\") {\r\n\r\n            try {\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the user's favorite vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                // Updating the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.favoriteVacationsErrorHandler(errorMessage);\r\n                }\r\n                catch {\r\n                    this.favoriteVacationsErrorHandler(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again. -> Don't waste a server request on him.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            interceptorHandler();\r\n\r\n            // Defining all 'like' buttons in order to disable them until the request is done\r\n            const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n            const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n            try {\r\n\r\n                this.disableButtonsGroup(likeButtonsArr);\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n       \r\n                // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\r\n                const socketInfo = {\r\n                    clickedVacationID,\r\n                    userName: this.userNameFromServerCache\r\n                };\r\n\r\n                this.socket.emit('decrease-vacation-followers-count', socketInfo);\r\n            }\r\n    \r\n            catch (error) {\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            finally {\r\n                this.enableButtonsGroup(likeButtonsArr);\r\n            }\r\n        }\r\n\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n\r\n        const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\r\n\r\n        if (favoriteVacationsInGlobalStore.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: favoriteVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private initiateSocket = () => {\r\n\r\n        // Connecting to the server's Socket\r\n        this.socket = socketIOClient('http://localhost:3002', { query: \"userToken=\" + this.userTokenForSocketIdentification });\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = true;\r\n        button.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = false;\r\n        button.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private disableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.disableButton(button)\r\n        }\r\n    }\r\n\r\n    private enableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.enableButton(button)\r\n        }\r\n    }\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error as a Popup message\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    // --------- If the user has no favorite vacations --------- //\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h2 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h2>\r\n                            </div>\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- All Vacations Cards, Using a Designated 'Favorite Vacation' Component ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <FavoriteVacationComponent key={index} vacation={vacation} OnUserDislikeClick={this.OnUserDislikeClick} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);"]},"metadata":{},"sourceType":"module"}