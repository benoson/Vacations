{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\loginPage\\\\LoginPage.tsx\";\nimport React, { Component } from 'react';\nimport logo from \"../../assets/astronautSVG.svg\";\nimport UserLoginDetails from '../../models/UserLoginDetails';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport './loginPage.css';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nexport default class LoginPage extends Component {\n  // Defining the global DOM elemends\n  constructor(props) {\n    super(props); // initializing the state with empty values\n\n    this.usernameInputField = void 0;\n    this.passwordInputField = void 0;\n    this.userMessagesParagraph = void 0;\n\n    this.componentDidMount = () => {\n      // Retrieving all vacations from the DB before the user even logs in, in order to load\n      // the data behind the scenes, while the user is bussy logging\n      this.getAllVacationsFromServer(); // Assigning the global elements inside the DOM\n\n      this.usernameInputField = document.getElementById(\"usernameFieldset\");\n      this.passwordInputField = document.getElementById(\"passwordFieldset\");\n      this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\");\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data;\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the username entered in the username's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputFieldValue\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      this.setState({\n        password: passwordInputFieldValue\n      });\n    };\n\n    this.checkIfUsernameIsEmpty = () => {\n      let userNameInputField = document.getElementById(\"usernameField\");\n      let userNameInputFieldValue = userNameInputField.value;\n      let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n\n      if (trimmedUserNameInputFieldValue === \"\") {\n        this.notifyUserAboutInvalidUserName();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkIfPasswordIsEmpty = () => {\n      let passwordInputField = document.getElementById(\"passwordField\");\n      let passwordInputFieldValue = passwordInputField.value;\n      let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\n\n      if (trimmedUserNameInputFieldValue === \"\") {\n        this.notifyUserAboutInvalidPassword();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.notifyUserAboutInvalidUserName = () => {\n      this.usernameInputField.style.border = \"2px solid red\";\n    };\n\n    this.notifyUserAboutInvalidPassword = () => {\n      this.passwordInputField.style.border = \"2px solid red\";\n    };\n\n    this.onIncorrectCredentials = () => {\n      this.userMessagesParagraph.textContent = \"Username Or Password Are Incorrect. Please Try Again\";\n    };\n\n    this.resetInputFields = () => {\n      this.usernameInputField.style.border = \"1px solid #00d1ff\";\n      this.passwordInputField.style.border = \"1px solid #00d1ff\";\n      this.userMessagesParagraph.textContent = \"\";\n    };\n\n    this.login = async () => {\n      this.resetInputFields();\n      let userNameIsNotEmpty = this.checkIfUsernameIsEmpty();\n      let passwordIsNotEmpty = this.checkIfPasswordIsEmpty();\n\n      if (userNameIsNotEmpty && passwordIsNotEmpty) {\n        try {\n          let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password); // The response we get, should be type of 'SuccessfulLoginServerResponse' class (token & user type)\n\n          const response = await axios.post('http://localhost:3001/users/login', userLoginDetails); // Here we are receiving the token & user type from the data we got back from the server\n\n          const serverResponseData = response.data; // Attaching the Token we received from the server, to every HTTP request we'll send from now on\n          // This is our 'Interceptor'\n\n          let brearerToken = \"Bearer \" + serverResponseData.token;\n          axios.defaults.headers.common['Authorization'] = brearerToken; // A Function that handles the URL and SessionStorage based on the data received from the server\n\n          this.handleUserInfoFromServer(serverResponseData);\n        } catch (error) {\n          console.log(error.status);\n          this.onIncorrectCredentials();\n        }\n      }\n    };\n\n    this.handleUserInfoFromServer = serverResponseData => {\n      // ---------- Inserting the user's info (Token & Type) to the sessionStorage ---------- //\n      let strUserInfo = JSON.stringify(serverResponseData);\n      sessionStorage.setItem('userInfo', strUserInfo); // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n\n      if (serverResponseData.userType === \"ADMIN\") {\n        this.props.history.push('/home');\n      } else if (serverResponseData.userType === \"USER\") {\n        this.props.history.push('/user');\n      }\n    };\n\n    this.state = {\n      userName: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"login-logo\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }, \"To Continue To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"usernameFieldset\",\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 29\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"passwordFieldset\",\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"loginBtn\",\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"notRegisteredLink sharp-text\",\n      to: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }, \"I'm Not Registered\")), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"userMessagesParagraph\",\n      className: \"userMessagesParagraph sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/loginPage/LoginPage.tsx"],"names":["React","Component","UserLoginDetails","NavLink","axios","store","ActionType","LoginPage","constructor","props","usernameInputField","passwordInputField","userMessagesParagraph","componentDidMount","getAllVacationsFromServer","document","getElementById","response","get","allVacations","data","dispatch","type","GetAllVacations","payload","error","console","log","updateUserNameValue","event","userNameInputField","target","userNameInputFieldValue","value","trimmedUserNameInputFieldValue","trim","setState","userName","updatePasswordValue","passwordInputFieldValue","password","checkIfUsernameIsEmpty","notifyUserAboutInvalidUserName","checkIfPasswordIsEmpty","notifyUserAboutInvalidPassword","style","border","onIncorrectCredentials","textContent","resetInputFields","login","userNameIsNotEmpty","passwordIsNotEmpty","userLoginDetails","state","post","serverResponseData","brearerToken","token","defaults","headers","common","handleUserInfoFromServer","status","strUserInfo","JSON","stringify","sessionStorage","setItem","userType","history","push","render","logo"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,SAA7B,QAA8C,OAA9C;;AAEA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAQA,eAAe,MAAMC,SAAN,SAAwBN,SAAxB,CAAoD;AAE/D;AAKOO,EAAAA,WAAP,CAAoBC,KAApB,EAAgC;AAC5B,UAAMA,KAAN,EAD4B,CAG5B;;AAH4B,SAJxBC,kBAIwB;AAAA,SAHxBC,kBAGwB;AAAA,SAFxBC,qBAEwB;;AAAA,SAUhCC,iBAVgC,GAUZ,MAAM;AAEtB;AACA;AACA,WAAKC,yBAAL,GAJsB,CAMtB;;AACA,WAAKJ,kBAAL,GAA0BK,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAA1B;AACA,WAAKL,kBAAL,GAA0BI,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAA1B;AAEA,WAAKJ,qBAAL,GAA6BG,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA7B;AACH,KArB+B;;AAAA,SAwBxBF,yBAxBwB,GAwBI,YAAY;AAE5C,UAAI;AACA;AACA,cAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAsB,iCAAtB,CAAvB,CAFA,CAIA;;AACA,cAAMC,YAAyB,GAAGF,QAAQ,CAACG,IAA3C;AAEAf,QAAAA,KAAK,CAACgB,QAAN,CAAe;AACXC,UAAAA,IAAI,EAAEhB,UAAU,CAACiB,eADN;AAEXC,UAAAA,OAAO,EAAEL;AAFE,SAAf;AAIH,OAXD,CAaA,OAAOM,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KA1C+B;;AAAA,SA4CxBG,mBA5CwB,GA4CDC,KAAD,IAA4C;AAEtE;AACA,YAAMC,kBAAqC,GAAGD,KAAK,CAACE,MAApD;AACA,YAAMC,uBAAgC,GAAIF,kBAAkB,CAACG,KAA7D;AACA,YAAMC,8BAAuC,GAAGF,uBAAuB,CAACG,IAAxB,EAAhD;AAEA,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEH;AADA,OAAd;AAGH,KAtD+B;;AAAA,SAwDxBI,mBAxDwB,GAwDDT,KAAD,IAA4C;AAEtE;AACA,YAAMlB,kBAAqC,GAAGkB,KAAK,CAACE,MAApD;AACA,YAAMQ,uBAAgC,GAAI5B,kBAAkB,CAACsB,KAA7D;AAEA,WAAKG,QAAL,CAAc;AACVI,QAAAA,QAAQ,EAAED;AADA,OAAd;AAGH,KAjE+B;;AAAA,SAmExBE,sBAnEwB,GAmEC,MAAM;AAEnC,UAAIX,kBAAoC,GAAGf,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAA3C;AACA,UAAIgB,uBAAuB,GAAGF,kBAAkB,CAACG,KAAjD;AACA,UAAIC,8BAA8B,GAAGF,uBAAuB,CAACG,IAAxB,EAArC;;AAEA,UAAID,8BAA8B,KAAK,EAAvC,EAA2C;AACvC,aAAKQ,8BAAL;AACA,eAAO,KAAP;AACH;;AAED,aAAO,IAAP;AACH,KA/E+B;;AAAA,SAiFxBC,sBAjFwB,GAiFC,MAAM;AAEnC,UAAIhC,kBAAoC,GAAGI,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAA3C;AACA,UAAIuB,uBAAuB,GAAG5B,kBAAkB,CAACsB,KAAjD;AACA,UAAIC,8BAA8B,GAAGK,uBAAuB,CAACJ,IAAxB,EAArC;;AAEA,UAAID,8BAA8B,KAAK,EAAvC,EAA2C;AACvC,aAAKU,8BAAL;AACA,eAAO,KAAP;AACH;;AAED,aAAO,IAAP;AACH,KA7F+B;;AAAA,SA+FxBF,8BA/FwB,GA+FS,MAAM;AAC3C,WAAKhC,kBAAL,CAAwBmC,KAAxB,CAA8BC,MAA9B,GAAuC,eAAvC;AACH,KAjG+B;;AAAA,SAmGxBF,8BAnGwB,GAmGS,MAAM;AAC3C,WAAKjC,kBAAL,CAAwBkC,KAAxB,CAA8BC,MAA9B,GAAuC,eAAvC;AACH,KArG+B;;AAAA,SAuGxBC,sBAvGwB,GAuGC,MAAM;AAEnC,WAAKnC,qBAAL,CAA2BoC,WAA3B,GAAyC,sDAAzC;AACH,KA1G+B;;AAAA,SA4GxBC,gBA5GwB,GA4GL,MAAM;AAE7B,WAAKvC,kBAAL,CAAwBmC,KAAxB,CAA8BC,MAA9B,GAAuC,mBAAvC;AACA,WAAKnC,kBAAL,CAAwBkC,KAAxB,CAA8BC,MAA9B,GAAuC,mBAAvC;AAEA,WAAKlC,qBAAL,CAA2BoC,WAA3B,GAAyC,EAAzC;AACH,KAlH+B;;AAAA,SAoHxBE,KApHwB,GAoHhB,YAAY;AAExB,WAAKD,gBAAL;AAEA,UAAIE,kBAAkB,GAAG,KAAKV,sBAAL,EAAzB;AACA,UAAIW,kBAAkB,GAAG,KAAKT,sBAAL,EAAzB;;AAEA,UAAIQ,kBAAkB,IAAIC,kBAA1B,EAA8C;AAE1C,YAAI;AACA,cAAIC,gBAAgB,GAAG,IAAInD,gBAAJ,CAAqB,KAAKoD,KAAL,CAAWjB,QAAhC,EAA0C,KAAKiB,KAAL,CAAWd,QAArD,CAAvB,CADA,CAGA;;AACA,gBAAMvB,QAAQ,GAAG,MAAMb,KAAK,CAACmD,IAAN,CAA0C,mCAA1C,EAA+EF,gBAA/E,CAAvB,CAJA,CAMA;;AACA,gBAAMG,kBAAkB,GAAGvC,QAAQ,CAACG,IAApC,CAPA,CASA;AACA;;AACA,cAAIqC,YAAY,GAAG,YAAYD,kBAAkB,CAACE,KAAlD;AACAtD,UAAAA,KAAK,CAACuD,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDJ,YAAjD,CAZA,CAcA;;AACA,eAAKK,wBAAL,CAA8BN,kBAA9B;AACH,SAhBD,CAkBA,OAAO/B,KAAP,EAAc;AAEVC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACsC,MAAlB;AAEA,eAAKhB,sBAAL;AACH;AACJ;AACJ,KAtJ+B;;AAAA,SAwJxBe,wBAxJwB,GAwJIN,kBAAD,IAAwD;AAEvF;AAEA,UAAIQ,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeV,kBAAf,CAAlB;AACAW,MAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCJ,WAAnC,EALuF,CAQvF;;AAEA,UAAIR,kBAAkB,CAACa,QAAnB,KAAgC,OAApC,EAA6C;AACzC,aAAK5D,KAAL,CAAW6D,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACH,OAFD,MAIK,IAAIf,kBAAkB,CAACa,QAAnB,KAAgC,MAApC,EAA4C;AAC7C,aAAK5D,KAAL,CAAW6D,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACH;AACJ,KAzK+B;;AAI5B,SAAKjB,KAAL,GAAa;AACRjB,MAAAA,QAAQ,EAAE,EADF;AAERG,MAAAA,QAAQ,EAAE;AAFF,KAAb;AAIH;;AAqKDgC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,GAAG,EAAEC,IAAjC;AAAuC,MAAA,GAAG,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,eAII;AAAI,MAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJJ,eAOI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAU,MAAA,EAAE,EAAC,kBAAb;AAAgC,MAAA,SAAS,EAAC,oBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,MAAA,QAAQ,EAAE,KAAK7C,mBAAtB;AAA2C,MAAA,IAAI,EAAC,MAAhD;AAAuD,MAAA,IAAI,EAAC,UAA5D;AAAuE,MAAA,EAAE,EAAC,eAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAMI;AAAU,MAAA,EAAE,EAAC,kBAAb;AAAgC,MAAA,SAAS,EAAC,oBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,MAAA,QAAQ,EAAE,KAAKU,mBAAtB;AAA2C,MAAA,IAAI,EAAC,UAAhD;AAA2D,MAAA,IAAI,EAAC,UAAhE;AAA2E,MAAA,EAAE,EAAC,eAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CANJ,eAWI;AAAQ,MAAA,SAAS,EAAC,UAAlB;AAA6B,MAAA,OAAO,EAAE,KAAKY,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXJ,CAPJ,eAqBI,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,8BAAnB;AAAkD,MAAA,EAAE,EAAC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BArBJ,CAFJ,eA0BI;AAAG,MAAA,EAAE,EAAC,uBAAN;AAA8B,MAAA,SAAS,EAAC,kCAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BJ,CADJ;AA8BH;;AAnN8D","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\n\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private usernameInputField: HTMLFieldSetElement;\r\n    private passwordInputField: HTMLFieldSetElement;\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n\r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Retrieving all vacations from the DB before the user even logs in, in order to load\r\n        // the data behind the scenes, while the user is bussy logging\r\n        this.getAllVacationsFromServer();\r\n\r\n        // Assigning the global elements inside the DOM\r\n        this.usernameInputField = document.getElementById(\"usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputField = document.getElementById(\"passwordFieldset\") as HTMLFieldSetElement;\r\n\r\n        this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n    private checkIfUsernameIsEmpty = () => {\r\n\r\n        let userNameInputField: HTMLInputElement = document.getElementById(\"usernameField\") as HTMLInputElement;\r\n        let userNameInputFieldValue = userNameInputField.value;\r\n        let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidUserName();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfPasswordIsEmpty = () => {\r\n\r\n        let passwordInputField: HTMLInputElement = document.getElementById(\"passwordField\") as HTMLInputElement;\r\n        let passwordInputFieldValue = passwordInputField.value;\r\n        let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidPassword();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private notifyUserAboutInvalidUserName = () => {\r\n        this.usernameInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidPassword = () => {\r\n        this.passwordInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private onIncorrectCredentials = () => {\r\n\r\n        this.userMessagesParagraph.textContent = \"Username Or Password Are Incorrect. Please Try Again\";\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputField.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputField.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n    private login = async () => {\r\n\r\n        this.resetInputFields();\r\n\r\n        let userNameIsNotEmpty = this.checkIfUsernameIsEmpty();\r\n        let passwordIsNotEmpty = this.checkIfPasswordIsEmpty();\r\n\r\n        if (userNameIsNotEmpty && passwordIsNotEmpty) {\r\n\r\n            try {\r\n                let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n                \r\n                // The response we get, should be type of 'SuccessfulLoginServerResponse' class (token & user type)\r\n                const response = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/login', userLoginDetails);\r\n    \r\n                // Here we are receiving the token & user type from the data we got back from the server\r\n                const serverResponseData = response.data;\r\n    \r\n                // Attaching the Token we received from the server, to every HTTP request we'll send from now on\r\n                // This is our 'Interceptor'\r\n                let brearerToken = \"Bearer \" + serverResponseData.token;\r\n                axios.defaults.headers.common['Authorization'] = brearerToken;\r\n\r\n                // A Function that handles the URL and SessionStorage based on the data received from the server\r\n                this.handleUserInfoFromServer(serverResponseData);\r\n            }\r\n    \r\n            catch (error) {\r\n\r\n                console.log(error.status);\r\n                \r\n                this.onIncorrectCredentials();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleUserInfoFromServer = (serverResponseData : SuccessfulLoginServerResponse) => {\r\n\r\n        // ---------- Inserting the user's info (Token & Type) to the sessionStorage ---------- //\r\n\r\n        let strUserInfo = JSON.stringify(serverResponseData);\r\n        sessionStorage.setItem('userInfo', strUserInfo);\r\n\r\n        \r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        if (serverResponseData.userType === \"ADMIN\") {\r\n            this.props.history.push('/home');\r\n        }\r\n\r\n        else if (serverResponseData.userType === \"USER\") {\r\n            this.props.history.push('/user');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSection\">\r\n\r\n                <div className=\"loginSquare\">\r\n                    <img className=\"login-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                    <h2 className=\"sharp-text\">Login</h2>\r\n                    <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                    <div className=\"inputFieldSection\">\r\n                        <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset\">\r\n                            <legend>Username</legend>\r\n                            <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                        </fieldset>\r\n\r\n                        <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset\">\r\n                            <legend>Password</legend>\r\n                            <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                        </fieldset>\r\n\r\n                        <button className=\"loginBtn\" onClick={this.login}>Login</button>\r\n                    </div>\r\n\r\n                    <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I'm Not Registered</NavLink>\r\n                </div>\r\n\r\n                <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}