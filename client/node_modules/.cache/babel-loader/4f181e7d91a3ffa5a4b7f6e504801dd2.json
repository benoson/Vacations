{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport settingsImage from '../../assets/settingsImg.png';\nimport deleteSVG from \"../../assets/deleteSVG.svg\";\nimport spinningEarthSVG from \"../../assets/spinningEarthSVG.svg\";\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\nimport VacationComponent from '../vacationComponent/VacationComponent';\nimport TextField from '@material-ui/core/TextField';\nimport socketIOClient from \"socket.io-client\";\nimport './allVacations.css'; // ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\n\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n    this.userTypeFromServerCache = void 0;\n    this.socket = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = async () => {\n      this.socket = socketIOClient('http://localhost:3002'); // ----------- MAKE A FUNCTION THAT REGISTERS ALL THESE 'ON' LISTENERS -----------\n\n      this.socket.on('add-vacation', newlyAddedVacation => {\n        this.addVacationViaSocketIO(newlyAddedVacation);\n      });\n      this.socket.on('update-vacation-info', convertedValidDataForUIDisplay => {\n        this.updateVacationInfoViaSocketIO(convertedValidDataForUIDisplay);\n      });\n      this.socket.on('delete-vacation', clickedVacationID => {\n        this.deleteVacationViaSocketIO(clickedVacationID);\n      });\n      this.socket.on('increase-vacation-followers-count', clickedVacationID => {\n        this.increaseVacationFollowersCountViaSocketIO(clickedVacationID);\n      });\n      this.socket.on('decrease-vacation-followers-count', clickedVacationID => {\n        this.decreaseVacationFollowersCountViaSocketIO(clickedVacationID);\n      }); // Optimizing a bit the memory leak of the store listener. Also subscribes automatically to the store\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      })); // Getting The User's Type From The Server's Cache.\n\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        await this.getUserTypeFromServer();\n      }\n\n      this.checkIfGlobalStoraHasAllVacations();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      // Getting all the vacations from the server and inserting them to the Global Store\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data; // Insert all the vacations from the server to the Global Store\n\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      // This function occurs after validations approved that this vacation can be liked by the user\n      interceptorHandler();\n\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`); // Sending a socket command to the server, in order to inform all clients about the new updated vacation\n\n        this.socket.emit('increase-vacation-followers-count', clickedVacationID); // Updating The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      // This function is designated to make the user 'unfollow' a vacation\n      interceptorHandler();\n\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\n        let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID); // Sending a socket command to the server, in order to inform all clients about the new updated vacation\n\n        this.socket.emit('decrease-vacation-followers-count', clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\n\n        store.dispatch({\n          type: ActionType.UnfollowVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.addVacation = async addModalBackground => {\n      const vacationName = document.getElementById(\"addedVacationName\");\n      const vacationStartDate = document.getElementById(\"addStartDate\");\n      const vacationEndDate = document.getElementById(\"addEndDate\");\n      const vacationPrice = document.getElementById(\"addedVacationPrice\");\n      const vacationDescription = document.getElementById(\"addedVacationDescription\");\n      const vacationImageURL = document.getElementById(\"addedVacationImageURL\");\n      let allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL]; // Validating all fields of the added vacation are valid\n\n      let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\n\n      if (isNewVacationDataValid) {\n        interceptorHandler();\n\n        try {\n          let serverResponse = await axios.post(`http://localhost:3001/vacations/add_vacation`, newVacationData);\n          let newlyAddedVacation = serverResponse.data[0]; // ------- Updating the Global Store (Updating the UI with the newly added vacation)\n\n          store.dispatch({\n            type: ActionType.AddVacation,\n            payload: newlyAddedVacation\n          });\n          this.socket.emit('add-vacation', newlyAddedVacation);\n          this.hideModal(addModalBackground);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.updateVacation = async (clickedVacation, editModalBackground) => {\n      const allInputsArr = this.getAllInputsArrForUpdatedVacation(); // Validating all fields of the updated vacation are valid, and getting back the valid data\n\n      let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\n\n      if (isNewVacationDataValid) {\n        // Converting the data to for suitable UI display -> preventing retrieving the updated vacation from the DB\n        const convertedValidDataForUIDisplay = this.convertVacationDataForUIDisplay(allInputsArr, clickedVacation);\n        interceptorHandler();\n\n        try {\n          let clickedVacationID = clickedVacation.vacationID;\n          await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData); // Updating the Global Store localy (Updating the UI with the newly updated vacation data localy -> preventing calling for the DB)\n\n          let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID);\n          store.dispatch({\n            type: ActionType.UpdateVacation,\n            payload: {\n              indexOfClickedVacationInGlobalStore,\n              convertedValidDataForUIDisplay\n            }\n          });\n          this.hideModal(editModalBackground); // Sending a socket command to the server, in order to inform all clients about the new updated vacation\n\n          this.socket.emit('update-vacation-info', convertedValidDataForUIDisplay);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.deleteVacation = async clickedVacationID => {\n      interceptorHandler();\n\n      try {\n        await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`);\n        let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store\n\n        store.dispatch({\n          type: ActionType.DeleteVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        }); // Sending a socket command to the server, in order to inform all clients about the new updated vacation\n\n        this.socket.emit('delete-vacation', clickedVacationID);\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.getUserTypeFromServer = async () => {\n      try {\n        this.userTypeFromServerCache = await getUserTypeFromServerCache();\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.checkIfGlobalStoraHasAllVacations = () => {\n      // Checking if the global store has all the vacations to display, and if not, get them from the server\n      let allVacationsInGlobalStore = store.getState().allVacations;\n\n      if (allVacationsInGlobalStore.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: allVacationsInGlobalStore\n        });\n      }\n    };\n\n    this.convertVacationDataForUIDisplay = (inputsArr, clickedVacation) => {\n      const clickedVacationID = clickedVacation.vacationID;\n      const clickedVacationFollowersCount = clickedVacation.followersCount;\n      const newNameTrimmedValue = inputsArr[0].value.trim();\n      const vacationStartDateValue = inputsArr[1].value;\n      const vacationEndDateValue = inputsArr[2].value;\n      const newPriceValue = inputsArr[3].valueAsNumber;\n      const newDescriptionTrimmedValue = inputsArr[4].value.trim();\n      const newVacationURL = inputsArr[5].value.trim();\n      const convertedStartDate = this.convertStartDateForUIDisplay(vacationStartDateValue);\n      const convertedEndDate = this.convertEndDateForUIDisplay(vacationEndDateValue);\n      const convertedValidDataForUIDisplay = {\n        vacationID: clickedVacationID,\n        vacationName: newNameTrimmedValue,\n        startDate: convertedStartDate,\n        endDate: convertedEndDate,\n        vacationPrice: newPriceValue,\n        vacationDescription: newDescriptionTrimmedValue,\n        imageURL: newVacationURL,\n        followersCount: clickedVacationFollowersCount\n      };\n      return convertedValidDataForUIDisplay;\n    };\n\n    this.convertStartDateForUIDisplay = vacationStartDateValue => {\n      let startDateYear = +vacationStartDateValue.split('-')[2];\n      let startDateMonth = +vacationStartDateValue.split('-')[1];\n      let startDateDay = +vacationStartDateValue.split('-')[0];\n      let fullStartDate = startDateYear + \"/\" + startDateMonth + \"/\" + startDateDay;\n      return fullStartDate;\n    };\n\n    this.convertEndDateForUIDisplay = vacationEndDateValue => {\n      let endDateYear = +vacationEndDateValue.split('-')[2];\n      let endDateMonth = +vacationEndDateValue.split('-')[1];\n      let endDateDay = +vacationEndDateValue.split('-')[0];\n      let fullEndDate = endDateYear + \"/\" + endDateMonth + \"/\" + endDateDay;\n      return fullEndDate;\n    };\n\n    this.getAllInputsArrForUpdatedVacation = () => {\n      const vacationName = document.getElementById(\"editedVacationName\");\n      const vacationStartDate = document.getElementById(\"editStartDate\");\n      const vacationEndDate = document.getElementById(\"editEndDate\");\n      const vacationPrice = document.getElementById(\"editedVacationPrice\");\n      const vacationDescription = document.getElementById(\"editedVacationDescription\");\n      const vacationImageURL = document.getElementById(\"editedVacationImageURL\");\n      const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\n      return allInputsArr;\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      /*\r\n          Before the 'follow' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator(); // If the user is currently logged in\n\n      if (isUserLogged) {\n        // checking if the user hasn't liked this vacation already\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        } // If the vacation selected is already liked by the user, unfollow that vacation.\n        else {\n            this.unfollowVacation(clickedVacation);\n          }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateVacationIsNotLikedByTheUser = clickedVacation => {\n      // Validating the vacation chosen is not already liked by the user\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.vacationID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.vacationID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getIndexOfVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let allVacations = store.getState().allVacations;\n      let clickedVacationInGlobalStore = allVacations.find(allVacations => allVacations.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = allVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.getIndexOfFavoriteVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.onVacationAdditionAttempt = () => {\n      /*\r\n          Before the 'add' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to delete a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayAdditionModal();\n      } // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.onVacationEditAttempt = clickedVacation => {\n      /*\r\n          Before the 'edit' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to edit a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayEditModal(clickedVacation);\n      } // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.onVacationDeleteAttempt = clickedVacation => {\n      /*\r\n          Before the 'delete' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to delete a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayDeletionModal(clickedVacation);\n      } // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateNewVacationData = inputsArr => {\n      // This function validates all the Modal's fields are valid\n      const newNameTrimmedValue = inputsArr[0].value.trim();\n      const vacationStartDateValue = inputsArr[1].value;\n      const vacationEndDateValue = inputsArr[2].value;\n      const newPriceValue = inputsArr[3].valueAsNumber;\n      const newDescriptionTrimmedValue = inputsArr[4].value.trim();\n      const newVacationURL = inputsArr[5].value.trim(); // Validating all 'Edit' Modal fields are valid\n\n      let isNewVacationURLValie = this.validateNewVacationURL(newVacationURL);\n      let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\n      let isNewPriceValid = this.validateNewPrice(newPriceValue);\n      let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\n      let isNewNameValid = this.validateNewName(newNameTrimmedValue);\n\n      if (isNewNameValid) {\n        if (isNewPriceValid) {\n          if (isNewDescriptionValid) {\n            if (areDatesValid) {\n              if (isNewVacationURLValie) {\n                let newVacationData = {\n                  vacationName: newNameTrimmedValue,\n                  vacationPrice: newPriceValue,\n                  vacationDescription: newDescriptionTrimmedValue,\n                  startDate: vacationStartDateValue,\n                  endDate: vacationEndDateValue,\n                  imageURL: newVacationURL\n                };\n                return [true, newVacationData];\n              }\n            }\n          }\n        }\n      } // In case one of the parameters of the updated vacation is not valid\n\n\n      return [false, {}];\n    };\n\n    this.validateNewName = newTrimmedName => {\n      if (newTrimmedName !== \"\") {\n        if (newTrimmedName.length >= 3) {\n          if (newTrimmedName.length <= 44) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\n      return false;\n    };\n\n    this.validateNewPrice = newPrice => {\n      if (newPrice > 0) {\n        return true;\n      }\n\n      this.vacationsErrorHandler(\"The new price must be larger than 0\");\n      return false;\n    };\n\n    this.validateNewDescription = newTrimmedDescription => {\n      if (newTrimmedDescription !== \"\") {\n        if (newTrimmedDescription.length >= 5) {\n          if (newTrimmedDescription.length <= 249) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\n      return false;\n    };\n\n    this.validateNewDates = (newVacationStartDate, newVacationEndDate) => {\n      if (newVacationStartDate !== \"\") {\n        if (newVacationStartDate !== undefined) {\n          if (newVacationEndDate !== \"\") {\n            if (newVacationEndDate !== undefined) {\n              let currentDate = new Date().setHours(0, 0, 0, 0);\n              let startDate = new Date(newVacationStartDate).setHours(0, 0, 0, 0);\n              let endDate = new Date(newVacationEndDate).setHours(0, 0, 0, 0);\n\n              if (startDate >= currentDate) {\n                if (endDate > startDate) {\n                  return true;\n                } else {\n                  this.vacationsErrorHandler(\"The return date must be later than the starting date\");\n                  return false;\n                }\n              } else {\n                this.vacationsErrorHandler(\"The starting date must be later than today\");\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\n      return false;\n    };\n\n    this.validateNewVacationURL = newTrimmedImageURL => {\n      if (newTrimmedImageURL !== \"\") {\n        if (newTrimmedImageURL.length >= 10) {\n          if (newTrimmedImageURL.length <= 998) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"Image URL must be between 10 - 998 characters long\");\n      return false;\n    };\n\n    this.addVacationViaSocketIO = newlyAddedVacation => {\n      store.dispatch({\n        type: ActionType.AddVacation,\n        payload: newlyAddedVacation\n      });\n    };\n\n    this.updateVacationInfoViaSocketIO = convertedValidDataForUIDisplay => {\n      // Updating the vacation that was updated by the admin, in the user's UI, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let updatedVacationID = convertedValidDataForUIDisplay.vacationID;\n      let indexOfClickedFavoriteVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(updatedVacationID);\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(updatedVacationID); // Updating the vacations in the 'all vacations' component\n\n      store.dispatch({\n        type: ActionType.UpdateVacation,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          convertedValidDataForUIDisplay\n        }\n      }); // Updating the vacations in the user's 'favorite vacations' component\n\n      if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\n        store.dispatch({\n          type: ActionType.UpdateFavoriteVacation,\n          payload: {\n            indexOfClickedFavoriteVacationInGlobalStore,\n            convertedValidDataForUIDisplay\n          }\n        });\n      }\n    };\n\n    this.deleteVacationViaSocketIO = clickedVacationID => {\n      // Updating the vacation that was updated by the admin, in the user's UI, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedFavoriteVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID); // Updating the vacations in the 'all vacations' component\n\n      store.dispatch({\n        type: ActionType.DeleteVacationViaSocketIO,\n        payload: indexOfClickedVacationInGlobalStore\n      }); // Updating the vacations in the user's 'favorite vacations' component\n\n      if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\n        store.dispatch({\n          type: ActionType.DeleteFavoriteVacationViaSocketIO,\n          payload: indexOfClickedFavoriteVacationInGlobalStore\n        });\n      }\n    };\n\n    this.increaseVacationFollowersCountViaSocketIO = clickedVacationID => {\n      // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID);\n      let indexOfFavoriteClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n      let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount + 1;\n\n      if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\n        // Updating the vacation's followers count in the UI\n        store.dispatch({\n          type: ActionType.IncreaseFavoriteVacationFollowersCount,\n          payload: {\n            indexOfFavoriteClickedVacationInGlobalStore,\n            newFollowersCount\n          }\n        });\n      } // Updating the vacation's followers count in the UI\n\n\n      store.dispatch({\n        type: ActionType.IncreaseVacationFollowersCount,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          newFollowersCount\n        }\n      });\n    };\n\n    this.decreaseVacationFollowersCountViaSocketIO = clickedVacationID => {\n      // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID);\n      let indexOfFavoriteClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n      let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount - 1;\n\n      if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\n        // Updating the vacation's followers count in the UI\n        store.dispatch({\n          type: ActionType.DecreaseFavoriteVacationFollowersCount,\n          payload: {\n            indexOfFavoriteClickedVacationInGlobalStore,\n            newFollowersCount\n          }\n        });\n      } // Updating the vacation's followers count in the UI\n\n\n      store.dispatch({\n        type: ActionType.DecreaseVacationFollowersCount,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          newFollowersCount\n        }\n      });\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 6000);\n    };\n\n    this.displayVacationNameInEditModal = clickedVacationName => {\n      // Displaying 'Edit' Modal Name\n      const editedVacationNameField = document.getElementById(\"editedVacationName\");\n      editedVacationNameField.value = clickedVacationName;\n    };\n\n    this.displayVacationPriceInEditModal = clickedVacationPrice => {\n      // Dusplaying 'Edit' Modal Price\n      const editedVacationPriceField = document.getElementById(\"editedVacationPrice\");\n      editedVacationPriceField.valueAsNumber = clickedVacationPrice;\n    };\n\n    this.displayVacationDatesInEditModal = (clickedVacationStartDate, clickedVacationEndDate) => {\n      // Displaying 'Edit' Modal Dates\n      const editStartDateField = document.getElementById(\"editStartDate\");\n      const editEndDateField = document.getElementById(\"editEndDate\"); // Start Date\n\n      let startDateYear = +clickedVacationStartDate.split('/')[2];\n      let startDateMonth = +clickedVacationStartDate.split('/')[1];\n      let startDateDay = +clickedVacationStartDate.split('/')[0];\n      let fullStartDate = startDateYear + \"-\" + startDateMonth + \"-\" + startDateDay; // End Date\n\n      let endDateYear = +clickedVacationEndDate.split('/')[2];\n      let endDateMonth = +clickedVacationEndDate.split('/')[1];\n      let endDateDay = +clickedVacationEndDate.split('/')[0];\n      let fullEndDate = endDateYear + \"-\" + endDateMonth + \"-\" + endDateDay;\n      editStartDateField.valueAsDate = new Date(fullStartDate);\n      editEndDateField.valueAsDate = new Date(fullEndDate);\n    };\n\n    this.displayVacationDescriptionInEditModal = clickedVacationDescription => {\n      // Displaying 'Edit' Modal Description\n      const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\");\n      editVacationDescriptionField.value = clickedVacationDescription;\n    };\n\n    this.displayVacationImageInEditModal = clickedVacationImageURL => {\n      const editedVacationImageURL = document.getElementById(\"editedVacationImageURL\");\n      editedVacationImageURL.value = clickedVacationImageURL;\n    };\n\n    this.displayAdditionModal = () => {\n      // Defining the 'Add' Modal in the UI\n      const addModalBackground = document.getElementById(\"addModalContainer\");\n      const addModalDoneBtn = document.getElementById(\"addModalDoneBtn\");\n      const addModalCancelBtn = document.getElementById(\"addModalCancelBtn\");\n      addModalBackground.style.display = \"block\"; // Defining the event listeners for the modal\n\n      addModalCancelBtn.onclick = () => {\n        this.hideModal(addModalBackground);\n      };\n\n      addModalDoneBtn.onclick = () => {\n        this.addVacation(addModalBackground);\n      };\n\n      window.addEventListener(\"click\", event => {\n        if (event.target === addModalBackground) {\n          this.hideModal(addModalBackground);\n        }\n      });\n    };\n\n    this.displayEditModal = clickedVacation => {\n      // Defining the 'Edit' Modal in the UI\n      const editModalBackground = document.getElementById(\"editModalContainer\");\n      const editModalIcon = document.getElementById(\"editModalIcon\");\n      const editModalHeader = document.getElementById(\"editModalHeader\");\n      const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\n      const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\"); // Displaying the values inside the 'Edit' Modal\n\n      this.displayVacationNameInEditModal(clickedVacation.vacationName);\n      this.displayVacationPriceInEditModal(clickedVacation.vacationPrice);\n      this.displayVacationDescriptionInEditModal(clickedVacation.vacationDescription);\n      this.displayVacationDatesInEditModal(clickedVacation.startDate, clickedVacation.endDate);\n      this.displayVacationImageInEditModal(clickedVacation.imageURL);\n      editModalBackground.style.display = \"block\";\n      editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\n      editModalIcon.src = clickedVacation.imageURL; // Defining the event listeners for the modal\n\n      editModalCancelBtn.onclick = () => {\n        this.hideModal(editModalBackground);\n      };\n\n      editModalDoneBtn.onclick = () => {\n        this.updateVacation(clickedVacation, editModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === editModalBackground) {\n          editModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.displayDeletionModal = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\n      const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\n      const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\n      const deleteBtn = document.getElementById(\"deleteBtn\");\n      const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\n      const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\n      deletionModalBackground.style.display = \"block\";\n      deletionModalHeader.textContent = \"Confirm Your Deletion\";\n      deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\n      deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`; // Defining the event listeners for the modal\n\n      dontDeleteBtn.onclick = () => {\n        this.hideModal(deletionModalBackground);\n      };\n\n      deleteBtn.onclick = () => {\n        this.deleteVacation(clickedVacationID);\n        this.hideModal(deletionModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === deletionModalBackground) {\n          deletionModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.clearModalInputs = () => {\n      // Clearing the inputs of the 'Add' Modal\n      let additionModalNameInput = document.getElementById(\"addedVacationName\");\n      let additionModalStartDateInput = document.getElementById(\"addStartDate\");\n      let additionModalEndDateInput = document.getElementById(\"addEndDate\");\n      let additionModalPriceInput = document.getElementById(\"addedVacationPrice\");\n      let additionModalDescriptionInput = document.getElementById(\"addedVacationDescription\");\n      let additionModalImageURLInput = document.getElementById(\"addedVacationImageURL\");\n      additionModalNameInput.value = \"\";\n      additionModalStartDateInput.value = \"\";\n      additionModalEndDateInput.value = \"\";\n      additionModalPriceInput.valueAsNumber = 0;\n      additionModalDescriptionInput.value = \"\";\n      additionModalImageURLInput.value = \"\";\n    };\n\n    this.hideModal = modal => {\n      modal.style.display = \"none\";\n      this.clearModalInputs();\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 21\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations You Can Edit\") : /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 21\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"addVacationSquare\",\n      onClick: this.onVacationAdditionAttempt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newVacationText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 37\n      }\n    }, \"New Vacation\"))), this.state.allVacations.length > 0 ? // ---------- In case the user type in the server's cache is type 'USER' ---------- //\n    this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(VacationComponent, {\n      key: index,\n      vacation: vacation,\n      onVacationFollowAttempt: this.onVacationFollowAttempt,\n      validateVacationIsNotLikedByTheUser: this.validateVacationIsNotLikedByTheUser,\n      onVacationDeleteAttempt: this.onVacationDeleteAttempt,\n      onVacationEditAttempt: this.onVacationEditAttempt,\n      userTypeFromServerCache: this.userTypeFromServerCache,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 33\n      }\n    })) // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\n    :\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"noVcationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"settingsImage\",\n      src: settingsImage,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 33\n      }\n    }, \"Oops, We Could Not Find Any Vacations\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"deletionModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"deletionModalText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"deletionModalVacationName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"deleteModalIcon\",\n      src: deleteSVG,\n      alt: \"Delete Vacation Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"dontDeleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 29\n      }\n    }, \"Don't Delete\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"deleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 29\n      }\n    }, \"Delete\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"editModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"editModalIcon\",\n      alt: \"Add New Vacation Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationName\",\n      label: \"Name\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editDatesSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"editStartDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 33\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"editEndDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationPrice\",\n      type: \"number\",\n      label: \"Price\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationDescription\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationImageURL\",\n      label: \"Image URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalCancelBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalDoneBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 29\n      }\n    }, \"Update\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"addModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 25\n      }\n    }, \"Add a New Vacation !\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"addModalIcon\",\n      src: spinningEarthSVG,\n      alt: \"Vacation URL Is Broken\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationName\",\n      label: \"Name\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addDatesSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"addStartDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 33\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"addEndDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationPrice\",\n      type: \"number\",\n      label: \"Price\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationDescription\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationImageURL\",\n      label: \"Image URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addModalCancelBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addModalDoneBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 29\n      }\n    }, \"Add\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","store","axios","ActionType","withRouter","settingsImage","isUserLoggedValidator","interceptorHandler","getUserTypeFromServerCache","VacationComponent","TextField","socketIOClient","AllVacations","constructor","props","unSubscribeStore","userTypeFromServerCache","socket","componentWillUnmount","componentDidMount","on","newlyAddedVacation","addVacationViaSocketIO","convertedValidDataForUIDisplay","updateVacationInfoViaSocketIO","clickedVacationID","deleteVacationViaSocketIO","increaseVacationFollowersCountViaSocketIO","decreaseVacationFollowersCountViaSocketIO","subscribe","setState","allVacations","getState","isUserLogged","getUserTypeFromServer","checkIfGlobalStoraHasAllVacations","getAllVacationsFromServer","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","vacationsErrorHandler","followVacation","clickedVacation","vacationID","post","emit","SetFollowedVacation","unfollowVacation","indexOfClickedVacationInGlobalStore","getIndexOfFavoriteVacationByID","UnfollowVacation","addVacation","addModalBackground","vacationName","document","getElementById","vacationStartDate","vacationEndDate","vacationPrice","vacationDescription","vacationImageURL","allInputsArr","isNewVacationDataValid","newVacationData","validateNewVacationData","serverResponse","AddVacation","hideModal","updateVacation","editModalBackground","getAllInputsArrForUpdatedVacation","convertVacationDataForUIDisplay","put","getIndexOfVacationByID","UpdateVacation","deleteVacation","DeleteVacation","allVacationsInGlobalStore","length","inputsArr","clickedVacationFollowersCount","followersCount","newNameTrimmedValue","value","trim","vacationStartDateValue","vacationEndDateValue","newPriceValue","valueAsNumber","newDescriptionTrimmedValue","newVacationURL","convertedStartDate","convertStartDateForUIDisplay","convertedEndDate","convertEndDateForUIDisplay","startDate","endDate","imageURL","startDateYear","split","startDateMonth","startDateDay","fullStartDate","endDateYear","endDateMonth","endDateDay","fullEndDate","onVacationFollowAttempt","vacationIsNotAlreadyLikedByTheUser","validateVacationIsNotLikedByTheUser","history","push","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationInGlobalStore","find","favoriteVacation","undefined","indexOf","onVacationAdditionAttempt","displayAdditionModal","onVacationEditAttempt","displayEditModal","onVacationDeleteAttempt","displayDeletionModal","isNewVacationURLValie","validateNewVacationURL","isNewDescriptionValid","validateNewDescription","isNewPriceValid","validateNewPrice","areDatesValid","validateNewDates","isNewNameValid","validateNewName","newTrimmedName","newPrice","newTrimmedDescription","newVacationStartDate","newVacationEndDate","currentDate","Date","setHours","newTrimmedImageURL","updatedVacationID","indexOfClickedFavoriteVacationInGlobalStore","UpdateFavoriteVacation","DeleteVacationViaSocketIO","DeleteFavoriteVacationViaSocketIO","indexOfFavoriteClickedVacationInGlobalStore","newFollowersCount","IncreaseFavoriteVacationFollowersCount","IncreaseVacationFollowersCount","DecreaseFavoriteVacationFollowersCount","DecreaseVacationFollowersCount","snackbar","className","textContent","setTimeout","replace","displayVacationNameInEditModal","clickedVacationName","editedVacationNameField","displayVacationPriceInEditModal","clickedVacationPrice","editedVacationPriceField","displayVacationDatesInEditModal","clickedVacationStartDate","clickedVacationEndDate","editStartDateField","editEndDateField","valueAsDate","displayVacationDescriptionInEditModal","clickedVacationDescription","editVacationDescriptionField","displayVacationImageInEditModal","clickedVacationImageURL","editedVacationImageURL","addModalDoneBtn","addModalCancelBtn","style","display","onclick","window","addEventListener","event","target","editModalIcon","editModalHeader","editModalDoneBtn","editModalCancelBtn","src","deletionModalBackground","deletionModalHeader","deletionModalTextParagraph","deleteBtn","dontDeleteBtn","deletionModalVacationName","clearModalInputs","additionModalNameInput","additionModalStartDateInput","additionModalEndDateInput","additionModalPriceInput","additionModalDescriptionInput","additionModalImageURLInput","modal","state","Array","render","map","vacation","index","deleteSVG","spinningEarthSVG"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;;AAGA,SAASC,qBAAT,QAAsC,oCAAtC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,oBAAP,C,CAGA;;AAMA,OAAO,MAAMC,YAAN,SAA2BZ,SAA3B,CAA8D;AAMjEa,EAAAA,WAAW,CAACC,KAAD,EAAc;AACrB,UAAMA,KAAN;AADqB,SAJjBC,gBAIiB;AAAA,SAHjBC,uBAGiB;AAAA,SAFjBC,MAEiB;;AAAA,SAWzBC,oBAXyB,GAWF,MAAM;AAEzB;AACA;AACA,WAAKH,gBAAL;AACH,KAhBwB;;AAAA,SAkBzBI,iBAlByB,GAkBL,YAAY;AAE5B,WAAKF,MAAL,GAAcN,cAAc,CAAC,uBAAD,CAA5B,CAF4B,CAK5B;;AAEA,WAAKM,MAAL,CAAYG,EAAZ,CAAe,cAAf,EAAgCC,kBAAD,IAAkC;AAE7D,aAAKC,sBAAL,CAA4BD,kBAA5B;AACH,OAHD;AAKA,WAAKJ,MAAL,CAAYG,EAAZ,CAAe,sBAAf,EAAwCG,8BAAD,IAA8C;AAEjF,aAAKC,6BAAL,CAAmCD,8BAAnC;AACH,OAHD;AAKA,WAAKN,MAAL,CAAYG,EAAZ,CAAe,iBAAf,EAAmCK,iBAAD,IAA+B;AAE7D,aAAKC,yBAAL,CAA+BD,iBAA/B;AACH,OAHD;AAKA,WAAKR,MAAL,CAAYG,EAAZ,CAAe,mCAAf,EAAqDK,iBAAD,IAA+B;AAE/E,aAAKE,yCAAL,CAA+CF,iBAA/C;AACH,OAHD;AAKA,WAAKR,MAAL,CAAYG,EAAZ,CAAe,mCAAf,EAAqDK,iBAAD,IAA+B;AAE/E,aAAKG,yCAAL,CAA+CH,iBAA/C;AACH,OAHD,EA3B4B,CAkC5B;;AACA,WAAKV,gBAAL,GAAwBd,KAAK,CAAC4B,SAAN,CAEpB,MAAM,KAAKC,QAAL,CAAe;AACjBC,QAAAA,YAAY,EAAE9B,KAAK,CAAC+B,QAAN,GAAiBD;AADd,OAAf,CAFc,CAAxB,CAnC4B,CA2C5B;;AACA,YAAME,YAAY,GAAG3B,qBAAqB,EAA1C;;AAEA,UAAI2B,YAAJ,EAAkB;AAEd,cAAM,KAAKC,qBAAL,EAAN;AACH;;AAED,WAAKC,iCAAL;AACH,KAtEwB;;AAAA,SA4EjBC,yBA5EiB,GA4EW,YAAY;AAE5C;AAEA,UAAI;AACA;AACA,cAAMC,QAAQ,GAAG,MAAMnC,KAAK,CAACoC,GAAN,CAAsB,iCAAtB,CAAvB,CAFA,CAIA;;AACA,cAAMP,YAAwB,GAAGM,QAAQ,CAACE,IAA1C,CALA,CAQA;;AACAtC,QAAAA,KAAK,CAACuC,QAAN,CAAe;AACXC,UAAAA,IAAI,EAAEtC,UAAU,CAACuC,eADN;AAEXC,UAAAA,OAAO,EAAEZ;AAFE,SAAf;AAIH,OAbD,CAeA,OAAOa,KAAP,EAAc;AAEV,YAAI;AACA,cAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,eAAKE,qBAAL,CAA2BD,YAA3B;AACH,SAHD,CAKA,MAAM;AACF,eAAKC,qBAAL,CAA2BF,KAA3B;AACH;AACJ;AACJ,KA1GwB;;AAAA,SA4GjBG,cA5GiB,GA4GA,MAAOC,eAAP,IAAsC;AAE3D;AAEAzC,MAAAA,kBAAkB;;AAElB,UAAI;AAEA;AAEA,YAAIkB,iBAA0B,GAAGuB,eAAe,CAACC,UAAjD;AACA,cAAM/C,KAAK,CAACgD,IAAN,CAAY,mDAAkDzB,iBAAkB,EAAhF,CAAN,CALA,CAOA;;AACA,aAAKR,MAAL,CAAYkC,IAAZ,CAAiB,mCAAjB,EAAsD1B,iBAAtD,EARA,CAUA;;AACAxB,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAACiD,mBAAlB;AAAuCT,UAAAA,OAAO,EAAEK;AAAhD,SAAf;AACH,OAZD,CAcA,OAAOJ,KAAP,EAAc;AAEV,YAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,aAAKE,qBAAL,CAA2BD,YAA3B;AACH;AACJ,KArIwB;;AAAA,SAuIjBQ,gBAvIiB,GAuIE,MAAOL,eAAP,IAAsC;AAE7D;AACAzC,MAAAA,kBAAkB;;AAElB,UAAI;AAEA;AAEA,YAAIkB,iBAA0B,GAAGuB,eAAe,CAACC,UAAjD;AACA,cAAM/C,KAAK,CAACgD,IAAN,CAAY,qDAAoDzB,iBAAkB,EAAlF,CAAN;AAEA,YAAI6B,mCAA2C,GAAG,KAAKC,8BAAL,CAAoC9B,iBAApC,CAAlD,CAPA,CASA;;AACA,aAAKR,MAAL,CAAYkC,IAAZ,CAAiB,mCAAjB,EAAsD1B,iBAAtD,EAVA,CAYA;;AACAxB,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAACqD,gBAAlB;AAAoCb,UAAAA,OAAO,EAAEW;AAA7C,SAAf;AACH,OAdD,CAgBA,OAAOV,KAAP,EAAc;AAEV,YAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,aAAKE,qBAAL,CAA2BD,YAA3B;AACH;AACJ,KAjKwB;;AAAA,SAmKjBY,WAnKiB,GAmKH,MAAOC,kBAAP,IAAmC;AAErD,YAAMC,YAA8B,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAvC;AACA,YAAMC,iBAAmC,GAAGF,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAA5C;AACA,YAAME,eAAiC,GAAGH,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAA1C;AACA,YAAMG,aAA+B,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAxC;AACA,YAAMI,mBAAqC,GAAGL,QAAQ,CAACC,cAAT,CAAwB,0BAAxB,CAA9C;AACA,YAAMK,gBAAkC,GAAGN,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA3C;AAEA,UAAIM,YAAY,GAAG,CAACR,YAAD,EAAeG,iBAAf,EAAkCC,eAAlC,EAAmDC,aAAnD,EAAkEC,mBAAlE,EAAuFC,gBAAvF,CAAnB,CATqD,CAWrD;;AACA,UAAI,CAACE,sBAAD,EAAyBC,eAAzB,IAA4C,KAAKC,uBAAL,CAA6BH,YAA7B,CAAhD;;AAEA,UAAIC,sBAAJ,EAA4B;AAExB7D,QAAAA,kBAAkB;;AAElB,YAAI;AAEA,cAAIgE,cAAc,GAAG,MAAMrE,KAAK,CAACgD,IAAN,CAAwB,8CAAxB,EAAuEmB,eAAvE,CAA3B;AACA,cAAIhD,kBAA4B,GAAGkD,cAAc,CAAChC,IAAf,CAAoB,CAApB,CAAnC,CAHA,CAMA;;AACAtC,UAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,YAAAA,IAAI,EAAEtC,UAAU,CAACqE,WAAlB;AAA+B7B,YAAAA,OAAO,EAAEtB;AAAxC,WAAf;AAEA,eAAKJ,MAAL,CAAYkC,IAAZ,CAAiB,cAAjB,EAAiC9B,kBAAjC;AAEA,eAAKoD,SAAL,CAAef,kBAAf;AACH,SAZD,CAcA,OAAOd,KAAP,EAAc;AAEV,cAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,eAAKE,qBAAL,CAA2BD,YAA3B;AACH;AACJ;AACJ,KAzMwB;;AAAA,SA2MjB6B,cA3MiB,GA2MA,OAAO1B,eAAP,EAAmC2B,mBAAnC,KAAgE;AAErF,YAAMR,YAAY,GAAG,KAAKS,iCAAL,EAArB,CAFqF,CAIrF;;AACA,UAAI,CAACR,sBAAD,EAAyBC,eAAzB,IAA4C,KAAKC,uBAAL,CAA6BH,YAA7B,CAAhD;;AAGA,UAAIC,sBAAJ,EAA4B;AAExB;AACA,cAAM7C,8BAA8B,GAAG,KAAKsD,+BAAL,CAAqCV,YAArC,EAAmDnB,eAAnD,CAAvC;AAEAzC,QAAAA,kBAAkB;;AAElB,YAAI;AAEA,cAAIkB,iBAAyB,GAAGuB,eAAe,CAACC,UAAhD;AACA,gBAAM/C,KAAK,CAAC4E,GAAN,CAAW,mDAAkDrD,iBAAkB,EAA/E,EAAkF4C,eAAlF,CAAN,CAHA,CAKA;;AACA,cAAIf,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BtD,iBAA5B,CAAlD;AACAxB,UAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,YAAAA,IAAI,EAAEtC,UAAU,CAAC6E,cAAlB;AAAkCrC,YAAAA,OAAO,EAAE;AAACW,cAAAA,mCAAD;AAAsC/B,cAAAA;AAAtC;AAA3C,WAAf;AAEA,eAAKkD,SAAL,CAAeE,mBAAf,EATA,CAWA;;AACA,eAAK1D,MAAL,CAAYkC,IAAZ,CAAiB,sBAAjB,EAAyC5B,8BAAzC;AACH,SAbD,CAeA,OAAOqB,KAAP,EAAc;AAEV,cAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,eAAKE,qBAAL,CAA2BD,YAA3B;AACH;AACJ;AACJ,KA/OwB;;AAAA,SAiPjBoC,cAjPiB,GAiPA,MAAOxD,iBAAP,IAAqC;AAE1DlB,MAAAA,kBAAkB;;AAElB,UAAI;AAEA,cAAML,KAAK,CAACgD,IAAN,CAAY,mDAAkDzB,iBAAkB,EAAhF,CAAN;AAEA,YAAI6B,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BtD,iBAA5B,CAAlD,CAJA,CAMA;;AACAxB,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAAC+E,cAAlB;AAAkCvC,UAAAA,OAAO,EAAEW;AAA3C,SAAf,EAPA,CASA;;AACA,aAAKrC,MAAL,CAAYkC,IAAZ,CAAiB,iBAAjB,EAAoC1B,iBAApC;AACH,OAXD,CAaA,OAAOmB,KAAP,EAAc;AAEV,YAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,aAAKE,qBAAL,CAA2BD,YAA3B;AACH;AACJ,KAvQwB;;AAAA,SAyQjBX,qBAzQiB,GAyQO,YAAY;AAExC,UAAI;AACA,aAAKlB,uBAAL,GAA+B,MAAMR,0BAA0B,EAA/D;AACH,OAFD,CAIA,OAAOoC,KAAP,EAAc;AACV,YAAI;AACA,cAAIC,YAAY,GAAGD,KAAK,CAACP,QAAN,CAAeE,IAAf,CAAoBK,KAAvC;AACA,eAAKE,qBAAL,CAA2BD,YAA3B;AACH,SAHD,CAKA,MAAM;AACF,eAAKC,qBAAL,CAA2BF,KAA3B;AACH;AACJ;AACJ,KAzRwB;;AAAA,SA+RjBT,iCA/RiB,GA+RmB,MAAM;AAE9C;AAEA,UAAIgD,yBAAyB,GAAGlF,KAAK,CAAC+B,QAAN,GAAiBD,YAAjD;;AAEA,UAAIoD,yBAAyB,CAACC,MAA1B,KAAqC,CAAzC,EAA4C;AACxC,aAAKhD,yBAAL;AACH,OAFD,MAIK;AACD,aAAKN,QAAL,CAAe;AACXC,UAAAA,YAAY,EAAEoD;AADH,SAAf;AAGH;AACJ,KA9SwB;;AAAA,SAgTjBN,+BAhTiB,GAgTiB,CAACQ,SAAD,EAAiCrC,eAAjC,KAA+D;AAErG,YAAMvB,iBAAyB,GAAGuB,eAAe,CAACC,UAAlD;AACA,YAAMqC,6BAAqC,GAAGtC,eAAe,CAACuC,cAA9D;AAEA,YAAMC,mBAAmB,GAAGH,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAA5B;AACA,YAAMC,sBAAsB,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAaI,KAA5C;AACA,YAAMG,oBAAoB,GAAGP,SAAS,CAAC,CAAD,CAAT,CAAaI,KAA1C;AACA,YAAMI,aAAa,GAAGR,SAAS,CAAC,CAAD,CAAT,CAAaS,aAAnC;AACA,YAAMC,0BAA0B,GAAGV,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAAnC;AACA,YAAMM,cAAc,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAAvB;AAEA,YAAMO,kBAAkB,GAAG,KAAKC,4BAAL,CAAkCP,sBAAlC,CAA3B;AACA,YAAMQ,gBAAgB,GAAG,KAAKC,0BAAL,CAAgCR,oBAAhC,CAAzB;AAEA,YAAMrE,8BAA8B,GAAG;AACnC0B,QAAAA,UAAU,EAAExB,iBADuB;AAEnCkC,QAAAA,YAAY,EAAE6B,mBAFqB;AAGnCa,QAAAA,SAAS,EAAEJ,kBAHwB;AAInCK,QAAAA,OAAO,EAAEH,gBAJ0B;AAKnCnC,QAAAA,aAAa,EAAE6B,aALoB;AAMnC5B,QAAAA,mBAAmB,EAAE8B,0BANc;AAOnCQ,QAAAA,QAAQ,EAAEP,cAPyB;AAQnCT,QAAAA,cAAc,EAAED;AARmB,OAAvC;AAWA,aAAO/D,8BAAP;AACH,KA3UwB;;AAAA,SA6UjB2E,4BA7UiB,GA6UeP,sBAAD,IAAoC;AAEvE,UAAIa,aAAa,GAAG,CAACb,sBAAsB,CAACc,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAArB;AACA,UAAIC,cAAc,GAAG,CAACf,sBAAsB,CAACc,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAtB;AACA,UAAIE,YAAY,GAAG,CAAChB,sBAAsB,CAACc,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAApB;AACA,UAAIG,aAAa,GAAGJ,aAAa,GAAC,GAAd,GAAkBE,cAAlB,GAAiC,GAAjC,GAAqCC,YAAzD;AAEA,aAAOC,aAAP;AACH,KArVwB;;AAAA,SAuVjBR,0BAvViB,GAuVaR,oBAAD,IAAkC;AAEnE,UAAIiB,WAAW,GAAG,CAACjB,oBAAoB,CAACa,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAnB;AACA,UAAIK,YAAY,GAAG,CAAClB,oBAAoB,CAACa,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAApB;AACA,UAAIM,UAAU,GAAG,CAACnB,oBAAoB,CAACa,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAlB;AACA,UAAIO,WAAW,GAAGH,WAAW,GAAC,GAAZ,GAAgBC,YAAhB,GAA6B,GAA7B,GAAiCC,UAAnD;AAEA,aAAOC,WAAP;AACH,KA/VwB;;AAAA,SAiWjBpC,iCAjWiB,GAiWmB,MAAM;AAE9C,YAAMjB,YAA8B,GAAGC,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAvC;AACA,YAAMC,iBAAmC,GAAGF,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAA5C;AACA,YAAME,eAAiC,GAAGH,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAA1C;AACA,YAAMG,aAA+B,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAAxC;AACA,YAAMI,mBAAqC,GAAGL,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CAA9C;AACA,YAAMK,gBAAkC,GAAGN,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAA3C;AAEA,YAAMM,YAAY,GAAG,CAACR,YAAD,EAAeG,iBAAf,EAAkCC,eAAlC,EAAmDC,aAAnD,EAAkEC,mBAAlE,EAAuFC,gBAAvF,CAArB;AAEA,aAAOC,YAAP;AACH,KA7WwB;;AAAA,SA+WjB8C,uBA/WiB,GA+WUjE,eAAD,IAAgC;AAE9D;;;;;AAMA;AACA;AAEA,YAAMf,YAAY,GAAG3B,qBAAqB,EAA1C,CAX8D,CAc9D;;AACA,UAAI2B,YAAJ,EAAkB;AAEd;AACA,cAAMiF,kCAAkC,GAAG,KAAKC,mCAAL,CAAyCnE,eAAzC,CAA3C,CAHc,CAKd;;AACA,YAAIkE,kCAAJ,EAAwC;AACpC,eAAKnE,cAAL,CAAoBC,eAApB;AACH,SAFD,CAIA;AAJA,aAKK;AACD,iBAAKK,gBAAL,CAAsBL,eAAtB;AACH;AACJ,OAdD,CAgBA;AAhBA,WAiBK;AACD,eAAKlC,KAAL,CAAWsG,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,KAlZwB;;AAAA,SAoZjBF,mCApZiB,GAoZsBnE,eAAD,IAAgC;AAE1E;AAEA,UAAIsE,gCAA4C,GAAGrH,KAAK,CAAC+B,QAAN,GAAiBuF,iBAApE;AACA,UAAI9F,iBAAyB,GAAGuB,eAAe,CAACC,UAAhD,CAL0E,CAO1E;;AACA,UAAIuE,4BAAsC,GAAGF,gCAAgC,CAACG,IAAjC,CACzCC,gBAAgB,IAAIA,gBAAgB,CAACzE,UAAjB,KAAgCxB,iBADX,CAA7C,CAR0E,CAW1E;;AACA,UAAI+F,4BAA4B,KAAKG,SAArC,EAAgD;AAC5C,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH,KArawB;;AAAA,SAuajB5C,sBAvaiB,GAuaS9B,UAAD,IAAwB;AAErD;AAEA,UAAIlB,YAAwB,GAAG9B,KAAK,CAAC+B,QAAN,GAAiBD,YAAhD;AAEA,UAAIyF,4BAAsC,GAAGzF,YAAY,CAAC0F,IAAb,CAAmB1F,YAAY,IAAKA,YAAY,CAACkB,UAAb,KAA4BA,UAAhE,CAA7C;AACA,UAAIK,mCAA2C,GAAGvB,YAAY,CAAC6F,OAAb,CAAqBJ,4BAArB,CAAlD;AAEA,aAAOlE,mCAAP;AACH,KAjbwB;;AAAA,SAmbjBC,8BAnbiB,GAmbiBN,UAAD,IAAwB;AAE7D;AAEA,UAAIsE,iBAA6B,GAAGtH,KAAK,CAAC+B,QAAN,GAAiBuF,iBAArD;AAEA,UAAIC,4BAAsC,GAAGD,iBAAiB,CAACE,IAAlB,CAAwBC,gBAAgB,IAAKA,gBAAgB,CAACzE,UAAjB,KAAgCA,UAA7E,CAA7C;AACA,UAAIK,mCAA2C,GAAGiE,iBAAiB,CAACK,OAAlB,CAA0BJ,4BAA1B,CAAlD;AAEA,aAAOlE,mCAAP;AACH,KA7bwB;;AAAA,SA+bjBuE,yBA/biB,GA+bW,MAAM;AAEtC;;;;;AAMA;AACA;AAEA,YAAM5F,YAAY,GAAG3B,qBAAqB,EAA1C;;AAEA,UAAI2B,YAAJ,EAAkB;AAEd,aAAK6F,oBAAL;AACH,OAHD,CAMA;AANA,WAOK;AACD,eAAKhH,KAAL,CAAWsG,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,KAtdwB;;AAAA,SAwdjBU,qBAxdiB,GAwdQ/E,eAAD,IAA+B;AAE3D;;;;;AAMA;AACA;AAEA,YAAMf,YAAY,GAAG3B,qBAAqB,EAA1C;;AAEA,UAAI2B,YAAJ,EAAkB;AAEd,aAAK+F,gBAAL,CAAsBhF,eAAtB;AACH,OAHD,CAMA;AANA,WAOK;AACD,eAAKlC,KAAL,CAAWsG,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,KA/ewB;;AAAA,SAifjBY,uBAjfiB,GAifUjF,eAAD,IAA+B;AAE7D;;;;;AAMA;AACA;AAEA,YAAMf,YAAY,GAAG3B,qBAAqB,EAA1C;;AAEA,UAAI2B,YAAJ,EAAkB;AAEd,aAAKiG,oBAAL,CAA0BlF,eAA1B;AACH,OAHD,CAMA;AANA,WAOK;AACD,eAAKlC,KAAL,CAAWsG,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,KAxgBwB;;AAAA,SA0gBjB/C,uBA1gBiB,GA0gBUe,SAAD,IAAmC;AAEjE;AAEA,YAAMG,mBAAmB,GAAGH,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAA5B;AACA,YAAMC,sBAAsB,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAaI,KAA5C;AACA,YAAMG,oBAAoB,GAAGP,SAAS,CAAC,CAAD,CAAT,CAAaI,KAA1C;AACA,YAAMI,aAAa,GAAGR,SAAS,CAAC,CAAD,CAAT,CAAaS,aAAnC;AACA,YAAMC,0BAA0B,GAAGV,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAAnC;AACA,YAAMM,cAAc,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,IAAnB,EAAvB,CATiE,CAYjE;;AAEA,UAAIyC,qBAAqB,GAAG,KAAKC,sBAAL,CAA4BpC,cAA5B,CAA5B;AACA,UAAIqC,qBAAqB,GAAG,KAAKC,sBAAL,CAA4BvC,0BAA5B,CAA5B;AACA,UAAIwC,eAAe,GAAG,KAAKC,gBAAL,CAAsB3C,aAAtB,CAAtB;AACA,UAAI4C,aAAa,GAAG,KAAKC,gBAAL,CAAsB/C,sBAAtB,EAA8CC,oBAA9C,CAApB;AACA,UAAI+C,cAAc,GAAG,KAAKC,eAAL,CAAqBpD,mBAArB,CAArB;;AAEA,UAAImD,cAAJ,EAAoB;AAChB,YAAIJ,eAAJ,EAAqB;AACjB,cAAIF,qBAAJ,EAA2B;AACvB,gBAAII,aAAJ,EAAmB;AACf,kBAAIN,qBAAJ,EAA2B;AAEvB,oBAAI9D,eAAe,GAAG;AAClBV,kBAAAA,YAAY,EAAE6B,mBADI;AAElBxB,kBAAAA,aAAa,EAAE6B,aAFG;AAGlB5B,kBAAAA,mBAAmB,EAAE8B,0BAHH;AAIlBM,kBAAAA,SAAS,EAAEV,sBAJO;AAKlBW,kBAAAA,OAAO,EAAEV,oBALS;AAMlBW,kBAAAA,QAAQ,EAAEP;AANQ,iBAAtB;AASA,uBAAO,CAAC,IAAD,EAAO3B,eAAP,CAAP;AACH;AACJ;AAEJ;AACJ;AACJ,OAzCgE,CA2CjE;;;AACA,aAAO,CAAC,KAAD,EAAQ,EAAR,CAAP;AACH,KAvjBwB;;AAAA,SAyjBjBuE,eAzjBiB,GAyjBEC,cAAD,IAA4B;AAElD,UAAIA,cAAc,KAAK,EAAvB,EAA2B;AAEvB,YAAIA,cAAc,CAACzD,MAAf,IAAyB,CAA7B,EAAgC;AAE5B,cAAIyD,cAAc,CAACzD,MAAf,IAAyB,EAA7B,EAAiC;AAC7B,mBAAO,IAAP;AACH;AACJ;AACJ;;AAED,WAAKtC,qBAAL,CAA2B,qDAA3B;AACA,aAAO,KAAP;AACH,KAvkBwB;;AAAA,SAykBjB0F,gBAzkBiB,GAykBGM,QAAD,IAAsB;AAE7C,UAAIA,QAAQ,GAAG,CAAf,EAAkB;AACd,eAAO,IAAP;AACH;;AAED,WAAKhG,qBAAL,CAA2B,qCAA3B;AACA,aAAO,KAAP;AACH,KAjlBwB;;AAAA,SAmlBjBwF,sBAnlBiB,GAmlBSS,qBAAD,IAAmC;AAEhE,UAAIA,qBAAqB,KAAK,EAA9B,EAAkC;AAE9B,YAAIA,qBAAqB,CAAC3D,MAAtB,IAAgC,CAApC,EAAuC;AAEnC,cAAI2D,qBAAqB,CAAC3D,MAAtB,IAAgC,GAApC,EAAyC;AACrC,mBAAO,IAAP;AACH;AACJ;AACJ;;AAED,WAAKtC,qBAAL,CAA2B,6DAA3B;AACA,aAAO,KAAP;AACH,KAjmBwB;;AAAA,SAmmBjB4F,gBAnmBiB,GAmmBE,CAACM,oBAAD,EAA+BC,kBAA/B,KAA+D;AAEtF,UAAID,oBAAoB,KAAK,EAA7B,EAAiC;AAC7B,YAAIA,oBAAoB,KAAKrB,SAA7B,EAAwC;AACpC,cAAIsB,kBAAkB,KAAK,EAA3B,EAA+B;AAC3B,gBAAIA,kBAAkB,KAAKtB,SAA3B,EAAsC;AAElC,kBAAIuB,WAAW,GAAG,IAAIC,IAAJ,GAAWC,QAAX,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAlB;AACA,kBAAI/C,SAAS,GAAG,IAAI8C,IAAJ,CAASH,oBAAT,EAA+BI,QAA/B,CAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAhB;AACA,kBAAI9C,OAAO,GAAG,IAAI6C,IAAJ,CAASF,kBAAT,EAA6BG,QAA7B,CAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAd;;AAEA,kBAAI/C,SAAS,IAAI6C,WAAjB,EAA8B;AAC1B,oBAAI5C,OAAO,GAAGD,SAAd,EAAyB;AACrB,yBAAO,IAAP;AACH,iBAFD,MAIK;AACD,uBAAKvD,qBAAL,CAA2B,sDAA3B;AACA,yBAAO,KAAP;AACH;AACJ,eATD,MAWK;AACD,qBAAKA,qBAAL,CAA2B,4CAA3B;AACA,uBAAO,KAAP;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,WAAKA,qBAAL,CAA2B,qCAA3B;AACA,aAAO,KAAP;AACH,KApoBwB;;AAAA,SAsoBjBsF,sBAtoBiB,GAsoBSiB,kBAAD,IAAgC;AAE7D,UAAIA,kBAAkB,KAAK,EAA3B,EAA+B;AAC3B,YAAIA,kBAAkB,CAACjE,MAAnB,IAA6B,EAAjC,EAAqC;AACjC,cAAIiE,kBAAkB,CAACjE,MAAnB,IAA6B,GAAjC,EAAsC;AAClC,mBAAO,IAAP;AACH;AACJ;AACJ;;AAED,WAAKtC,qBAAL,CAA2B,oDAA3B;AACA,aAAO,KAAP;AACH,KAlpBwB;;AAAA,SAopBjBxB,sBAppBiB,GAopBSD,kBAAD,IAAkC;AAE/DpB,MAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAEtC,UAAU,CAACqE,WAAlB;AAA+B7B,QAAAA,OAAO,EAAEtB;AAAxC,OAAf;AACH,KAvpBwB;;AAAA,SAypBjBG,6BAzpBiB,GAypBgBD,8BAAD,IAA8C;AAElF;AAEA;AACA,UAAI+H,iBAAiB,GAAG/H,8BAA8B,CAAC0B,UAAvD;AACA,UAAIsG,2CAAmD,GAAG,KAAKhG,8BAAL,CAAoC+F,iBAApC,CAA1D;AACA,UAAIhG,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BuE,iBAA5B,CAAlD,CAPkF,CASlF;;AACArJ,MAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAEtC,UAAU,CAAC6E,cAAlB;AAAkCrC,QAAAA,OAAO,EAAE;AAACW,UAAAA,mCAAD;AAAsC/B,UAAAA;AAAtC;AAA3C,OAAf,EAVkF,CAYlF;;AACA,UAAIgI,2CAA2C,KAAK,CAAC,CAArD,EAAwD;AACpDtJ,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAACqJ,sBAAlB;AAA0C7G,UAAAA,OAAO,EAAE;AAAC4G,YAAAA,2CAAD;AAA8ChI,YAAAA;AAA9C;AAAnD,SAAf;AACH;AACJ,KAzqBwB;;AAAA,SA2qBjBG,yBA3qBiB,GA2qBYD,iBAAD,IAA+B;AAE/D;AAEA;AACA,UAAI8H,2CAAmD,GAAG,KAAKhG,8BAAL,CAAoC9B,iBAApC,CAA1D;AACA,UAAI6B,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BtD,iBAA5B,CAAlD,CAN+D,CAQ/D;;AACAxB,MAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAEtC,UAAU,CAACsJ,yBAAlB;AAA6C9G,QAAAA,OAAO,EAAEW;AAAtD,OAAf,EAT+D,CAW/D;;AACA,UAAIiG,2CAA2C,KAAK,CAAC,CAArD,EAAwD;AAEpDtJ,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAACuJ,iCAAlB;AAAqD/G,UAAAA,OAAO,EAAE4G;AAA9D,SAAf;AACH;AACJ,KA3rBwB;;AAAA,SA6rBjB5H,yCA7rBiB,GA6rB4BF,iBAAD,IAA+B;AAE/E;AAEA;AACA,UAAI6B,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BtD,iBAA5B,CAAlD;AACA,UAAIkI,2CAAmD,GAAG,KAAKpG,8BAAL,CAAoC9B,iBAApC,CAA1D;AAEA,UAAImI,iBAAiB,GAAG3J,KAAK,CAAC+B,QAAN,GAAiBD,YAAjB,CAA8BuB,mCAA9B,EAAmEiC,cAAnE,GAAoF,CAA5G;;AAGA,UAAIoE,2CAA2C,KAAK,CAAC,CAArD,EAAwD;AAEpD;AACA1J,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAAC0J,sCAAlB;AAA0DlH,UAAAA,OAAO,EAAE;AAACgH,YAAAA,2CAAD;AAA8CC,YAAAA;AAA9C;AAAnE,SAAf;AACH,OAf8E,CAiB/E;;;AACA3J,MAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAEtC,UAAU,CAAC2J,8BAAlB;AAAkDnH,QAAAA,OAAO,EAAE;AAACW,UAAAA,mCAAD;AAAsCsG,UAAAA;AAAtC;AAA3D,OAAf;AACH,KAhtBwB;;AAAA,SAktBjBhI,yCAltBiB,GAktB4BH,iBAAD,IAA+B;AAE/E;AAEA;AACA,UAAI6B,mCAA2C,GAAG,KAAKyB,sBAAL,CAA4BtD,iBAA5B,CAAlD;AACA,UAAIkI,2CAAmD,GAAG,KAAKpG,8BAAL,CAAoC9B,iBAApC,CAA1D;AAEA,UAAImI,iBAAiB,GAAG3J,KAAK,CAAC+B,QAAN,GAAiBD,YAAjB,CAA8BuB,mCAA9B,EAAmEiC,cAAnE,GAAoF,CAA5G;;AAEA,UAAIoE,2CAA2C,KAAK,CAAC,CAArD,EAAwD;AAEpD;AACA1J,QAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAEtC,UAAU,CAAC4J,sCAAlB;AAA0DpH,UAAAA,OAAO,EAAE;AAACgH,YAAAA,2CAAD;AAA8CC,YAAAA;AAA9C;AAAnE,SAAf;AACH,OAd8E,CAgB/E;;;AACA3J,MAAAA,KAAK,CAACuC,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAEtC,UAAU,CAAC6J,8BAAlB;AAAkDrH,QAAAA,OAAO,EAAE;AAACW,UAAAA,mCAAD;AAAsCsG,UAAAA;AAAtC;AAA3D,OAAf;AACH,KApuBwB;;AAAA,SA0uBjB9G,qBA1uBiB,GA0uBQD,YAAD,IAA0B;AAEtD;AAEA,UAAIoH,QAAwB,GAAGrG,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA/B;AACAoG,MAAAA,QAAQ,CAACC,SAAT,GAAqB,MAArB;AACAD,MAAAA,QAAQ,CAACE,WAAT,GAAuBtH,YAAvB;AAEAuH,MAAAA,UAAU,CAAC,YAAW;AAClBH,QAAAA,QAAQ,CAACC,SAAT,GAAqBD,QAAQ,CAACC,SAAT,CAAmBG,OAAnB,CAA2B,MAA3B,EAAmC,EAAnC,CAArB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KArvBwB;;AAAA,SAuvBjBC,8BAvvBiB,GAuvBiBC,mBAAD,IAAiC;AAEtE;AAEA,YAAMC,uBAAuB,GAAG5G,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAhC;AACA2G,MAAAA,uBAAuB,CAAC/E,KAAxB,GAAgC8E,mBAAhC;AACH,KA7vBwB;;AAAA,SA+vBjBE,+BA/vBiB,GA+vBkBC,oBAAD,IAAkC;AAExE;AAEA,YAAMC,wBAAwB,GAAG/G,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAAjC;AACA8G,MAAAA,wBAAwB,CAAC7E,aAAzB,GAAyC4E,oBAAzC;AACH,KArwBwB;;AAAA,SAuwBjBE,+BAvwBiB,GAuwBiB,CAACC,wBAAD,EAAmCC,sBAAnC,KAAsE;AAE5G;AAEA,YAAMC,kBAAkB,GAAGnH,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAA3B;AACA,YAAMmH,gBAAgB,GAAGpH,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAzB,CAL4G,CAO5G;;AACA,UAAI2C,aAAa,GAAG,CAACqE,wBAAwB,CAACpE,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAArB;AACA,UAAIC,cAAc,GAAG,CAACmE,wBAAwB,CAACpE,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAtB;AACA,UAAIE,YAAY,GAAG,CAACkE,wBAAwB,CAACpE,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAApB;AACA,UAAIG,aAAa,GAAGJ,aAAa,GAAC,GAAd,GAAkBE,cAAlB,GAAiC,GAAjC,GAAqCC,YAAzD,CAX4G,CAa5G;;AACA,UAAIE,WAAW,GAAG,CAACiE,sBAAsB,CAACrE,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAnB;AACA,UAAIK,YAAY,GAAG,CAACgE,sBAAsB,CAACrE,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAApB;AACA,UAAIM,UAAU,GAAG,CAAC+D,sBAAsB,CAACrE,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAlB;AACA,UAAIO,WAAW,GAAGH,WAAW,GAAC,GAAZ,GAAgBC,YAAhB,GAA6B,GAA7B,GAAiCC,UAAnD;AAEAgE,MAAAA,kBAAkB,CAACE,WAAnB,GAAiC,IAAI9B,IAAJ,CAASvC,aAAT,CAAjC;AACAoE,MAAAA,gBAAgB,CAACC,WAAjB,GAA+B,IAAI9B,IAAJ,CAASnC,WAAT,CAA/B;AACH,KA5xBwB;;AAAA,SA8xBjBkE,qCA9xBiB,GA8xBwBC,0BAAD,IAAwC;AAEpF;AAEA,YAAMC,4BAA4B,GAAGxH,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CAArC;AACAuH,MAAAA,4BAA4B,CAAC3F,KAA7B,GAAqC0F,0BAArC;AACH,KApyBwB;;AAAA,SAsyBjBE,+BAtyBiB,GAsyBkBC,uBAAD,IAAqC;AAE3E,YAAMC,sBAAsB,GAAG3H,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAA/B;AACA0H,MAAAA,sBAAsB,CAAC9F,KAAvB,GAA+B6F,uBAA/B;AACH,KA1yBwB;;AAAA,SA4yBjBxD,oBA5yBiB,GA4yBM,MAAM;AAEjC;AAEA,YAAMpE,kBAAkB,GAAGE,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAA3B;AACA,YAAM2H,eAAe,GAAG5H,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAxB;AACA,YAAM4H,iBAAiB,GAAG7H,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAA1B;AAEAH,MAAAA,kBAAkB,CAACgI,KAAnB,CAAyBC,OAAzB,GAAmC,OAAnC,CARiC,CAWjC;;AAEAF,MAAAA,iBAAiB,CAACG,OAAlB,GAA4B,MAAM;AAAC,aAAKnH,SAAL,CAAef,kBAAf;AAAmC,OAAtE;;AAEA8H,MAAAA,eAAe,CAACI,OAAhB,GAA0B,MAAM;AAE5B,aAAKnI,WAAL,CAAiBC,kBAAjB;AACH,OAHD;;AAKAmI,MAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAkCC,KAAD,IAAuB;AACpD,YAAIA,KAAK,CAACC,MAAN,KAAiBtI,kBAArB,EAAyC;AACrC,eAAKe,SAAL,CAAef,kBAAf;AACH;AACJ,OAJD;AAKH,KAr0BwB;;AAAA,SAu0BjBsE,gBAv0BiB,GAu0BGhF,eAAD,IAA+B;AAEtD;AAEA,YAAM2B,mBAAmB,GAAGf,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAA5B;AACA,YAAMoI,aAAa,GAAGrI,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAtB;AACA,YAAMqI,eAAe,GAAGtI,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAxB;AACA,YAAMsI,gBAAgB,GAAGvI,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAzB;AACA,YAAMuI,kBAAkB,GAAGxI,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAA3B,CARsD,CAWtD;;AAEA,WAAKyG,8BAAL,CAAoCtH,eAAe,CAACW,YAApD;AACA,WAAK8G,+BAAL,CAAqCzH,eAAe,CAACgB,aAArD;AACA,WAAKkH,qCAAL,CAA2ClI,eAAe,CAACiB,mBAA3D;AACA,WAAK2G,+BAAL,CAAqC5H,eAAe,CAACqD,SAArD,EAAgErD,eAAe,CAACsD,OAAhF;AACA,WAAK+E,+BAAL,CAAqCrI,eAAe,CAACuD,QAArD;AAGA5B,MAAAA,mBAAmB,CAAC+G,KAApB,CAA0BC,OAA1B,GAAoC,OAApC;AACAO,MAAAA,eAAe,CAAC/B,WAAhB,GAA+B,UAASnH,eAAe,CAACW,YAAa,EAArE;AACAsI,MAAAA,aAAa,CAACI,GAAd,GAAoBrJ,eAAe,CAACuD,QAApC,CAtBsD,CAyBtD;;AAEA6F,MAAAA,kBAAkB,CAACR,OAAnB,GAA6B,MAAM;AAAC,aAAKnH,SAAL,CAAeE,mBAAf;AAAoC,OAAxE;;AAEAwH,MAAAA,gBAAgB,CAACP,OAAjB,GAA2B,MAAM;AAE7B,aAAKlH,cAAL,CAAoB1B,eAApB,EAAqC2B,mBAArC;AACH,OAHD;;AAKAkH,MAAAA,MAAM,CAACD,OAAP,GAAiB,UAASG,KAAT,EAA6B;AAE1C,YAAIA,KAAK,CAACC,MAAN,KAAiBrH,mBAArB,EAA0C;AACtCA,UAAAA,mBAAmB,CAAC+G,KAApB,CAA0BC,OAA1B,GAAoC,MAApC;AACH;AACJ,OALD;AAMH,KA/2BwB;;AAAA,SAi3BjBzD,oBAj3BiB,GAi3BOlF,eAAD,IAA+B;AAE1D,UAAIvB,iBAAyB,GAAGuB,eAAe,CAACC,UAAhD;AAEA,YAAMqJ,uBAAuB,GAAG1I,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAAhC;AACA,YAAM0I,mBAAmB,GAAG3I,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAA5B;AACA,YAAM2I,0BAA0B,GAAG5I,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAnC;AACA,YAAM4I,SAAS,GAAG7I,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAlB;AACA,YAAM6I,aAAa,GAAG9I,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAtB;AACA,YAAM8I,yBAAyB,GAAG/I,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CAAlC;AAEAyI,MAAAA,uBAAuB,CAACZ,KAAxB,CAA8BC,OAA9B,GAAwC,OAAxC;AACAY,MAAAA,mBAAmB,CAACpC,WAApB,GAAkC,uBAAlC;AACAqC,MAAAA,0BAA0B,CAACrC,WAA3B,GAA0C,uCAA1C;AACAwC,MAAAA,yBAAyB,CAACxC,WAA1B,GAAyC,GAAEnH,eAAe,CAACW,YAAa,IAAxE,CAd0D,CAiB1D;;AAEA+I,MAAAA,aAAa,CAACd,OAAd,GAAwB,MAAM;AAAC,aAAKnH,SAAL,CAAe6H,uBAAf;AAAwC,OAAvE;;AAEAG,MAAAA,SAAS,CAACb,OAAV,GAAoB,MAAM;AACtB,aAAK3G,cAAL,CAAoBxD,iBAApB;AACA,aAAKgD,SAAL,CAAe6H,uBAAf;AACH,OAHD;;AAKAT,MAAAA,MAAM,CAACD,OAAP,GAAiB,UAASG,KAAT,EAA6B;AAE1C,YAAIA,KAAK,CAACC,MAAN,KAAiBM,uBAArB,EAA8C;AAC1CA,UAAAA,uBAAuB,CAACZ,KAAxB,CAA8BC,OAA9B,GAAwC,MAAxC;AACH;AACJ,OALD;AAMH,KAj5BwB;;AAAA,SAm5BjBiB,gBAn5BiB,GAm5BE,MAAM;AAE7B;AAEA,UAAIC,sBAAsB,GAAGjJ,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAA7B;AACA,UAAIiJ,2BAA2B,GAAGlJ,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAlC;AACA,UAAIkJ,yBAAyB,GAAGnJ,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhC;AACA,UAAImJ,uBAAuB,GAAGpJ,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAA9B;AACA,UAAIoJ,6BAA6B,GAAGrJ,QAAQ,CAACC,cAAT,CAAwB,0BAAxB,CAApC;AACA,UAAIqJ,0BAA0B,GAAGtJ,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAAjC;AAEAgJ,MAAAA,sBAAsB,CAACpH,KAAvB,GAA+B,EAA/B;AACAqH,MAAAA,2BAA2B,CAACrH,KAA5B,GAAoC,EAApC;AACAsH,MAAAA,yBAAyB,CAACtH,KAA1B,GAAkC,EAAlC;AACAuH,MAAAA,uBAAuB,CAAClH,aAAxB,GAAwC,CAAxC;AACAmH,MAAAA,6BAA6B,CAACxH,KAA9B,GAAsC,EAAtC;AACAyH,MAAAA,0BAA0B,CAACzH,KAA3B,GAAmC,EAAnC;AACH,KAp6BwB;;AAAA,SAs6BjBhB,SAt6BiB,GAs6BJ0I,KAAD,IAAgB;AAEhCA,MAAAA,KAAK,CAACzB,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;AACA,WAAKiB,gBAAL;AACH,KA16BwB;;AAGrB,SAAKQ,KAAL,GAAa;AACTrL,MAAAA,YAAY,EAAG,IAAIsL,KAAJ;AADN,KAAb;AAGH,GAZgE,CAejE;;;AAo6BAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAqC,MAAA,EAAE,EAAC,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKtM,uBAAL,KAAiC,OAAjC,gBACG;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAmD,KAAKoM,KAAL,CAAWrL,YAAX,CAAwBqD,MAA3E,4BADH,gBAGG;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAmD,KAAKgI,KAAL,CAAWrL,YAAX,CAAwBqD,MAA3E,iCAJR,CAJJ,eAYI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIK,KAAKpE,uBAAL,KAAiC,OAAjC,iBAGG;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,OAAO,EAAE,KAAK6G,yBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,CAPR,EAeQ,KAAKuF,KAAL,CAAWrL,YAAX,CAAwBqD,MAAxB,GAAiC,CAAjC,GAEA;AAEA,SAAKgI,KAAL,CAAWrL,YAAX,CAAwBwL,GAAxB,CAA6B,CAACC,QAAD,EAAsBC,KAAtB,kBACzB,oBAAC,iBAAD;AAAmB,MAAA,GAAG,EAAEA,KAAxB;AAA+B,MAAA,QAAQ,EAAGD,QAA1C;AAAoD,MAAA,uBAAuB,EAAG,KAAKvG,uBAAnF;AACoB,MAAA,mCAAmC,EAAG,KAAKE,mCAD/D;AACoG,MAAA,uBAAuB,EAAG,KAAKc,uBADnI;AAEoB,MAAA,qBAAqB,EAAG,KAAKF,qBAFjD;AAEwE,MAAA,uBAAuB,EAAI,KAAK/G,uBAFxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJA,CAWA;AAXA;AAAA;AAaA;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,GAAG,EAAEX,aAApC;AAAmD,MAAA,GAAG,EAAC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFJ,CA5BR,CAZJ,CAFJ,eAyDI;AAAK,MAAA,EAAE,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAC,qBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,eAEI;AAAG,MAAA,EAAE,EAAC,mBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAI,MAAA,EAAE,EAAC,2BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHJ,eAKI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAA0B,MAAA,GAAG,EAAEqN,SAA/B;AAA0C,MAAA,GAAG,EAAC,uBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,eAOI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,EAAE,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CAPJ,CADJ,CAzDJ,eA0EI;AAAK,MAAA,EAAE,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAC,iBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,eAGI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAwB,MAAA,GAAG,EAAC,wBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAKI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,oBAAd;AAAmC,MAAA,KAAK,EAAC,MAAzC;AAAgD,MAAA,OAAO,EAAC,UAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI;AAAK,MAAA,EAAE,EAAC,kBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAHJ,eASI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,qBAAd;AAAoC,MAAA,IAAI,EAAC,QAAzC;AAAkD,MAAA,KAAK,EAAC,OAAxD;AAAgE,MAAA,OAAO,EAAC,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,eAWI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,2BAAd;AAA0C,MAAA,KAAK,EAAC,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,eAaI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,wBAAd;AAAuC,MAAA,KAAK,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CALJ,eAqBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,EAAE,EAAC,oBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,MAAA,EAAE,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CArBJ,CADJ,CA1EJ,eAyGI;AAAK,MAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAC,gBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAGI;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,GAAG,EAAEC,gBAA5B;AAA8C,MAAA,GAAG,EAAC,wBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAKI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,mBAAd;AAAkC,MAAA,KAAK,EAAC,MAAxC;AAA+C,MAAA,OAAO,EAAC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAHJ,eASI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,oBAAd;AAAmC,MAAA,IAAI,EAAC,QAAxC;AAAiD,MAAA,KAAK,EAAC,OAAvD;AAA+D,MAAA,OAAO,EAAC,UAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,eAWI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,0BAAd;AAAwC,MAAA,KAAK,EAAC,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,eAaI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,uBAAd;AAAsC,MAAA,KAAK,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CALJ,eAqBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,EAAE,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,MAAA,EAAE,EAAC,iBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CArBJ,CADJ,CAzGJ,eAwII;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxIJ,CADJ;AA4IH;;AAhkCgE;AAmkCrE,eAAevN,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport deleteSVG from '../../assets/deleteSVG.svg';\r\nimport spinningEarthSVG from '../../assets/spinningEarthSVG.svg';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\r\nimport VacationComponent from '../vacationComponent/VacationComponent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './allVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n    private userTypeFromServerCache: string;\r\n    private socket: any;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        this.socket = socketIOClient('http://localhost:3002');\r\n        \r\n\r\n        // ----------- MAKE A FUNCTION THAT REGISTERS ALL THESE 'ON' LISTENERS -----------\r\n\r\n        this.socket.on('add-vacation', (newlyAddedVacation: Vacation) => {\r\n\r\n            this.addVacationViaSocketIO(newlyAddedVacation);\r\n        });\r\n\r\n        this.socket.on('update-vacation-info', (convertedValidDataForUIDisplay: Vacation) => {\r\n\r\n            this.updateVacationInfoViaSocketIO(convertedValidDataForUIDisplay);\r\n        });\r\n\r\n        this.socket.on('delete-vacation', (clickedVacationID: number) => {\r\n\r\n            this.deleteVacationViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n        this.socket.on('increase-vacation-followers-count', (clickedVacationID: number) => {\r\n\r\n            this.increaseVacationFollowersCountViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n        this.socket.on('decrease-vacation-followers-count', (clickedVacationID: number) => {\r\n\r\n            this.decreaseVacationFollowersCountViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n\r\n\r\n        // Optimizing a bit the memory leak of the store listener. Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            \r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n\r\n        // Getting The User's Type From The Server's Cache.\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            await this.getUserTypeFromServer();\r\n        }\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n\r\n        // Getting all the vacations from the server and inserting them to the Global Store\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations: Vacation[] = response.data;\r\n\r\n            \r\n            // Insert all the vacations from the server to the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function occurs after validations approved that this vacation can be liked by the user\r\n\r\n        interceptorHandler();\r\n\r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Sending a socket command to the server, in order to inform all clients about the new updated vacation\r\n            this.socket.emit('increase-vacation-followers-count', clickedVacationID);\r\n\r\n            // Updating The Global Store\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function is designated to make the user 'unfollow' a vacation\r\n        interceptorHandler();\r\n\r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n            let indexOfClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n            // Sending a socket command to the server, in order to inform all clients about the new updated vacation\r\n            this.socket.emit('decrease-vacation-followers-count', clickedVacationID);\r\n\r\n            // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\r\n            store.dispatch({type: ActionType.UnfollowVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private addVacation = async (addModalBackground: any) => {\r\n\r\n        const vacationName: HTMLInputElement = document.getElementById(\"addedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.getElementById(\"addStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.getElementById(\"addEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.getElementById(\"addedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.getElementById(\"addedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.getElementById(\"addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        let allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n        \r\n        // Validating all fields of the added vacation are valid\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let serverResponse = await axios.post<Vacation[]>(`http://localhost:3001/vacations/add_vacation`, newVacationData);\r\n                let newlyAddedVacation: Vacation = serverResponse.data[0];\r\n\r\n\r\n                // ------- Updating the Global Store (Updating the UI with the newly added vacation)\r\n                store.dispatch({type: ActionType.AddVacation, payload: newlyAddedVacation });\r\n\r\n                this.socket.emit('add-vacation', newlyAddedVacation);\r\n\r\n                this.hideModal(addModalBackground);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateVacation = async (clickedVacation : Vacation, editModalBackground: any) => {\r\n\r\n        const allInputsArr = this.getAllInputsArrForUpdatedVacation();\r\n        \r\n        // Validating all fields of the updated vacation are valid, and getting back the valid data\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            // Converting the data to for suitable UI display -> preventing retrieving the updated vacation from the DB\r\n            const convertedValidDataForUIDisplay = this.convertVacationDataForUIDisplay(allInputsArr, clickedVacation);\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let clickedVacationID: number = clickedVacation.vacationID;\r\n                await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData);\r\n\r\n                // Updating the Global Store localy (Updating the UI with the newly updated vacation data localy -> preventing calling for the DB)\r\n                let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n                store.dispatch({type: ActionType.UpdateVacation, payload: {indexOfClickedVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n\r\n                this.hideModal(editModalBackground);\r\n\r\n                // Sending a socket command to the server, in order to inform all clients about the new updated vacation\r\n                this.socket.emit('update-vacation-info', convertedValidDataForUIDisplay);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private deleteVacation = async (clickedVacationID: number) => {\r\n\r\n        interceptorHandler();\r\n\r\n        try {\r\n\r\n            await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`);\r\n\r\n            let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n\r\n            // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store\r\n            store.dispatch({type: ActionType.DeleteVacation, payload: indexOfClickedVacationInGlobalStore});\r\n\r\n            // Sending a socket command to the server, in order to inform all clients about the new updated vacation\r\n            this.socket.emit('delete-vacation', clickedVacationID);\r\n        }\r\n        \r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private getUserTypeFromServer = async () => {\r\n\r\n        try {\r\n            this.userTypeFromServerCache = await getUserTypeFromServerCache();\r\n        }\r\n\r\n        catch (error) {\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the global store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private convertVacationDataForUIDisplay = (inputsArr : HTMLInputElement[], clickedVacation: Vacation) => {\r\n\r\n        const clickedVacationID: number = clickedVacation.vacationID;\r\n        const clickedVacationFollowersCount: number = clickedVacation.followersCount;\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n\r\n        const convertedStartDate = this.convertStartDateForUIDisplay(vacationStartDateValue);\r\n        const convertedEndDate = this.convertEndDateForUIDisplay(vacationEndDateValue);\r\n\r\n        const convertedValidDataForUIDisplay = {\r\n            vacationID: clickedVacationID,\r\n            vacationName: newNameTrimmedValue,\r\n            startDate: convertedStartDate,\r\n            endDate: convertedEndDate,\r\n            vacationPrice: newPriceValue,\r\n            vacationDescription: newDescriptionTrimmedValue,\r\n            imageURL: newVacationURL,\r\n            followersCount: clickedVacationFollowersCount\r\n        }\r\n\r\n        return convertedValidDataForUIDisplay;\r\n    }\r\n\r\n    private convertStartDateForUIDisplay = (vacationStartDateValue: string) => {\r\n\r\n        let startDateYear = +vacationStartDateValue.split('-')[2];\r\n        let startDateMonth = +vacationStartDateValue.split('-')[1];\r\n        let startDateDay = +vacationStartDateValue.split('-')[0];\r\n        let fullStartDate = startDateYear+\"/\"+startDateMonth+\"/\"+startDateDay;\r\n\r\n        return fullStartDate;\r\n    }\r\n\r\n    private convertEndDateForUIDisplay = (vacationEndDateValue: string) => {\r\n\r\n        let endDateYear = +vacationEndDateValue.split('-')[2];\r\n        let endDateMonth = +vacationEndDateValue.split('-')[1];\r\n        let endDateDay = +vacationEndDateValue.split('-')[0];\r\n        let fullEndDate = endDateYear+\"/\"+endDateMonth+\"/\"+endDateDay;\r\n\r\n        return fullEndDate;\r\n    }\r\n\r\n    private getAllInputsArrForUpdatedVacation = () => {\r\n\r\n        const vacationName: HTMLInputElement = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.getElementById(\"editedVacationImageURL\") as HTMLInputElement;\r\n\r\n        const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n\r\n        return allInputsArr;\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the 'follow' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        \r\n\r\n        // If the user is currently logged in\r\n        if (isUserLogged) {\r\n\r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is already liked by the user, unfollow that vacation.\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateVacationIsNotLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        // Validating the vacation chosen is not already liked by the user\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find(\r\n            favoriteVacation => favoriteVacation.vacationID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let allVacations: Vacation[] = store.getState().allVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = allVacations.find( allVacations =>  allVacations.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = allVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private onVacationAdditionAttempt = () => {\r\n\r\n        /*\r\n            Before the 'add' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            this.displayAdditionModal();\r\n        }\r\n\r\n\r\n        // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationEditAttempt = (clickedVacation: Vacation) => {\r\n\r\n        /*\r\n            Before the 'edit' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to edit a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            this.displayEditModal(clickedVacation);\r\n        }\r\n\r\n\r\n        // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationDeleteAttempt = (clickedVacation: Vacation) => {\r\n\r\n        /*\r\n            Before the 'delete' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            this.displayDeletionModal(clickedVacation);\r\n        }\r\n\r\n\r\n        // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateNewVacationData = (inputsArr: HTMLInputElement[]) => {\r\n\r\n        // This function validates all the Modal's fields are valid\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n \r\n\r\n        // Validating all 'Edit' Modal fields are valid\r\n\r\n        let isNewVacationURLValie = this.validateNewVacationURL(newVacationURL);\r\n        let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\r\n        let isNewPriceValid = this.validateNewPrice(newPriceValue);\r\n        let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\r\n        let isNewNameValid = this.validateNewName(newNameTrimmedValue);\r\n\r\n        if (isNewNameValid) {\r\n            if (isNewPriceValid) {\r\n                if (isNewDescriptionValid) {\r\n                    if (areDatesValid) {\r\n                        if (isNewVacationURLValie) {\r\n\r\n                            let newVacationData = {\r\n                                vacationName: newNameTrimmedValue,\r\n                                vacationPrice: newPriceValue,\r\n                                vacationDescription: newDescriptionTrimmedValue,\r\n                                startDate: vacationStartDateValue,\r\n                                endDate: vacationEndDateValue,\r\n                                imageURL: newVacationURL,\r\n                            };\r\n    \r\n                            return [true, newVacationData];\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // In case one of the parameters of the updated vacation is not valid\r\n        return [false, {}];\r\n    }\r\n\r\n    private validateNewName = (newTrimmedName: string) => {\r\n\r\n        if (newTrimmedName !== \"\") {\r\n\r\n            if (newTrimmedName.length >= 3) {\r\n\r\n                if (newTrimmedName.length <= 44) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewPrice = (newPrice: number) => {\r\n\r\n        if (newPrice > 0) {\r\n            return true;\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new price must be larger than 0\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDescription = (newTrimmedDescription: string) => {\r\n\r\n        if (newTrimmedDescription !== \"\") {\r\n\r\n            if (newTrimmedDescription.length >= 5) {\r\n\r\n                if (newTrimmedDescription.length <= 249) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDates = (newVacationStartDate: string, newVacationEndDate: string ) => {\r\n\r\n        if (newVacationStartDate !== \"\") {\r\n            if (newVacationStartDate !== undefined) {\r\n                if (newVacationEndDate !== \"\") {\r\n                    if (newVacationEndDate !== undefined) {\r\n\r\n                        let currentDate = new Date().setHours(0, 0, 0, 0);\r\n                        let startDate = new Date(newVacationStartDate).setHours(0, 0, 0, 0);\r\n                        let endDate = new Date(newVacationEndDate).setHours(0, 0, 0, 0);\r\n\r\n                        if (startDate >= currentDate) {\r\n                            if (endDate > startDate) {\r\n                                return true;\r\n                            }\r\n\r\n                            else {\r\n                                this.vacationsErrorHandler(\"The return date must be later than the starting date\");\r\n                                return false;\r\n                            }\r\n                        }\r\n\r\n                        else {\r\n                            this.vacationsErrorHandler(\"The starting date must be later than today\");\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewVacationURL = (newTrimmedImageURL: string) => {\r\n\r\n        if (newTrimmedImageURL !== \"\") {\r\n            if (newTrimmedImageURL.length >= 10) {\r\n                if (newTrimmedImageURL.length <= 998) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Image URL must be between 10 - 998 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private addVacationViaSocketIO = (newlyAddedVacation: Vacation) => {\r\n\r\n        store.dispatch({type: ActionType.AddVacation, payload: newlyAddedVacation});\r\n    }\r\n\r\n    private updateVacationInfoViaSocketIO = (convertedValidDataForUIDisplay: Vacation) => {\r\n\r\n        // Updating the vacation that was updated by the admin, in the user's UI, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let updatedVacationID = convertedValidDataForUIDisplay.vacationID;\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(updatedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(updatedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.UpdateVacation, payload: {indexOfClickedVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n            store.dispatch({type: ActionType.UpdateFavoriteVacation, payload: {indexOfClickedFavoriteVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n        }\r\n    }\r\n\r\n    private deleteVacationViaSocketIO = (clickedVacationID: number) => {\r\n        \r\n        // Updating the vacation that was updated by the admin, in the user's UI, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.DeleteVacationViaSocketIO, payload: indexOfClickedVacationInGlobalStore });\r\n\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n\r\n            store.dispatch({type: ActionType.DeleteFavoriteVacationViaSocketIO, payload: indexOfClickedFavoriteVacationInGlobalStore });\r\n        }\r\n    }\r\n\r\n    private increaseVacationFollowersCountViaSocketIO = (clickedVacationID: number) => {\r\n\r\n        // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount + 1;\r\n        \r\n        \r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n\r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.IncreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.IncreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n    }\r\n\r\n    private decreaseVacationFollowersCountViaSocketIO = (clickedVacationID: number) => {\r\n\r\n        // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n        \r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount - 1;\r\n\r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n\r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.DecreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.DecreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private displayVacationNameInEditModal = (clickedVacationName: string) => {\r\n\r\n        // Displaying 'Edit' Modal Name\r\n\r\n        const editedVacationNameField = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        editedVacationNameField.value = clickedVacationName;\r\n    }\r\n\r\n    private displayVacationPriceInEditModal = (clickedVacationPrice: number) => {\r\n\r\n        // Dusplaying 'Edit' Modal Price\r\n\r\n        const editedVacationPriceField = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        editedVacationPriceField.valueAsNumber = clickedVacationPrice;\r\n    }\r\n\r\n    private displayVacationDatesInEditModal = (clickedVacationStartDate: string, clickedVacationEndDate: string) => {\r\n\r\n        // Displaying 'Edit' Modal Dates\r\n\r\n        const editStartDateField = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const editEndDateField = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n\r\n        // Start Date\r\n        let startDateYear = +clickedVacationStartDate.split('/')[2];\r\n        let startDateMonth = +clickedVacationStartDate.split('/')[1];\r\n        let startDateDay = +clickedVacationStartDate.split('/')[0];\r\n        let fullStartDate = startDateYear+\"-\"+startDateMonth+\"-\"+startDateDay;\r\n\r\n        // End Date\r\n        let endDateYear = +clickedVacationEndDate.split('/')[2];\r\n        let endDateMonth = +clickedVacationEndDate.split('/')[1];\r\n        let endDateDay = +clickedVacationEndDate.split('/')[0];\r\n        let fullEndDate = endDateYear+\"-\"+endDateMonth+\"-\"+endDateDay;\r\n        \r\n        editStartDateField.valueAsDate = new Date(fullStartDate);\r\n        editEndDateField.valueAsDate = new Date(fullEndDate);\r\n    }\r\n\r\n    private displayVacationDescriptionInEditModal = (clickedVacationDescription: string) => {\r\n\r\n        // Displaying 'Edit' Modal Description\r\n\r\n        const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        editVacationDescriptionField.value = clickedVacationDescription;\r\n    }\r\n\r\n    private displayVacationImageInEditModal = (clickedVacationImageURL: string) => {\r\n        \r\n        const editedVacationImageURL = document.getElementById(\"editedVacationImageURL\") as HTMLInputElement;\r\n        editedVacationImageURL.value = clickedVacationImageURL;\r\n    }\r\n\r\n    private displayAdditionModal = () => {\r\n\r\n        // Defining the 'Add' Modal in the UI\r\n\r\n        const addModalBackground = document.getElementById(\"addModalContainer\");\r\n        const addModalDoneBtn = document.getElementById(\"addModalDoneBtn\");\r\n        const addModalCancelBtn = document.getElementById(\"addModalCancelBtn\");\r\n\r\n        addModalBackground.style.display = \"block\";\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        addModalCancelBtn.onclick = () => {this.hideModal(addModalBackground)};\r\n\r\n        addModalDoneBtn.onclick = () => {\r\n\r\n            this.addVacation(addModalBackground);\r\n        };\r\n\r\n        window.addEventListener(\"click\", (event: MouseEvent) => {\r\n            if (event.target === addModalBackground) {\r\n                this.hideModal(addModalBackground);\r\n            }\r\n        })\r\n    }\r\n\r\n    private displayEditModal = (clickedVacation: Vacation) => {\r\n\r\n        // Defining the 'Edit' Modal in the UI\r\n\r\n        const editModalBackground = document.getElementById(\"editModalContainer\");\r\n        const editModalIcon = document.getElementById(\"editModalIcon\") as HTMLImageElement;\r\n        const editModalHeader = document.getElementById(\"editModalHeader\");\r\n        const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\r\n        const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\");\r\n\r\n\r\n        // Displaying the values inside the 'Edit' Modal\r\n\r\n        this.displayVacationNameInEditModal(clickedVacation.vacationName);\r\n        this.displayVacationPriceInEditModal(clickedVacation.vacationPrice);\r\n        this.displayVacationDescriptionInEditModal(clickedVacation.vacationDescription);\r\n        this.displayVacationDatesInEditModal(clickedVacation.startDate, clickedVacation.endDate);\r\n        this.displayVacationImageInEditModal(clickedVacation.imageURL);\r\n        \r\n\r\n        editModalBackground.style.display = \"block\";\r\n        editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\r\n        editModalIcon.src = clickedVacation.imageURL;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        editModalCancelBtn.onclick = () => {this.hideModal(editModalBackground)};\r\n\r\n        editModalDoneBtn.onclick = () => {\r\n\r\n            this.updateVacation(clickedVacation, editModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === editModalBackground) {\r\n                editModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private displayDeletionModal = (clickedVacation: Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\r\n        const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\r\n        const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\r\n        const deleteBtn = document.getElementById(\"deleteBtn\");\r\n        const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\r\n        const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\r\n\r\n        deletionModalBackground.style.display = \"block\";\r\n        deletionModalHeader.textContent = \"Confirm Your Deletion\";\r\n        deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\r\n        deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        dontDeleteBtn.onclick = () => {this.hideModal(deletionModalBackground)};\r\n\r\n        deleteBtn.onclick = () => {\r\n            this.deleteVacation(clickedVacationID);\r\n            this.hideModal(deletionModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === deletionModalBackground) {\r\n                deletionModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearModalInputs = () => {\r\n\r\n        // Clearing the inputs of the 'Add' Modal\r\n\r\n        let additionModalNameInput = document.getElementById(\"addedVacationName\") as HTMLInputElement;\r\n        let additionModalStartDateInput = document.getElementById(\"addStartDate\") as HTMLInputElement;\r\n        let additionModalEndDateInput = document.getElementById(\"addEndDate\") as HTMLInputElement;\r\n        let additionModalPriceInput = document.getElementById(\"addedVacationPrice\") as HTMLInputElement;\r\n        let additionModalDescriptionInput = document.getElementById(\"addedVacationDescription\") as HTMLInputElement;\r\n        let additionModalImageURLInput = document.getElementById(\"addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        additionModalNameInput.value = \"\";\r\n        additionModalStartDateInput.value = \"\";\r\n        additionModalEndDateInput.value = \"\";\r\n        additionModalPriceInput.valueAsNumber = 0;\r\n        additionModalDescriptionInput.value = \"\";\r\n        additionModalImageURLInput.value = \"\";\r\n    }\r\n\r\n    private hideModal = (modal: any) => {\r\n\r\n        modal.style.display = \"none\";\r\n        this.clearModalInputs();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                    {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                    <div className=\"headerContainer\">\r\n                        {this.userTypeFromServerCache === \"ADMIN\" ?\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations You Can Edit</h2>\r\n                            :\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You</h2>\r\n                        }\r\n                    </div>\r\n                \r\n                    <div className=\"allVacations\">\r\n\r\n                        {/* If The Current User Is An Admin, Show Him The 'Add Vacation' Button */}\r\n\r\n                        {this.userTypeFromServerCache === \"ADMIN\"\r\n                            &&\r\n\r\n                            <div className=\"addVacationSquare\" onClick={this.onVacationAdditionAttempt}>\r\n                                <div className=\"newVacationText\">\r\n                                    <h2 className=\"sharp-text\">New Vacation</h2>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                        {\r\n                            this.state.allVacations.length > 0 ?\r\n\r\n                            // ---------- In case the user type in the server's cache is type 'USER' ---------- //\r\n\r\n                            this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                                <VacationComponent key={index} vacation= {vacation} onVacationFollowAttempt= {this.onVacationFollowAttempt}\r\n                                                    validateVacationIsNotLikedByTheUser= {this.validateVacationIsNotLikedByTheUser} onVacationDeleteAttempt= {this.onVacationDeleteAttempt}\r\n                                                    onVacationEditAttempt= {this.onVacationEditAttempt} userTypeFromServerCache = {this.userTypeFromServerCache} />\r\n                            )\r\n                            \r\n\r\n                            // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\r\n                            :\r\n                            <div className=\"noVcationsSection\">\r\n                                <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                                <h1 className=\"sharp-text\">Oops, We Could Not Find Any Vacations</h1>\r\n                            </div>\r\n                        }\r\n                        \r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                {/* ---------------------------------------------- Modals and Snackbar ---------------------------------------------- */}\r\n\r\n                {/* --------------- The 'Deletion' Modal --------------- */}\r\n                <div id=\"deletionModalContainer\">\r\n                    <div id=\"deletionModal\">\r\n                        <h1 id=\"deletionModalHeader\">.</h1>\r\n                        <p id=\"deletionModalText\"></p>\r\n                        <h2 id=\"deletionModalVacationName\">.</h2>\r\n\r\n                        <img id=\"deleteModalIcon\" src={deleteSVG} alt=\"Delete Vacation Modal\" />\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"dontDeleteBtn\">Don't Delete</button>\r\n                            <button id=\"deleteBtn\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"editModalContainer\">\r\n                    <div id=\"editModal\">\r\n                        <h1 id=\"editModalHeader\">.</h1>\r\n\r\n                        <img id=\"editModalIcon\" alt=\"Add New Vacation Modal\" />\r\n\r\n                        <div id=\"editInputs\">\r\n                            <TextField id=\"editedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"editDatesSection\">\r\n                                <input type=\"date\" id=\"editStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" id=\"editEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"editedVacationPrice\" type=\"number\" label=\"Price\" variant=\"standard\" />\r\n\r\n                            <TextField id=\"editedVacationDescription\" label=\"Description\" />\r\n\r\n                            <TextField id=\"editedVacationImageURL\" label=\"Image URL\" />\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"editModalCancelBtn\">Cancel</button>\r\n                            <button id=\"editModalDoneBtn\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"addModalContainer\">\r\n                    <div id=\"addModal\">\r\n                        <h1 id=\"addModalHeader\">Add a New Vacation !</h1>\r\n\r\n                        <img id=\"addModalIcon\" src={spinningEarthSVG} alt=\"Vacation URL Is Broken\" />\r\n\r\n                        <div id=\"addInputs\">\r\n                            <TextField id=\"addedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"addDatesSection\">\r\n                                <input type=\"date\" id=\"addStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" id=\"addEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"addedVacationPrice\" type=\"number\" label=\"Price\" variant=\"standard\" />\r\n\r\n                            <TextField id=\"addedVacationDescription\"label=\"Description\" />\r\n\r\n                            <TextField id=\"addedVacationImageURL\" label=\"Image URL\" />\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"addModalCancelBtn\">Cancel</button>\r\n                            <button id=\"addModalDoneBtn\">Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}