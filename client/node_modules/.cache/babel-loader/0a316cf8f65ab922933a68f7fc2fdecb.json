{"ast":null,"code":"import axios from'axios';import{store}from'../Redux/Store';import{ActionType}from'../Redux/ActionType';/*\r\n    Explanation -> This Model is called whenever a successful login has happaned\r\n    (Automatically after a successful registration / after a regular login).\r\n\r\n    This Model is designated to prevent duplication of code from all components that needs to make this proccess.\r\n*/ // ---------- Attaching the user's token to the interceptor ---------- //\nvar attachTokenToInterceptor=function attachTokenToInterceptor(token){// Attaching the Token and the Bearer string to the Interceptor\nvar brearerToken=\"Bearer \"+token;axios.defaults.headers.common['Authorization']=brearerToken;};export var successfulLoginHandler=function successfulLoginHandler(loginServerResponse){// Getting the Token we received from the server\nattachTokenToInterceptor(loginServerResponse.token);// Inserting the user's info to the sessionStorage\nvar strUserInfo=JSON.stringify(loginServerResponse);sessionStorage.setItem('userInfo',strUserInfo);store.dispatch({type:ActionType.updateUserName,payload:loginServerResponse.userName});};","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/models/SuccessfulLoginHandler.ts"],"names":["axios","store","ActionType","attachTokenToInterceptor","token","brearerToken","defaults","headers","common","successfulLoginHandler","loginServerResponse","strUserInfo","JSON","stringify","sessionStorage","setItem","dispatch","type","updateUserName","payload","userName"],"mappings":"AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAASC,UAAT,KAA2B,qBAA3B,CAEA;;;;;GAOA;AAEA,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,CAAmB,CAEhD;AAEA,GAAIC,CAAAA,YAAY,CAAG,UAAYD,KAA/B,CACAJ,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,EAAiDH,YAAjD,CACH,CAND,CAQA,MAAO,IAAMI,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,mBAAD,CAAyD,CAE3F;AACAP,wBAAwB,CAACO,mBAAmB,CAACN,KAArB,CAAxB,CAEA;AACA,GAAIO,CAAAA,WAAW,CAAGC,IAAI,CAACC,SAAL,CAAeH,mBAAf,CAAlB,CACAI,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmCJ,WAAnC,EAEAV,KAAK,CAACe,QAAN,CAAe,CAACC,IAAI,CAAEf,UAAU,CAACgB,cAAlB,CAAkCC,OAAO,CAAET,mBAAmB,CAACU,QAA/D,CAAf,EACH,CAVM","sourcesContent":["import SuccessfulLoginServerResponse from './SuccessfulLoginServerResponse';\r\nimport axios from 'axios';\r\nimport { store } from '../Redux/Store';\r\nimport { ActionType } from '../Redux/ActionType';\r\n\r\n/*\r\n    Explanation -> This Model is called whenever a successful login has happaned\r\n    (Automatically after a successful registration / after a regular login).\r\n\r\n    This Model is designated to prevent duplication of code from all components that needs to make this proccess.\r\n*/\r\n\r\n// ---------- Attaching the user's token to the interceptor ---------- //\r\n\r\nconst attachTokenToInterceptor = (token: string) => {\r\n\r\n    // Attaching the Token and the Bearer string to the Interceptor\r\n\r\n    let brearerToken = \"Bearer \" + token;\r\n    axios.defaults.headers.common['Authorization'] = brearerToken;\r\n}\r\n\r\nexport const successfulLoginHandler = (loginServerResponse : SuccessfulLoginServerResponse) => {\r\n\r\n    // Getting the Token we received from the server\r\n    attachTokenToInterceptor(loginServerResponse.token);\r\n    \r\n    // Inserting the user's info to the sessionStorage\r\n    let strUserInfo = JSON.stringify(loginServerResponse);\r\n    sessionStorage.setItem('userInfo', strUserInfo);\r\n\r\n    store.dispatch({type: ActionType.updateUserName, payload: loginServerResponse.userName});\r\n}"]},"metadata":{},"sourceType":"module"}