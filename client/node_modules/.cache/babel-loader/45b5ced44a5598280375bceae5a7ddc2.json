{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\vacations\\\\src\\\\components\\\\favoriteVacations\\\\FavoriteVacations.tsx\";\nimport React, { Component } from 'react';\nimport poundingHeartAnimation from \"../../assets/poundingHeart.svg\";\nimport FullHeart from '../../assets/likeImg.png';\nimport axios from 'axios';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport colorfulAstroid from '../../assets/wavyLine.png';\nimport noVacations from '../../assets/noVacations.png';\nimport './favoriteVacations.css';\nexport default class FavoriteVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      this.handleInterceptor(); // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        favoriteVacations: store.getState().favoriteVacations\n      })); // Checks whether the user's favorite vacations exist in the global store\n\n      this.checkIfGlobalStoreHasFavoriteVacations();\n    };\n\n    this.checkIfGlobalStoreHasFavoriteVacations = () => {\n      // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\n      if (store.getState().favoriteVacations.length === 0) {\n        this.getFavoriteVacationsFromServer();\n      } // If we have the user's favorite vacations in the global store, fetch them instead of sending a request to the server\n      else {\n          this.setState({\n            favoriteVacations: store.getState().favoriteVacations\n          });\n        }\n    };\n\n    this.checkIfUserIsLogged = () => {\n      let userData = JSON.parse(sessionStorage.getItem(\"userInfo\")); // Checking if the user has a correct sessionStorage JSON\n\n      if (userData !== null) {\n        // Checking if the user has a token\n        if (userData.token !== undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleInterceptor = () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      // Checking if the interceptor is empty\n      if (axios.defaults.headers.common['Authorization'] === undefined) {\n        let userData = JSON.parse(sessionStorage.getItem(\"userInfo\")); // Checking if the user has a correct sessionStorage JSON\n\n        if (userData !== null) {\n          // Checking if the user has a token\n          if (userData.token !== undefined) {\n            let brearerToken = \"Bearer \" + userData.token;\n            axios.defaults.headers.common['Authorization'] = brearerToken;\n          }\n        }\n      }\n    };\n\n    this.OnUserDislikeButton = clickedVacation => {\n      let clickedVacationID = clickedVacation.Vacation_ID;\n      this.removeClickedVacationFromFavorites(clickedVacationID);\n    };\n\n    this.removeClickedVacationFromFavorites = async clickedVacationID => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        await axios.post('http://localhost:3001/vacations/unfollow_vacation', clickedVacationID);\n        let favoriteVacations = store.getState().favoriteVacations;\n        let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n        let indexOfClickedVacationInGlobalStore = clickedVacationInGlobalStore.Vacation_ID;\n        store.dispatch({\n          type: ActionType.UnfolloweVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getFavoriteVacationsFromServer = async () => {\n      // Checking if the user is logged based on the global store\n      const isUserLogged = this.checkIfUserIsLogged();\n\n      if (isUserLogged) {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          const response = await axios.get('http://localhost:3001/vacations/favorite_vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n          const favoriteVacations = response.data;\n          store.dispatch({\n            type: ActionType.GetFavoriteVacations,\n            payload: favoriteVacations\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    };\n\n    this.state = {\n      favoriteVacations: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationsDisplaySection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, this.state.favoriteVacations.length > 0 ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"favoritesHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    }, \"Your \", this.state.favoriteVacations.length, \" Favorite Vacations\", /*#__PURE__*/React.createElement(\"img\", {\n      className: \"poundingHeartAnimation\",\n      src: poundingHeartAnimation,\n      alt: \"Followed GIF\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 37\n      }\n    })) : /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"favoritesHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }, \"Your Favorite Vacations Will Appear Here\", /*#__PURE__*/React.createElement(\"img\", {\n      className: \"poundingHeartAnimation\",\n      src: poundingHeartAnimation,\n      alt: \"Followed GIF\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"colorfulAstroidImg\",\n      src: colorfulAstroid,\n      alt: \"Colorful Astroid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, this.state.favoriteVacations.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noFavoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"noVacationsIMG\",\n      src: noVacations,\n      alt: \"No Favorite Vacations Found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 41\n      }\n    })), this.state.favoriteVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.Image_URL,\n      alt: vacation.Vacation_Description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dislike\",\n      onClick: () => this.OnUserDislikeButton(vacation),\n      src: FullHeart,\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 45\n      }\n    }, vacation.Followers_Count)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 45\n      }\n    }, vacation.Vacation_Description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 49\n      }\n    }, vacation.Start_Date), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 49\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 49\n      }\n    }, vacation.End_Date)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 45\n      }\n    }, vacation.Vacation_Price, \" $\")))))))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/vacations/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","FullHeart","axios","store","ActionType","colorfulAstroid","noVacations","FavoriteVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","handleInterceptor","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","length","getFavoriteVacationsFromServer","checkIfUserIsLogged","userData","JSON","parse","sessionStorage","getItem","token","undefined","defaults","headers","common","brearerToken","OnUserDislikeButton","clickedVacation","clickedVacationID","Vacation_ID","removeClickedVacationFromFavorites","post","clickedVacationInGlobalStore","find","favoriteVacation","indexOfClickedVacationInGlobalStore","dispatch","type","UnfolloweVacation","payload","error","console","log","isUserLogged","response","get","data","GetFavoriteVacations","state","Array","render","poundingHeartAnimation","map","vacation","index","Image_URL","Vacation_Description","Followers_Count","Start_Date","End_Date","Vacation_Price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport poundingHeartAnimation from '../../assets/poundingHeart.svg';\r\nimport FullHeart from '../../assets/likeImg.png';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport colorfulAstroid from '../../assets/wavyLine.png';\r\nimport noVacations from '../../assets/noVacations.png';\r\nimport './favoriteVacations.css';\r\n\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport default class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        this.handleInterceptor();\r\n\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the global store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n        if (store.getState().favoriteVacations.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the global store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkIfUserIsLogged = () => {\r\n\r\n        let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n        // Checking if the user has a correct sessionStorage JSON\r\n        if (userData !== null) {\r\n\r\n            // Checking if the user has a token\r\n            if (userData.token !== undefined) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private handleInterceptor = () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this function takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n\r\n        // Checking if the interceptor is empty\r\n        if (axios.defaults.headers.common['Authorization'] === undefined) {\r\n\r\n            let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n            // Checking if the user has a correct sessionStorage JSON\r\n            if (userData !== null) {\r\n\r\n                // Checking if the user has a token\r\n                if (userData.token !== undefined) {\r\n\r\n                    let brearerToken = \"Bearer \" + userData.token;\r\n                    axios.defaults.headers.common['Authorization'] = brearerToken;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private OnUserDislikeButton = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.Vacation_ID;\r\n\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            await axios.post('http://localhost:3001/vacations/unfollow_vacation', clickedVacationID);\r\n\r\n            let favoriteVacations = store.getState().favoriteVacations;\r\n\r\n            let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n            let indexOfClickedVacationInGlobalStore = clickedVacationInGlobalStore.Vacation_ID;\r\n\r\n            store.dispatch({\r\n                type: ActionType.UnfolloweVacation,\r\n                payload: indexOfClickedVacationInGlobalStore\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = this.checkIfUserIsLogged();\r\n\r\n        if (isUserLogged) {\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"favoriteVacationsSection\">\r\n\r\n                {/* ---------- Displayed Vacations Section ---------- */}\r\n\r\n                <div className=\"vacationsDisplaySection\">\r\n\r\n                    {/* ---------- Favorite Vacations Section ---------- */}\r\n\r\n                    <div className=\"favoriteVacationsSection\">\r\n                        <div className=\"headerContainer\">\r\n\r\n                            {this.state.favoriteVacations.length > 0 ?\r\n\r\n                                <h3 className=\"favoritesHeader sharp-text\">Your {this.state.favoriteVacations.length} Favorite Vacations\r\n                                    <img className=\"poundingHeartAnimation\" src={poundingHeartAnimation} alt=\"Followed GIF\"/>\r\n                                </h3>\r\n                                :\r\n\r\n                                <h3 className=\"favoritesHeader sharp-text\">Your Favorite Vacations Will Appear Here\r\n                                    <img className=\"poundingHeartAnimation\" src={poundingHeartAnimation} alt=\"Followed GIF\"/>\r\n                                </h3>\r\n                            }\r\n\r\n                            <img className=\"colorfulAstroidImg\" src={colorfulAstroid} alt=\"Colorful Astroid\"/>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"favoriteVacations\">\r\n\r\n                            {/* ---------- Favorite Vacations Cards ---------- */}\r\n\r\n                            {/* Indicating the user that he does not have any favorite vacations */}\r\n                                \r\n                                {this.state.favoriteVacations.length === 0\r\n                                    &&\r\n                                    <div className=\"noFavoriteVacations\">\r\n                                        <img className=\"noVacationsIMG\" src={noVacations} alt=\"No Favorite Vacations Found\"></img>\r\n                                    </div>\r\n                                }\r\n\r\n\r\n                            {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                <div className=\"vacationCardContainer\" key={index}>\r\n                                    <img className=\"vacationCardImg\" src={vacation.Image_URL} alt={vacation.Vacation_Description}/>\r\n    \r\n                                    <div className=\"vacationCard\">\r\n                                        <div className=\"topVacationCardSection\">\r\n                                            <img className=\"dislike\" onClick={ () => this.OnUserDislikeButton(vacation)} src={FullHeart} alt=\"Like Button\"/>\r\n                                            <p className=\"followersText\">{vacation.Followers_Count}</p>\r\n                                        </div>\r\n    \r\n                                        <div className=\"vacationInfoCard\">\r\n                                            <h4 className=\"resortName\">{vacation.Vacation_Description}</h4>\r\n    \r\n                                            <div className=\"vacationDates\">\r\n                                                <h4 className=\"vacationDate\">{vacation.Start_Date}</h4>\r\n                                                <span> - </span>\r\n                                                <h4 className=\"vacationDate\">{vacation.End_Date}</h4>\r\n                                            </div>\r\n    \r\n                                            <h4 className=\"vacationPrice\">{vacation.Vacation_Price} $</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}