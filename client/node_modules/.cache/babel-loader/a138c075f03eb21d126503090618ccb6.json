{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import logo from\"../../assets/astronautSVG.svg\";import UserLoginDetails from'../../models/UserLoginDetails';import{NavLink}from'react-router-dom';import axios from'axios';import'./loginPage.css';import{store}from'../../Redux/Store';import{ActionType}from'../../Redux/ActionType';import TopBanner from'../topBanner/TopBanner';import{successfulLoginHandler}from\"../../models/SuccessfulLoginHandler\";// ------------------------------------------------- This Component Displays The Login Screen ------------------------------------------------- //\nvar LoginPage=/*#__PURE__*/function(_Component){_inherits(LoginPage,_Component);var _super=_createSuper(LoginPage);// Defining the global DOM elemends\nfunction LoginPage(props){var _this;_classCallCheck(this,LoginPage);_this=_super.call(this,props);// initializing the state with empty values\n_this.usernameInputField=void 0;_this.passwordInputField=void 0;_this.userMessagesParagraph=void 0;_this.componentDidMount=function(){// Checking if the Global Store has the vacations.\n// If not, retrieve them before the user even logs in, in order to load\n// the vacations behind the scenes, while the user is bussy logging -> Better UX\n_this.checkIfGlobalStoreHasAllVacations();// Defining global DOM elements\n_this.usernameInputField=document.querySelector(\"#usernameFieldset\");_this.passwordInputField=document.querySelector(\"#passwordFieldset\");_this.userMessagesParagraph=document.querySelector(\"#userMessagesParagraph\");};_this.getAllVacationsFromServer=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,allVacations,errorMessage;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get('http://34.65.28.6:3001/vacations');case 3:response=_context.sent;// Here we are receiving all the vacations from the server, as a JSON\nallVacations=response.data;// Updating the Global Store\nstore.dispatch({type:ActionType.GetAllVacations,payload:allVacations});_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);try{errorMessage=_context.t0.response.data.error;_this.loginErrorHandler(errorMessage);}catch(_unused){_this.loginErrorHandler(_context.t0);}case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));_this.login=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var userNameIsNotEmpty,passwordIsNotEmpty,userLoginDetails,serverResponse,serverResponseData,errorMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_this.resetInputFields();userNameIsNotEmpty=_this.checkIfUsernameEnteredIsEmpty();passwordIsNotEmpty=_this.checkIfPasswordEnteredIsEmpty();if(!(userNameIsNotEmpty&&passwordIsNotEmpty)){_context2.next=19;break;}_context2.prev=4;_this.disableLoginButton();userLoginDetails=new UserLoginDetails(_this.state.userName,_this.state.password);// The response we get, should be type of 'SuccessfulLoginServerResponse' class\n_context2.next=9;return axios.post('http://34.65.28.6:3001/users/login',userLoginDetails);case 9:serverResponse=_context2.sent;// Here we are receiving the token, username & user type from the data we got back from the server\nserverResponseData=serverResponse.data;// A Model that handles a successful login response from the server\nsuccessfulLoginHandler(serverResponseData);_this.enableLoginBtn();// Handling the URL routing\n_this.routingHandler();_context2.next=19;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](4);try{errorMessage=_context2.t0.response.data.error;_this.loginErrorHandler(errorMessage);}catch(_unused2){_this.loginErrorHandler(_context2.t0);}finally{_this.enableLoginBtn();}case 19:case\"end\":return _context2.stop();}}},_callee2,null,[[4,16]]);}));_this.checkIfGlobalStoreHasAllVacations=function(){var allVacationsInGlobalStore=store.getState().allVacations;if(allVacationsInGlobalStore.length===0){_this.getAllVacationsFromServer();}};_this.updateUserNameValue=function(event){// getting the username entered in the username's input field\nvar userNameInputField=event.target;var userNameInputFieldValue=userNameInputField.value;var trimmedUserNameInputFieldValue=userNameInputFieldValue.trim();_this.setState({userName:trimmedUserNameInputFieldValue});};_this.updatePasswordValue=function(event){// getting the password entered in the password's input field\nvar passwordInputField=event.target;var passwordInputFieldValue=passwordInputField.value;_this.setState({password:passwordInputFieldValue});};_this.checkIfUsernameEnteredIsEmpty=function(){// Checking if the username entered in the 'login' page is empty\nvar userNameInputField=document.querySelector(\"#usernameField\");var userNameInputFieldValue=userNameInputField.value;var trimmedUserNameInputFieldValue=userNameInputFieldValue.trim();if(trimmedUserNameInputFieldValue===\"\"){_this.notifyUserAboutInvalidUserName();return false;}return true;};_this.checkIfPasswordEnteredIsEmpty=function(){// Checking if the password entered in the 'login' page is empty\nvar passwordInputField=document.querySelector(\"#passwordField\");var passwordInputFieldValue=passwordInputField.value;var trimmedUserNameInputFieldValue=passwordInputFieldValue.trim();if(trimmedUserNameInputFieldValue===\"\"){_this.notifyUserAboutInvalidPassword();return false;}return true;};_this.routingHandler=function(){// Navigating To The Vacations Page URL After a Successful Login\n_this.props.history.push('/vacations');};_this.disableLoginButton=function(){var loginBtn=document.querySelector(\"#loginBtn\");loginBtn.disabled=true;loginBtn.style.cursor=\"not-allowed\";};_this.enableLoginBtn=function(){var loginBtn=document.querySelector(\"#loginBtn\");loginBtn.disabled=false;loginBtn.style.cursor=\"pointer\";};_this.notifyUserAboutInvalidUserName=function(){_this.usernameInputField.style.border=\"2px solid red\";};_this.notifyUserAboutInvalidPassword=function(){_this.passwordInputField.style.border=\"2px solid red\";};_this.resetInputFields=function(){_this.usernameInputField.style.border=\"1px solid #00d1ff\";_this.passwordInputField.style.border=\"1px solid #00d1ff\";_this.userMessagesParagraph.textContent=\"\";};_this.loginErrorHandler=function(errorMessage){// Letting the user know he received an error, by displaying the error message\n_this.userMessagesParagraph.textContent=errorMessage;};_this.state={userName:\"\",password:\"\"};return _this;}// ------------------------------------------------- Component Settings ------------------------------------------------- //\n_createClass(LoginPage,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"loginSectionContainer\"},/*#__PURE__*/React.createElement(TopBanner,null),/*#__PURE__*/React.createElement(\"div\",{className:\"loginSection\"},/*#__PURE__*/React.createElement(\"div\",{className:\"loginSquare\"},/*#__PURE__*/React.createElement(\"img\",{className:\"login-logo\",src:logo,alt:\"Explorer\"}),/*#__PURE__*/React.createElement(\"h2\",{className:\"sharp-text\"},\"Login\"),/*#__PURE__*/React.createElement(\"h3\",{className:\"sharp-text margin-bottom-2\"},\"To Continue To Explorer\"),/*#__PURE__*/React.createElement(\"div\",{className:\"inputFieldSection\"},/*#__PURE__*/React.createElement(\"fieldset\",{id:\"usernameFieldset\",className:\"cerdinals-fieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"Username\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updateUserNameValue,type:\"text\",name:\"username\",id:\"usernameField\"})),/*#__PURE__*/React.createElement(\"fieldset\",{id:\"passwordFieldset\",className:\"cerdinals-fieldset\"},/*#__PURE__*/React.createElement(\"legend\",null,\"Password\"),/*#__PURE__*/React.createElement(\"input\",{onChange:this.updatePasswordValue,type:\"password\",name:\"password\",id:\"passwordField\"})),/*#__PURE__*/React.createElement(\"button\",{className:\"loginBtn\",id:\"loginBtn\",onClick:this.login},\"Login\")),/*#__PURE__*/React.createElement(NavLink,{className:\"notRegisteredLink sharp-text\",to:\"/register\"},\"I Don't Have An Account\")),/*#__PURE__*/React.createElement(\"p\",{id:\"userMessagesParagraph\",className:\"userMessagesParagraph sharp-text\"})));}}]);return LoginPage;}(Component);export{LoginPage as default};","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/loginPage/LoginPage.tsx"],"names":["React","Component","UserLoginDetails","NavLink","axios","store","ActionType","TopBanner","successfulLoginHandler","LoginPage","props","usernameInputField","passwordInputField","userMessagesParagraph","componentDidMount","checkIfGlobalStoreHasAllVacations","document","querySelector","getAllVacationsFromServer","get","response","allVacations","data","dispatch","type","GetAllVacations","payload","errorMessage","error","loginErrorHandler","login","resetInputFields","userNameIsNotEmpty","checkIfUsernameEnteredIsEmpty","passwordIsNotEmpty","checkIfPasswordEnteredIsEmpty","disableLoginButton","userLoginDetails","state","userName","password","post","serverResponse","serverResponseData","enableLoginBtn","routingHandler","allVacationsInGlobalStore","getState","length","updateUserNameValue","event","userNameInputField","target","userNameInputFieldValue","value","trimmedUserNameInputFieldValue","trim","setState","updatePasswordValue","passwordInputFieldValue","notifyUserAboutInvalidUserName","notifyUserAboutInvalidPassword","history","push","loginBtn","disabled","style","cursor","border","textContent","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport { successfulLoginHandler } from \"../../models/SuccessfulLoginHandler\";\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Login Screen ------------------------------------------------- //\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private usernameInputField: HTMLFieldSetElement;\r\n    private passwordInputField: HTMLFieldSetElement;\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n\r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Checking if the Global Store has the vacations.\r\n        // If not, retrieve them before the user even logs in, in order to load\r\n        // the vacations behind the scenes, while the user is bussy logging -> Better UX\r\n        this.checkIfGlobalStoreHasAllVacations();\r\n\r\n        // Defining global DOM elements\r\n        this.usernameInputField = document.querySelector(\"#usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputField = document.querySelector(\"#passwordFieldset\") as HTMLFieldSetElement;\r\n        this.userMessagesParagraph = document.querySelector(\"#userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://34.65.28.6:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            // Updating the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.loginErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.loginErrorHandler(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    private login = async () => {\r\n\r\n        this.resetInputFields();\r\n\r\n        let userNameIsNotEmpty = this.checkIfUsernameEnteredIsEmpty();\r\n        let passwordIsNotEmpty = this.checkIfPasswordEnteredIsEmpty();\r\n\r\n        if (userNameIsNotEmpty && passwordIsNotEmpty) {\r\n\r\n            try {\r\n                this.disableLoginButton();\r\n\r\n                let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n                \r\n                // The response we get, should be type of 'SuccessfulLoginServerResponse' class\r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://34.65.28.6:3001/users/login', userLoginDetails);\r\n    \r\n                // Here we are receiving the token, username & user type from the data we got back from the server\r\n                const serverResponseData = serverResponse.data;\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n\r\n                this.enableLoginBtn();\r\n\r\n                // Handling the URL routing\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n                \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.loginErrorHandler(errorMessage);\r\n                }\r\n\r\n                catch {\r\n                    this.loginErrorHandler(error);\r\n                }\r\n\r\n                finally {\r\n                    this.enableLoginBtn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoreHasAllVacations = () => {\r\n\r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer()\r\n        }\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n    private checkIfUsernameEnteredIsEmpty = () => {\r\n\r\n        // Checking if the username entered in the 'login' page is empty\r\n\r\n        let userNameInputField: HTMLInputElement = document.querySelector(\"#usernameField\") as HTMLInputElement;\r\n        let userNameInputFieldValue = userNameInputField.value;\r\n        let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidUserName();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfPasswordEnteredIsEmpty = () => {\r\n\r\n        // Checking if the password entered in the 'login' page is empty\r\n\r\n        let passwordInputField: HTMLInputElement = document.querySelector(\"#passwordField\") as HTMLInputElement;\r\n        let passwordInputFieldValue = passwordInputField.value;\r\n        let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidPassword();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // Navigating To The Vacations Page URL After a Successful Login\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableLoginButton = () : void => {\r\n        const loginBtn = document.querySelector(\"#loginBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = true;\r\n        loginBtn.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableLoginBtn = () : void => {\r\n        const loginBtn = document.querySelector(\"#loginBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = false;\r\n        loginBtn.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidUserName = () => {\r\n        this.usernameInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidPassword = () => {\r\n        this.passwordInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputField.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputField.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n    private loginErrorHandler = (errorMessage : string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"loginSection\">\r\n                    <div className=\"loginSquare\">\r\n                        <img className=\"login-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Login</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button className=\"loginBtn\" id=\"loginBtn\" onClick={this.login}>Login</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I Don't Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}