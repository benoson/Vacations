{"ast":null,"code":"// ------------------ This model checks if the user is still logged in ------------------ //\nimport axios from 'axios';\nexport const isUserLoggedValidator = () => {\n  let userData = JSON.parse(sessionStorage.getItem(\"userInfo\")); // Checking if the user has a correct sessionStorage JSON\n\n  if (userData !== null) {\n    // Checking if the user has a token\n    if (userData.token !== undefined) {\n      // Attaching the Token we received from the server, to every HTTP request we'll send from now on\n      // This is the 'Interceptor'\n      let brearerToken = \"Bearer \" + userData.token;\n      axios.defaults.headers.common['Authorization'] = brearerToken;\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/models/IsUserLoggedValidator.ts"],"names":["axios","isUserLoggedValidator","userData","JSON","parse","sessionStorage","getItem","token","undefined","brearerToken","defaults","headers","common"],"mappings":"AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AAEvC,MAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX,CAAf,CAFuC,CAIvC;;AACA,MAAIJ,QAAQ,KAAK,IAAjB,EAAuB;AAEnB;AACA,QAAIA,QAAQ,CAACK,KAAT,KAAmBC,SAAvB,EAAkC;AAE9B;AACA;AACA,UAAIC,YAAY,GAAG,YAAYP,QAAQ,CAACK,KAAxC;AACAP,MAAAA,KAAK,CAACU,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDH,YAAjD;AAEA,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CApBM","sourcesContent":["\r\n// ------------------ This model checks if the user is still logged in ------------------ //\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nexport const isUserLoggedValidator = () => {\r\n\r\n    let userData = JSON.parse(sessionStorage.getItem(\"userInfo\"));\r\n\r\n    // Checking if the user has a correct sessionStorage JSON\r\n    if (userData !== null) {\r\n\r\n        // Checking if the user has a token\r\n        if (userData.token !== undefined) {\r\n\r\n            // Attaching the Token we received from the server, to every HTTP request we'll send from now on\r\n            // This is the 'Interceptor'\r\n            let brearerToken = \"Bearer \" + userData.token;\r\n            axios.defaults.headers.common['Authorization'] = brearerToken;\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}"]},"metadata":{},"sourceType":"module"}