{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport emptyHeart from '../../assets/likeImg.png';\nimport fullHeart from '../../assets/likedIMG.png';\nimport SpinningEarthAnimation from '../spinningEarthAnimation/SpinningEarth';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport './allVacations.css';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n\n      if (store.getState().allVacations.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: store.getState().allVacations\n        });\n      }\n    };\n\n    this.validateVacationIsNotAlreadyLikedByTheUser = clickedVacation => {\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.Vacation_ID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data;\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      try {\n        let clickedVacationID = clickedVacation.Vacation_ID;\n        await axios.post('http://localhost:3001/vacations/follow_vacation', {\n          clickedVacationID\n        }); // Update The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      try {\n        let clickedVacationID = clickedVacation.Vacation_ID;\n        await axios.post('http://localhost:3001/vacations/unfollow_vacation', {\n          clickedVacationID\n        }); // -------------------- Removing the vacation from the global store -------------------- //\n\n        let favoriteVacations = store.getState().favoriteVacations; // Finding the clicked vacation in the global store, in order to remove it\n\n        let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n        let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore); // Update The Global Store\n\n        store.dispatch({\n          type: ActionType.UnfolloweVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      // Using a model I made to check if the user is still logged.\n      // Checking if the user is logged based on the global store\n      const isUserLogged = isUserLoggedValidator(); // If the user is currently logged in (If the current person is not a guest)\n\n      if (isUserLogged) {\n        // checking if the user hasn't liked this vacation already\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        } // If the vacation selected is ALREADY liked by the user, unfollow that vacation\n        else {\n            this.unfollowVacation(clickedVacation);\n          }\n      } else {\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n        this.props.history.push('/login');\n      }\n    };\n\n    this.checkIfVacationIsFollowed = vacation => {\n      // Inserting the vacation to the global store for future use (acts like cache)\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationID = vacation.Vacation_ID; // Finding the clicked vacation in the global store, in order to remove it\n\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\", /*#__PURE__*/React.createElement(SpinningEarthAnimation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardWithoutInfoSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.Image_URL,\n      alt: vacation.Vacation_Description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 37\n      }\n    }, this.checkIfVacationIsFollowed(vacation) ? /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon dislike\",\n      src: fullHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon\",\n      src: emptyHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 41\n      }\n    }, vacation.Followers_Count)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 33\n      }\n    }, vacation.Vacation_Description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 37\n      }\n    }, vacation.Start_Date), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 37\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 37\n      }\n    }, vacation.End_Date)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 37\n      }\n    }, vacation.Vacation_Price, \" $\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","emptyHeart","fullHeart","SpinningEarthAnimation","store","axios","ActionType","withRouter","isUserLoggedValidator","AllVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","allVacations","getState","length","getAllVacationsFromServer","validateVacationIsNotAlreadyLikedByTheUser","clickedVacation","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationID","Vacation_ID","clickedVacationInGlobalStore","find","favoriteVacation","undefined","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","vacationsErrorHandler","followVacation","post","SetFollowedVacation","unfollowVacation","indexOfClickedVacationInGlobalStore","indexOf","UnfolloweVacation","snackbar","document","getElementById","className","textContent","setTimeout","replace","onVacationFollowAttempt","isUserLogged","vacationIsNotAlreadyLikedByTheUser","history","push","checkIfVacationIsFollowed","vacation","state","Array","render","map","index","Image_URL","Vacation_Description","Followers_Count","Start_Date","End_Date","Vacation_Price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport LocationImage from '../../assets/locationImage.png';\r\nimport Vacation from '../../models/Vacation';\r\nimport emptyHeart from '../../assets/likeImg.png';\r\nimport fullHeart from '../../assets/likedIMG.png';\r\nimport SpinningEarthAnimation from '../spinningEarthAnimation/SpinningEarth';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport colorfulAstroid from '../../assets/wavyLine.png';\r\nimport {withRouter} from 'react-router';\r\nimport './allVacations.css';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\n\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        if (store.getState().allVacations.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            });\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    private validateVacationIsNotAlreadyLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.Vacation_ID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find( favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n        try {\r\n\r\n            let clickedVacationID : number = clickedVacation.Vacation_ID;\r\n            await axios.post('http://localhost:3001/vacations/follow_vacation', {clickedVacationID});\r\n\r\n            // Update The Global Store\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n        try {\r\n\r\n            let clickedVacationID : number = clickedVacation.Vacation_ID;\r\n            await axios.post('http://localhost:3001/vacations/unfollow_vacation', {clickedVacationID});\r\n\r\n\r\n            // -------------------- Removing the vacation from the global store -------------------- //\r\n\r\n            let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n            // Finding the clicked vacation in the global store, in order to remove it\r\n            let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n            let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n            // Update The Global Store\r\n            store.dispatch({type: ActionType.UnfolloweVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function(){ snackbar.className = snackbar.className.replace(\"show\", \"\"); }, 3000);\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        // Using a model I made to check if the user is still logged.\r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        // If the user is currently logged in (If the current person is not a guest)\r\n        if (isUserLogged) {\r\n\r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is ALREADY liked by the user, unfollow that vacation\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        else {\r\n            // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private checkIfVacationIsFollowed = (vacation : Vacation) => {\r\n\r\n        // Inserting the vacation to the global store for future use (acts like cache)\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n        let clickedVacationID = vacation.Vacation_ID;\r\n\r\n        // Finding the clicked vacation in the global store, in order to remove it\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                <div className=\"headerContainer\">\r\n                    <h3 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You\r\n                        <SpinningEarthAnimation/>\r\n                    </h3>\r\n\r\n                    {/* <img className=\"colorfulAstroidImg\" src={colorfulAstroid} alt=\"Colorful Astroid\"/> */}\r\n                </div>\r\n            \r\n\r\n                <div className=\"allVacations\">\r\n\r\n                    {/* ---------- All Vacations Cards ---------- */}\r\n\r\n                    {this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                        <div className=\"vacationCardContainer\" key={index}>\r\n\r\n                            <div className=\"vacationCardWithoutInfoSection\">\r\n                                <img className=\"vacationCardImg\" src={vacation.Image_URL} alt={vacation.Vacation_Description}/>\r\n\r\n                                <div className=\"vacationCard\">\r\n                                \r\n                                    <div className=\"topVacationCardSection\">\r\n                                        {this.checkIfVacationIsFollowed(vacation) ?\r\n                                            <img className=\"heartIcon dislike\" src={fullHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                        :\r\n                                            <img className=\"heartIcon\" src={emptyHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                        }\r\n                                        <p className=\"followersText\">{vacation.Followers_Count}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n   \r\n                            <div className=\"vacationInfoCard\">\r\n                                <h4 className=\"resortName\">{vacation.Vacation_Description}</h4>\r\n\r\n                                <div className=\"vacationDates\">\r\n                                    <h4 className=\"vacationDate\">{vacation.Start_Date}</h4>\r\n                                    <span> - </span>\r\n                                    <h4 className=\"vacationDate\">{vacation.End_Date}</h4>\r\n                                </div>\r\n\r\n                                    <h4 className=\"vacationPrice\">{vacation.Vacation_Price} $</h4>\r\n                            </div>\r\n                            \r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}