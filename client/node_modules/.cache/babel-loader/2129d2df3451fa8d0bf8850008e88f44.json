{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport settingsImage from '../../assets/settingsImg.png';\nimport deleteSVG from \"../../assets/deleteSVG.svg\";\nimport spinningEarthSVG from \"../../assets/spinningEarthSVG.svg\";\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\nimport VacationComponent from '../vacationComponent/VacationComponent';\nimport TextField from '@material-ui/core/TextField';\nimport socketIOClient from \"socket.io-client\";\nimport './allVacations.css';\nimport '../topNavbar/topNavbar.css'; // ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\n\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n    this.userTypeFromServerCache = void 0;\n    this.userNameFromServerCache = void 0;\n    this.socket = void 0;\n    this.socketID = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n\n      try {\n        // Disconnecting from the socket connection\n        this.socket.disconnect();\n      } catch {\n        this.vacationsErrorHandler('Something went wrong while trying to disconnect from Socket');\n      }\n    };\n\n    this.componentDidMount = async () => {\n      // Optimizing a bit the memory leak of the store listener. Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        await this.getUserInfoFromServerCache();\n        this.socketID = this.generateSocketUserID(); // Initiating the Socket connection to the server\n\n        this.initiateSocket();\n      }\n\n      this.checkIfGlobalStoraHasAllVacations();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      // Getting all the vacations from the server and inserting them to the Global Store\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data; // Insert all the vacations from the server to the Global Store\n\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        // In case of an error, receiving the error, and displaying it in a Pop-Up UI message for the user\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      // This function occurs after validations approved that this vacation can be liked by the user\n      interceptorHandler(); // Defining all 'like' buttons in order to disable them until the request is done\n\n      const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\n      const likeButtonsArr = Array.from(likeButtonsNodeList);\n\n      try {\n        this.disableButtonsGroup(likeButtonsArr); // Attempting to make a POST request to the server with the clicked vacation's ID, to follow that vacation\n\n        const clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`); // Updating The Global Store\n        // store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\n        // Emitting a socket message to the server, in order to inform all clients about the new followed vacation in the UI\n\n        const socketInfo = {\n          clickedVacationID,\n          userName: this.userNameFromServerCache\n        };\n        this.socket.emit('increase-vacation-followers-count', socketInfo);\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      } finally {\n        this.enableButtonsGroup(likeButtonsArr);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      // This function is designated to make the user 'unfollow' a vacation\n      interceptorHandler(); // Defining all 'like' buttons in order to disable them until the request is done\n\n      const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\n      const likeButtonsArr = Array.from(likeButtonsNodeList);\n\n      try {\n        this.disableButtonsGroup(likeButtonsArr); // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\n\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`); // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\n\n        const socketInfo = {\n          clickedVacationID,\n          userName: this.userNameFromServerCache\n        };\n        this.socket.emit('decrease-vacation-followers-count', socketInfo);\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      } finally {\n        this.enableButtonsGroup(likeButtonsArr);\n      }\n    };\n\n    this.addVacation = async addModalBackground => {\n      let allInputsArr = this.getAllInputsArrForAddedVacation(); // Validating that all the fields of the added vacation are valid\n\n      let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\n\n      if (isNewVacationDataValid) {\n        interceptorHandler();\n\n        try {\n          let serverResponse = await axios.post(`http://localhost:3001/vacations/add_vacation`, newVacationData);\n          let newlyAddedVacation = serverResponse.data[0]; // Emitting a socket command to the server, in order to inform all clients about the new vacation\n\n          this.socket.emit('add-vacation', newlyAddedVacation);\n          this.hideModal(addModalBackground);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.updateVacation = async (clickedVacation, editModalBackground) => {\n      const allInputsArr = this.getAllInputsArrForUpdatedVacation(); // Validating all fields of the updated vacation are valid, and getting back the valid data\n\n      let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\n\n      if (isNewVacationDataValid) {\n        // Converting the data to for suitable UI display -> preventing retrieving the updated vacation from the DB\n        const convertedValidDataForUIDisplay = this.convertVacationDataForUIDisplay(allInputsArr, clickedVacation);\n        interceptorHandler();\n\n        try {\n          let clickedVacationID = clickedVacation.vacationID;\n          const response = await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData);\n          const imageToPreview = response.data;\n          clickedVacation.imageURL = imageToPreview; // Emitting a socket command to the server, in order to inform all clients about the updated vacation\n\n          this.socket.emit('update-vacation-info', convertedValidDataForUIDisplay);\n          this.hideModal(editModalBackground);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.deleteVacation = async clickedVacationID => {\n      interceptorHandler();\n\n      try {\n        await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`); // Emitting a socket command to the server, in order to inform all clients about the new deleted vacation\n\n        this.socket.emit('delete-vacation', clickedVacationID);\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.getUserInfoFromServerCache = async () => {\n      // This function retrieves the user type from the server, because we don't trust the client to tell us his user type\n      try {\n        let userInfoFromServerCache = await getUserInfoFromServerCache();\n        this.userTypeFromServerCache = userInfoFromServerCache.userType;\n        this.userNameFromServerCache = userInfoFromServerCache.userName;\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.checkIfGlobalStoraHasAllVacations = () => {\n      // Checking if the Gloabl Store has all the vacations to display, and if not, get them from the server\n      let allVacationsInGlobalStore = store.getState().allVacations;\n\n      if (allVacationsInGlobalStore.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: allVacationsInGlobalStore\n        });\n      }\n    };\n\n    this.registerAllSocketListeners = () => {\n      // Registering all Socket.io Listeners\n      // Registering an 'add vacation' listener, which updates the UI for all the clients\n      this.socket.on('add-vacation', newlyAddedVacation => {\n        this.addVacationViaSocketIO(newlyAddedVacation);\n      }); // Registering an 'update vacation' listener, which updates the UI for all the clients\n\n      this.socket.on('update-vacation-info', convertedValidDataForUIDisplay => {\n        this.updateVacationInfoViaSocketIO(convertedValidDataForUIDisplay);\n      }); // Registering a 'delete vacation' listener, which updates the UI for all the clients\n\n      this.socket.on('delete-vacation', clickedVacationID => {\n        this.deleteVacationViaSocketIO(clickedVacationID);\n      }); // Registering an 'increase vacation followers count' listener, which updates the UI for all the clients\n\n      this.socket.on('increase-vacation-followers-count', socketInfo => {\n        this.increaseVacationFollowersCountViaSocketIO(socketInfo);\n      }); // Registering a 'decrease vacation followers count' listener, which updates the UI for all the clients\n\n      this.socket.on('decrease-vacation-followers-count', socketInfo => {\n        this.decreaseVacationFollowersCountViaSocketIO(socketInfo);\n      });\n    };\n\n    this.convertVacationDataForUIDisplay = (inputsArr, clickedVacation) => {\n      // This function gets a vacation data that the admin has changed locally, and converts it to display it locally (without reaching for the DB)\n      const clickedVacationID = clickedVacation.vacationID;\n      const clickedVacationFollowersCount = clickedVacation.followersCount;\n      const newNameTrimmedValue = inputsArr[0].value.trim();\n      const vacationStartDateValue = inputsArr[1].value;\n      const vacationEndDateValue = inputsArr[2].value;\n      const newPriceValue = inputsArr[3].valueAsNumber;\n      const newDescriptionTrimmedValue = inputsArr[4].value.trim();\n      const newVacationURL = inputsArr[5].value.trim();\n      const convertedStartDate = this.convertStartDateForUIDisplay(vacationStartDateValue);\n      const convertedEndDate = this.convertEndDateForUIDisplay(vacationEndDateValue); // Creating the converted vacation UI display object\n\n      const convertedValidDataForUIDisplay = {\n        vacationID: clickedVacationID,\n        vacationName: newNameTrimmedValue,\n        startDate: convertedStartDate,\n        endDate: convertedEndDate,\n        vacationPrice: newPriceValue,\n        vacationDescription: newDescriptionTrimmedValue,\n        imageURL: newVacationURL,\n        followersCount: clickedVacationFollowersCount\n      };\n      return convertedValidDataForUIDisplay;\n    };\n\n    this.convertStartDateForUIDisplay = vacationStartDateValue => {\n      // This function converts the start date of a given vacation, to be suitable for the UI\n      let startDateYear = +vacationStartDateValue.split('-')[2];\n      let startDateMonth = +vacationStartDateValue.split('-')[1];\n      let startDateDay = +vacationStartDateValue.split('-')[0];\n      let fullStartDate = startDateYear + \"/\" + startDateMonth + \"/\" + startDateDay;\n      return fullStartDate;\n    };\n\n    this.convertEndDateForUIDisplay = vacationEndDateValue => {\n      // This function converts the start date of a given vacation, to be suitable for the UI\n      let endDateYear = +vacationEndDateValue.split('-')[2];\n      let endDateMonth = +vacationEndDateValue.split('-')[1];\n      let endDateDay = +vacationEndDateValue.split('-')[0];\n      let fullEndDate = endDateYear + \"/\" + endDateMonth + \"/\" + endDateDay;\n      return fullEndDate;\n    };\n\n    this.getAllInputsArrForAddedVacation = () => {\n      // Defining, and returning an array of all the inputs inside the 'Add Vacation' modal\n      const vacationName = document.getElementById(\"addedVacationName\");\n      const vacationStartDate = document.getElementById(\"addStartDate\");\n      const vacationEndDate = document.getElementById(\"addEndDate\");\n      const vacationPrice = document.getElementById(\"addedVacationPrice\");\n      const vacationDescription = document.getElementById(\"addedVacationDescription\");\n      const vacationImageURL = document.getElementById(\"addedVacationImageURL\");\n      const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\n      return allInputsArr;\n    };\n\n    this.getAllInputsArrForUpdatedVacation = () => {\n      // Defining, and returning an array of all the inputs inside the 'Update Vacation' modal\n      const vacationName = document.getElementById(\"editedVacationName\");\n      const vacationStartDate = document.getElementById(\"editStartDate\");\n      const vacationEndDate = document.getElementById(\"editEndDate\");\n      const vacationPrice = document.getElementById(\"editedVacationPrice\");\n      const vacationDescription = document.getElementById(\"editedVacationDescription\");\n      const vacationImageURL = document.getElementById(\"editedVacationImageURL\");\n      const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\n      return allInputsArr;\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      /*\r\n          Before the 'follow' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      const isUserLogged = isUserLoggedValidator(); // If the user is currently logged in\n\n      if (isUserLogged) {\n        // checking if the user hasn't liked this vacation already\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        } // If the vacation selected is already liked by the user, unfollow that vacation.\n        else {\n            this.unfollowVacation(clickedVacation);\n          }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateVacationIsNotLikedByTheUser = clickedVacation => {\n      // Validating the vacation chosen is not already liked by the user\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.vacationID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.vacationID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getIndexOfVacationByID = vacationID => {\n      // Finding and returning an index of a vacation from the Global Store's 'all vacations' array\n      let allVacations = store.getState().allVacations;\n      let clickedVacationInGlobalStore = allVacations.find(allVacations => allVacations.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = allVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.getIndexOfFavoriteVacationByID = vacationID => {\n      // Finding and returning an index of a vacation from the Global Store's 'favorites' array\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.onVacationAdditionAttempt = () => {\n      /*\r\n          Before the 'add' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to delete a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayAdditionModal();\n      } // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.onVacationEditAttempt = (clickedVacation, event) => {\n      /*\r\n          Before the 'edit' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to edit a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        const button = event.target;\n        this.disableButton(button);\n        this.displayEditModal(clickedVacation);\n        this.enableButton(button);\n      } // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.onVacationDeleteAttempt = (clickedVacation, event) => {\n      /*\r\n          Before the 'delete' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to delete a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        const button = event.target;\n        this.disableButton(button);\n        this.displayDeletionModal(clickedVacation);\n        this.enableButton(button);\n      } // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateNewVacationData = inputsArr => {\n      // This function validates all the Modal's fields are valid\n      const newNameTrimmedValue = inputsArr[0].value.trim();\n      const vacationStartDateValue = inputsArr[1].value;\n      const vacationEndDateValue = inputsArr[2].value;\n      const newPriceValue = inputsArr[3].valueAsNumber;\n      const newDescriptionTrimmedValue = inputsArr[4].value.trim();\n      const newVacationURL = inputsArr[5].value.trim(); // Validating all Modal fields are valid\n\n      let isNewVacationURLValid = this.validateNewVacationURL(newVacationURL);\n      let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\n      let isNewPriceValid = this.validateNewPrice(newPriceValue);\n      let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\n      let isNewNameValid = this.validateNewName(newNameTrimmedValue);\n\n      if (isNewNameValid) {\n        if (isNewPriceValid) {\n          if (isNewDescriptionValid) {\n            if (areDatesValid) {\n              if (isNewVacationURLValid) {\n                // Creating an object that has all the necessary data for adding / updating a vacation locally\n                let newVacationData = {\n                  vacationName: newNameTrimmedValue,\n                  vacationPrice: newPriceValue,\n                  vacationDescription: newDescriptionTrimmedValue,\n                  startDate: vacationStartDateValue,\n                  endDate: vacationEndDateValue,\n                  imageURL: newVacationURL\n                }; // retrning the data + a 'true', in order to inform the caller that the data is valid\n\n                return [true, newVacationData];\n              }\n            }\n          }\n        }\n      } // In case one of the parameters of the updated vacation is not valid\n\n\n      return [false, {}];\n    };\n\n    this.validateNewName = newTrimmedName => {\n      // Validating the vacation's name inside the Modal\n      if (newTrimmedName !== \"\") {\n        if (newTrimmedName.length >= 3) {\n          if (newTrimmedName.length <= 44) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\n      return false;\n    };\n\n    this.validateNewPrice = newPrice => {\n      // Validating the vacation's price inside the Modal\n      if (newPrice > 0) {\n        if (newPrice < 100000) {\n          return true;\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new price must be larger than 0 and Lower than 100,000\");\n      return false;\n    };\n\n    this.validateNewDescription = newTrimmedDescription => {\n      // Validating the vacation's description inside the Modal\n      if (newTrimmedDescription !== \"\") {\n        if (newTrimmedDescription.length >= 5) {\n          if (newTrimmedDescription.length <= 249) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\n      return false;\n    };\n\n    this.validateNewDates = (newVacationStartDate, newVacationEndDate) => {\n      // Validating the logic of the dates inputs in the 'add Modal'\n      if (newVacationStartDate !== \"\") {\n        if (newVacationStartDate !== undefined) {\n          if (newVacationEndDate !== \"\") {\n            if (newVacationEndDate !== undefined) {\n              let currentDate = new Date().setHours(0, 0, 0, 0);\n              let startDate = new Date(newVacationStartDate).setHours(0, 0, 0, 0);\n              let endDate = new Date(newVacationEndDate).setHours(0, 0, 0, 0); // Checking if the starting date is not in the past\n\n              if (startDate >= currentDate) {\n                // Checking if the ending date is greater than the starting date\n                if (endDate > startDate) {\n                  return true;\n                } else {\n                  this.vacationsErrorHandler(\"The return date must be later than the starting date\");\n                  return false;\n                }\n              } else {\n                this.vacationsErrorHandler(\"The starting date must be later than today\");\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\n      return false;\n    };\n\n    this.validateNewVacationURL = newTrimmedImageURL => {\n      // Validating the vacation's URL inside the Modal\n      if (newTrimmedImageURL !== \"\") {\n        if (newTrimmedImageURL.length >= 10) {\n          if (newTrimmedImageURL.length <= 998) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"Image URL must be between 10 - 998 characters long\");\n      return false;\n    };\n\n    this.addVacationViaSocketIO = newlyAddedVacation => {\n      // This function occurs whenever an admin adds a new vacation (the listener triggers this function using a Socket.io message).\n      // Updating the Global Store with the new vacation, in order to update the UI\n      store.dispatch({\n        type: ActionType.AddVacation,\n        payload: newlyAddedVacation\n      });\n    };\n\n    this.updateVacationInfoViaSocketIO = convertedValidDataForUIDisplay => {\n      // Updating the user's UI with the vacation that was updated (edited) by the admin, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let updatedVacationID = convertedValidDataForUIDisplay.vacationID;\n      let indexOfClickedFavoriteVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(updatedVacationID);\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(updatedVacationID); // Updating the vacations in the 'all vacations' component\n\n      store.dispatch({\n        type: ActionType.UpdateVacation,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          convertedValidDataForUIDisplay\n        }\n      }); // Updating the vacations in the user's 'favorite vacations' component\n\n      if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\n        store.dispatch({\n          type: ActionType.UpdateFavoriteVacation,\n          payload: {\n            indexOfClickedFavoriteVacationInGlobalStore,\n            convertedValidDataForUIDisplay\n          }\n        });\n      }\n    };\n\n    this.deleteVacationViaSocketIO = clickedVacationID => {\n      // Updating the user's UI with the vacation that was deleted by the admin, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedFavoriteVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID); // Updating the vacations in the 'all vacations' component\n\n      store.dispatch({\n        type: ActionType.DeleteVacationViaSocketIO,\n        payload: indexOfClickedVacationInGlobalStore\n      }); // Checking if the user has liked this vacation\n      // Updating the vacations in the user's 'favorite vacations' component\n\n      if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\n        store.dispatch({\n          type: ActionType.DeleteFavoriteVacationViaSocketIO,\n          payload: indexOfClickedFavoriteVacationInGlobalStore\n        });\n      }\n    };\n\n    this.increaseVacationFollowersCountViaSocketIO = socketInfo => {\n      // Updating the user's UI with the followers count of the vacation that was liked by other users, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\n      let indexOfFavoriteClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\n      let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount + 1; // Checking if the user has liked this vacation\n\n      if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\n        // Updating the vacation's followers count in the UI\n        store.dispatch({\n          type: ActionType.IncreaseFavoriteVacationFollowersCount,\n          payload: {\n            indexOfFavoriteClickedVacationInGlobalStore,\n            newFollowersCount\n          }\n        });\n      } // Updating the vacation's followers count in the UI\n\n\n      store.dispatch({\n        type: ActionType.IncreaseVacationFollowersCount,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          newFollowersCount\n        }\n      });\n      this.checkIfUserShouldIncreaseFollowersCountInUI(socketInfo);\n    };\n\n    this.decreaseVacationFollowersCountViaSocketIO = socketInfo => {\n      // Updating the user's UI with the followers count of the vacation that was unliked by other users, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\n      let indexOfFavoriteClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\n      let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount - 1; // Checking if the user has liked this vacation\n\n      if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\n        // Updating the vacation's followers count in the UI\n        store.dispatch({\n          type: ActionType.DecreaseFavoriteVacationFollowersCount,\n          payload: {\n            indexOfFavoriteClickedVacationInGlobalStore,\n            newFollowersCount\n          }\n        });\n      } // Updating the vacation's followers count in the UI\n\n\n      store.dispatch({\n        type: ActionType.DecreaseVacationFollowersCount,\n        payload: {\n          indexOfClickedVacationInGlobalStore,\n          newFollowersCount\n        }\n      });\n      this.checkIfUserShouldDecreaseFollowersCountInUI(socketInfo);\n    };\n\n    this.checkIfUserShouldIncreaseFollowersCountInUI = socketInfo => {\n      const clickedVacationID = socketInfo.clickedVacationID;\n      const clickedVacationIndex = this.getIndexOfVacationByID(clickedVacationID);\n      const clickedVacation = store.getState().allVacations[clickedVacationIndex];\n\n      if (this.userNameFromServerCache === socketInfo.userName) {\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      }\n\n      ;\n    };\n\n    this.checkIfUserShouldDecreaseFollowersCountInUI = socketInfo => {\n      const clickedVacationID = socketInfo.clickedVacationID;\n      const clickedVacationIndex = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n\n      if (this.userNameFromServerCache === socketInfo.userName) {\n        store.dispatch({\n          type: ActionType.UnfollowVacation,\n          payload: clickedVacationIndex\n        });\n      }\n\n      ;\n    };\n\n    this.generateSocketUserID = () => {\n      const userID = Math.floor(Math.random() * 10000);\n      return userID;\n    };\n\n    this.initiateSocket = () => {\n      // Connecting to the server's socket\n      this.socket = socketIOClient('http://localhost:3002', {\n        query: \"userID=\" + this.socketID\n      });\n      this.registerAllSocketListeners();\n    };\n\n    this.disableButton = button => {\n      button.disabled = true;\n      button.style.cursor = \"not-allowed\";\n    };\n\n    this.enableButton = button => {\n      button.disabled = false;\n      button.style.cursor = \"pointer\";\n    };\n\n    this.disableButtonsGroup = buttonsGroup => {\n      for (let button of buttonsGroup) {\n        this.disableButton(button);\n      }\n    };\n\n    this.enableButtonsGroup = buttonsGroup => {\n      for (let button of buttonsGroup) {\n        this.enableButton(button);\n      }\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 6000);\n    };\n\n    this.displayVacationNameInEditModal = clickedVacationName => {\n      // Displaying 'Edit' Modal Name\n      const editedVacationNameField = document.getElementById(\"editedVacationName\");\n      editedVacationNameField.value = clickedVacationName;\n    };\n\n    this.displayVacationPriceInEditModal = clickedVacationPrice => {\n      // Dusplaying 'Edit' Modal Price\n      const editedVacationPriceField = document.getElementById(\"editedVacationPrice\");\n      editedVacationPriceField.valueAsNumber = clickedVacationPrice;\n    };\n\n    this.displayVacationDatesInEditModal = (clickedVacationStartDate, clickedVacationEndDate) => {\n      // Displaying 'Edit' Modal Dates\n      const editStartDateField = document.getElementById(\"editStartDate\");\n      const editEndDateField = document.getElementById(\"editEndDate\"); // Start Date\n\n      let startDateYear = +clickedVacationStartDate.split('/')[2];\n      let startDateMonth = +clickedVacationStartDate.split('/')[1];\n      let startDateDay = +clickedVacationStartDate.split('/')[0];\n      let fullStartDate = startDateYear + \"-\" + startDateMonth + \"-\" + startDateDay; // End Date\n\n      let endDateYear = +clickedVacationEndDate.split('/')[2];\n      let endDateMonth = +clickedVacationEndDate.split('/')[1];\n      let endDateDay = +clickedVacationEndDate.split('/')[0];\n      let fullEndDate = endDateYear + \"-\" + endDateMonth + \"-\" + endDateDay;\n      editStartDateField.valueAsDate = new Date(fullStartDate);\n      editEndDateField.valueAsDate = new Date(fullEndDate);\n    };\n\n    this.displayVacationDescriptionInEditModal = clickedVacationDescription => {\n      // Displaying 'Edit' Modal Description\n      const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\");\n      editVacationDescriptionField.value = clickedVacationDescription;\n    };\n\n    this.displayVacationImageInEditModal = clickedVacationImageURL => {\n      const editedVacationImageURL = document.getElementById(\"editedVacationImageURL\");\n      editedVacationImageURL.value = clickedVacationImageURL;\n    };\n\n    this.displayAdditionModal = () => {\n      // Defining the 'Add' Modal in the UI\n      const addModalBackground = document.getElementById(\"addModalContainer\");\n      const addModalDoneBtn = document.getElementById(\"addModalDoneBtn\");\n      const addModalCancelBtn = document.getElementById(\"addModalCancelBtn\");\n      addModalBackground.style.display = \"block\"; // Defining the event listeners for the modal\n\n      addModalCancelBtn.onclick = () => {\n        this.hideModal(addModalBackground);\n      };\n\n      addModalDoneBtn.onclick = () => {\n        this.addVacation(addModalBackground);\n      };\n\n      window.addEventListener(\"click\", event => {\n        if (event.target === addModalBackground) {\n          this.hideModal(addModalBackground);\n        }\n      });\n    };\n\n    this.displayEditModal = clickedVacation => {\n      // Defining the 'Edit' Modal in the UI\n      const editModalBackground = document.getElementById(\"editModalContainer\");\n      const editModalIcon = document.getElementById(\"editModalIcon\");\n      const editModalHeader = document.getElementById(\"editModalHeader\");\n      const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\n      const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\"); // Displaying the values inside the 'Edit' Modal\n\n      this.displayVacationNameInEditModal(clickedVacation.vacationName);\n      this.displayVacationPriceInEditModal(clickedVacation.vacationPrice);\n      this.displayVacationDescriptionInEditModal(clickedVacation.vacationDescription);\n      this.displayVacationDatesInEditModal(clickedVacation.startDate, clickedVacation.endDate);\n      this.displayVacationImageInEditModal(clickedVacation.imageURL);\n      editModalBackground.style.display = \"block\";\n      editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\n      editModalIcon.src = clickedVacation.imageURL; // Defining the event listeners for the modal\n\n      editModalCancelBtn.onclick = () => {\n        this.hideModal(editModalBackground);\n      };\n\n      editModalDoneBtn.onclick = () => {\n        this.updateVacation(clickedVacation, editModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === editModalBackground) {\n          editModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.displayDeletionModal = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\n      const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\n      const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\n      const deleteBtn = document.getElementById(\"deleteBtn\");\n      const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\n      const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\n      deletionModalBackground.style.display = \"block\";\n      deletionModalHeader.textContent = \"Confirm Your Deletion\";\n      deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\n      deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`; // Defining the event listeners for the modal\n\n      dontDeleteBtn.onclick = () => {\n        this.hideModal(deletionModalBackground);\n      };\n\n      deleteBtn.onclick = () => {\n        this.deleteVacation(clickedVacationID);\n        this.hideModal(deletionModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === deletionModalBackground) {\n          deletionModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.clearModalInputs = () => {\n      // Clearing the inputs of the 'Add' Modal\n      let additionModalNameInput = document.getElementById(\"addedVacationName\");\n      let additionModalStartDateInput = document.getElementById(\"addStartDate\");\n      let additionModalEndDateInput = document.getElementById(\"addEndDate\");\n      let additionModalPriceInput = document.getElementById(\"addedVacationPrice\");\n      let additionModalDescriptionInput = document.getElementById(\"addedVacationDescription\");\n      let additionModalImageURLInput = document.getElementById(\"addedVacationImageURL\");\n      additionModalNameInput.value = \"\";\n      additionModalStartDateInput.value = \"\";\n      additionModalEndDateInput.value = \"\";\n      additionModalPriceInput.valueAsNumber = 0;\n      additionModalDescriptionInput.value = \"\";\n      additionModalImageURLInput.value = \"\";\n    };\n\n    this.hideModal = modal => {\n      modal.style.display = \"none\";\n      this.clearModalInputs();\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 17\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topNavbarSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"adminText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 29\n      }\n    }, \"Logged as an Admin\"), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"reportsNavItem\",\n      className: \"topNavItem reportsNavItem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/reports\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 33\n      }\n    }, \"View Reports Page\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 21\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations You Can Edit\") : /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 21\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"addVacationSquare\",\n      onClick: this.onVacationAdditionAttempt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newVacationText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 37\n      }\n    }, \"New Vacation\"))), this.state.allVacations.length > 0 ? // ---------- In case the user type in the server's cache is type 'USER' ---------- //\n    this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(VacationComponent, {\n      key: index,\n      vacation: vacation,\n      onVacationFollowAttempt: this.onVacationFollowAttempt,\n      validateVacationIsNotLikedByTheUser: this.validateVacationIsNotLikedByTheUser,\n      onVacationDeleteAttempt: this.onVacationDeleteAttempt,\n      onVacationEditAttempt: this.onVacationEditAttempt,\n      userTypeFromServerCache: this.userTypeFromServerCache,\n      disableBtn: this.disableButton,\n      enableBtn: this.enableButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 33\n      }\n    })) // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\n    :\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"noVcationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"settingsImage\",\n      src: settingsImage,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 33\n      }\n    }, \"Oops, We Could Not Find Any Vacations\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"deletionModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"deletionModalText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"deletionModalVacationName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"deleteModalIcon\",\n      src: deleteSVG,\n      alt: \"Delete Vacation Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"dontDeleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 29\n      }\n    }, \"Don't Delete\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"deleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 29\n      }\n    }, \"Delete\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"editModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"editModalIcon\",\n      alt: \"Add New Vacation Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationName\",\n      label: \"Name\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editDatesSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      min: new Date().toISOString().slice(0, 10),\n      max: \"2999-01-01\",\n      id: \"editStartDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 33\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      min: new Date().toISOString().slice(0, 10),\n      max: \"2999-01-01\",\n      id: \"editEndDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationPrice\",\n      type: \"number\",\n      label: \"Price\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationDescription\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationImageURL\",\n      label: \"Image URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 29\n      }\n    }, \"The Image You Upload Will Be Saved!\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalCancelBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalDoneBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1211,\n        columnNumber: 29\n      }\n    }, \"Update\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"addModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220,\n        columnNumber: 25\n      }\n    }, \"Add a New Vacation !\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"addModalIcon\",\n      src: spinningEarthSVG,\n      alt: \"Vacation URL Is Broken\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationName\",\n      label: \"Name\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"addDatesSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      min: new Date().toISOString().slice(0, 10),\n      max: \"2999-01-01\",\n      id: \"addStartDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 33\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      min: new Date().toISOString().slice(0, 10),\n      max: \"2999-01-01\",\n      id: \"addEndDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationPrice\",\n      type: \"number\",\n      label: \"Price\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1233,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationDescription\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"addedVacationImageURL\",\n      label: \"Image URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 29\n      }\n    }, \"The Image You Upload Will Be Saved!\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1241,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addModalCancelBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addModalDoneBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 29\n      }\n    }, \"Add\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","store","axios","ActionType","withRouter","NavLink","settingsImage","isUserLoggedValidator","interceptorHandler","getUserInfoFromServerCache","VacationComponent","TextField","socketIOClient","AllVacations","constructor","props","unSubscribeStore","userTypeFromServerCache","userNameFromServerCache","socket","socketID","componentWillUnmount","disconnect","vacationsErrorHandler","componentDidMount","subscribe","setState","allVacations","getState","isUserLogged","generateSocketUserID","initiateSocket","checkIfGlobalStoraHasAllVacations","getAllVacationsFromServer","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","followVacation","clickedVacation","likeButtonsNodeList","document","getElementsByClassName","likeButtonsArr","Array","from","disableButtonsGroup","clickedVacationID","vacationID","post","socketInfo","userName","emit","enableButtonsGroup","unfollowVacation","addVacation","addModalBackground","allInputsArr","getAllInputsArrForAddedVacation","isNewVacationDataValid","newVacationData","validateNewVacationData","serverResponse","newlyAddedVacation","hideModal","updateVacation","editModalBackground","getAllInputsArrForUpdatedVacation","convertedValidDataForUIDisplay","convertVacationDataForUIDisplay","put","imageToPreview","imageURL","deleteVacation","userInfoFromServerCache","userType","allVacationsInGlobalStore","length","registerAllSocketListeners","on","addVacationViaSocketIO","updateVacationInfoViaSocketIO","deleteVacationViaSocketIO","increaseVacationFollowersCountViaSocketIO","decreaseVacationFollowersCountViaSocketIO","inputsArr","clickedVacationFollowersCount","followersCount","newNameTrimmedValue","value","trim","vacationStartDateValue","vacationEndDateValue","newPriceValue","valueAsNumber","newDescriptionTrimmedValue","newVacationURL","convertedStartDate","convertStartDateForUIDisplay","convertedEndDate","convertEndDateForUIDisplay","vacationName","startDate","endDate","vacationPrice","vacationDescription","startDateYear","split","startDateMonth","startDateDay","fullStartDate","endDateYear","endDateMonth","endDateDay","fullEndDate","getElementById","vacationStartDate","vacationEndDate","vacationImageURL","onVacationFollowAttempt","vacationIsNotAlreadyLikedByTheUser","validateVacationIsNotLikedByTheUser","history","push","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationInGlobalStore","find","favoriteVacation","undefined","getIndexOfVacationByID","indexOfClickedVacationInGlobalStore","indexOf","getIndexOfFavoriteVacationByID","onVacationAdditionAttempt","displayAdditionModal","onVacationEditAttempt","event","button","target","disableButton","displayEditModal","enableButton","onVacationDeleteAttempt","displayDeletionModal","isNewVacationURLValid","validateNewVacationURL","isNewDescriptionValid","validateNewDescription","isNewPriceValid","validateNewPrice","areDatesValid","validateNewDates","isNewNameValid","validateNewName","newTrimmedName","newPrice","newTrimmedDescription","newVacationStartDate","newVacationEndDate","currentDate","Date","setHours","newTrimmedImageURL","AddVacation","updatedVacationID","indexOfClickedFavoriteVacationInGlobalStore","UpdateVacation","UpdateFavoriteVacation","DeleteVacationViaSocketIO","DeleteFavoriteVacationViaSocketIO","indexOfFavoriteClickedVacationInGlobalStore","newFollowersCount","IncreaseFavoriteVacationFollowersCount","IncreaseVacationFollowersCount","checkIfUserShouldIncreaseFollowersCountInUI","DecreaseFavoriteVacationFollowersCount","DecreaseVacationFollowersCount","checkIfUserShouldDecreaseFollowersCountInUI","clickedVacationIndex","SetFollowedVacation","UnfollowVacation","userID","Math","floor","random","query","disabled","style","cursor","buttonsGroup","snackbar","className","textContent","setTimeout","replace","displayVacationNameInEditModal","clickedVacationName","editedVacationNameField","displayVacationPriceInEditModal","clickedVacationPrice","editedVacationPriceField","displayVacationDatesInEditModal","clickedVacationStartDate","clickedVacationEndDate","editStartDateField","editEndDateField","valueAsDate","displayVacationDescriptionInEditModal","clickedVacationDescription","editVacationDescriptionField","displayVacationImageInEditModal","clickedVacationImageURL","editedVacationImageURL","addModalDoneBtn","addModalCancelBtn","display","onclick","window","addEventListener","editModalIcon","editModalHeader","editModalDoneBtn","editModalCancelBtn","src","deletionModalBackground","deletionModalHeader","deletionModalTextParagraph","deleteBtn","dontDeleteBtn","deletionModalVacationName","clearModalInputs","additionModalNameInput","additionModalStartDateInput","additionModalEndDateInput","additionModalPriceInput","additionModalDescriptionInput","additionModalImageURLInput","modal","state","render","map","vacation","index","deleteSVG","toISOString","slice","spinningEarthSVG"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport deleteSVG from '../../assets/deleteSVG.svg';\r\nimport spinningEarthSVG from '../../assets/spinningEarthSVG.svg';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserInfoFromServerCache } from '../../models/GetUserInfoFromServerCache';\r\nimport VacationComponent from '../vacationComponent/VacationComponent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './allVacations.css';\r\nimport '../topNavbar/topNavbar.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n    private userTypeFromServerCache: string;\r\n    private userNameFromServerCache: string;\r\n    private socket: any;\r\n    private socketID: number;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n\r\n        try {\r\n            // Disconnecting from the socket connection\r\n            this.socket.disconnect();\r\n        }\r\n        catch {\r\n            this.vacationsErrorHandler('Something went wrong while trying to disconnect from Socket');\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener. Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            \r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        if (isUserLogged) {\r\n            await this.getUserInfoFromServerCache();\r\n            this.socketID = this.generateSocketUserID();\r\n\r\n            // Initiating the Socket connection to the server\r\n            this.initiateSocket();\r\n        }\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n\r\n        // Getting all the vacations from the server and inserting them to the Global Store\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations: Vacation[] = response.data;\r\n\r\n            // Insert all the vacations from the server to the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            // In case of an error, receiving the error, and displaying it in a Pop-Up UI message for the user\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function occurs after validations approved that this vacation can be liked by the user\r\n\r\n        interceptorHandler();\r\n\r\n        // Defining all 'like' buttons in order to disable them until the request is done\r\n        const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n        const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n        try {\r\n\r\n            this.disableButtonsGroup(likeButtonsArr);\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to follow that vacation\r\n            const clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Updating The Global Store\r\n            // store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n\r\n            // Emitting a socket message to the server, in order to inform all clients about the new followed vacation in the UI\r\n            const socketInfo = {\r\n                clickedVacationID,\r\n                userName: this.userNameFromServerCache\r\n            };\r\n\r\n            this.socket.emit('increase-vacation-followers-count', socketInfo);\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n\r\n        }\r\n\r\n        finally {\r\n            this.enableButtonsGroup(likeButtonsArr);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function is designated to make the user 'unfollow' a vacation\r\n        interceptorHandler();\r\n\r\n        // Defining all 'like' buttons in order to disable them until the request is done\r\n        const likeButtonsNodeList = document.getElementsByClassName(\"likeBtn\");\r\n        const likeButtonsArr = Array.from(likeButtonsNodeList) as HTMLButtonElement[];\r\n\r\n        try {\r\n\r\n            this.disableButtonsGroup(likeButtonsArr);\r\n            \r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n            // Emitting a socket message to the server, in order to inform all clients about the new unfollowed vacation in the UI\r\n            const socketInfo = {\r\n                clickedVacationID,\r\n                userName: this.userNameFromServerCache\r\n            };\r\n            this.socket.emit('decrease-vacation-followers-count', socketInfo);\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n        \r\n        finally {\r\n            this.enableButtonsGroup(likeButtonsArr);\r\n        }\r\n    }\r\n\r\n    private addVacation = async (addModalBackground: any) => {\r\n\r\n        let allInputsArr = this.getAllInputsArrForAddedVacation();\r\n        \r\n        // Validating that all the fields of the added vacation are valid\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let serverResponse = await axios.post<Vacation[]>(`http://localhost:3001/vacations/add_vacation`, newVacationData);\r\n                let newlyAddedVacation: Vacation = serverResponse.data[0];\r\n                \r\n                // Emitting a socket command to the server, in order to inform all clients about the new vacation\r\n                this.socket.emit('add-vacation', newlyAddedVacation);\r\n\r\n                this.hideModal(addModalBackground);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateVacation = async (clickedVacation : Vacation, editModalBackground: any) => {\r\n\r\n        const allInputsArr = this.getAllInputsArrForUpdatedVacation();\r\n        \r\n        // Validating all fields of the updated vacation are valid, and getting back the valid data\r\n        let [isNewVacationDataValid, newVacationData] = this.validateNewVacationData(allInputsArr);\r\n\r\n        if (isNewVacationDataValid) {\r\n\r\n            // Converting the data to for suitable UI display -> preventing retrieving the updated vacation from the DB\r\n            const convertedValidDataForUIDisplay = this.convertVacationDataForUIDisplay(allInputsArr, clickedVacation);\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n    \r\n                let clickedVacationID: number = clickedVacation.vacationID;\r\n                const response = await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData);\r\n\r\n                const imageToPreview = response.data;\r\n                clickedVacation.imageURL = imageToPreview;\r\n\r\n                // Emitting a socket command to the server, in order to inform all clients about the updated vacation\r\n                this.socket.emit('update-vacation-info', convertedValidDataForUIDisplay);\r\n\r\n                this.hideModal(editModalBackground);\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    private deleteVacation = async (clickedVacationID: number) => {\r\n\r\n        interceptorHandler();\r\n\r\n        try {\r\n\r\n            await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`);\r\n\r\n            // Emitting a socket command to the server, in order to inform all clients about the new deleted vacation\r\n            this.socket.emit('delete-vacation', clickedVacationID);\r\n        }\r\n        \r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private getUserInfoFromServerCache = async () => {\r\n\r\n        // This function retrieves the user type from the server, because we don't trust the client to tell us his user type\r\n        \r\n        try {\r\n            let userInfoFromServerCache = await getUserInfoFromServerCache();\r\n\r\n            this.userTypeFromServerCache = userInfoFromServerCache.userType;\r\n            this.userNameFromServerCache = userInfoFromServerCache.userName;\r\n        }\r\n\r\n        catch (error) {\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the Gloabl Store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private registerAllSocketListeners = () => {\r\n\r\n        // Registering all Socket.io Listeners\r\n\r\n        // Registering an 'add vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('add-vacation', (newlyAddedVacation: Vacation) => {\r\n            this.addVacationViaSocketIO(newlyAddedVacation);\r\n        });\r\n\r\n        // Registering an 'update vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('update-vacation-info', (convertedValidDataForUIDisplay: Vacation) => {\r\n            this.updateVacationInfoViaSocketIO(convertedValidDataForUIDisplay);\r\n        });\r\n\r\n        // Registering a 'delete vacation' listener, which updates the UI for all the clients\r\n        this.socket.on('delete-vacation', (clickedVacationID: number) => {\r\n            this.deleteVacationViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n        // Registering an 'increase vacation followers count' listener, which updates the UI for all the clients\r\n        this.socket.on('increase-vacation-followers-count', (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n            this.increaseVacationFollowersCountViaSocketIO(socketInfo);\r\n        });\r\n\r\n        // Registering a 'decrease vacation followers count' listener, which updates the UI for all the clients\r\n        this.socket.on('decrease-vacation-followers-count', (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n            this.decreaseVacationFollowersCountViaSocketIO(socketInfo);\r\n        });\r\n    }\r\n\r\n    private convertVacationDataForUIDisplay = (inputsArr : HTMLInputElement[], clickedVacation: Vacation) => {\r\n\r\n        // This function gets a vacation data that the admin has changed locally, and converts it to display it locally (without reaching for the DB)\r\n\r\n        const clickedVacationID: number = clickedVacation.vacationID;\r\n        const clickedVacationFollowersCount: number = clickedVacation.followersCount;\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n\r\n        const convertedStartDate = this.convertStartDateForUIDisplay(vacationStartDateValue);\r\n        const convertedEndDate = this.convertEndDateForUIDisplay(vacationEndDateValue);\r\n\r\n        // Creating the converted vacation UI display object\r\n        const convertedValidDataForUIDisplay = {\r\n            vacationID: clickedVacationID,\r\n            vacationName: newNameTrimmedValue,\r\n            startDate: convertedStartDate,\r\n            endDate: convertedEndDate,\r\n            vacationPrice: newPriceValue,\r\n            vacationDescription: newDescriptionTrimmedValue,\r\n            imageURL: newVacationURL,\r\n            followersCount: clickedVacationFollowersCount\r\n        }\r\n\r\n        return convertedValidDataForUIDisplay;\r\n    }\r\n\r\n    private convertStartDateForUIDisplay = (vacationStartDateValue: string) => {\r\n\r\n        // This function converts the start date of a given vacation, to be suitable for the UI\r\n\r\n        let startDateYear = +vacationStartDateValue.split('-')[2];\r\n        let startDateMonth = +vacationStartDateValue.split('-')[1];\r\n        let startDateDay = +vacationStartDateValue.split('-')[0];\r\n        let fullStartDate = startDateYear+\"/\"+startDateMonth+\"/\"+startDateDay;\r\n\r\n        return fullStartDate;\r\n    }\r\n\r\n    private convertEndDateForUIDisplay = (vacationEndDateValue: string) => {\r\n\r\n        // This function converts the start date of a given vacation, to be suitable for the UI\r\n\r\n        let endDateYear = +vacationEndDateValue.split('-')[2];\r\n        let endDateMonth = +vacationEndDateValue.split('-')[1];\r\n        let endDateDay = +vacationEndDateValue.split('-')[0];\r\n        let fullEndDate = endDateYear+\"/\"+endDateMonth+\"/\"+endDateDay;\r\n\r\n        return fullEndDate;\r\n    }\r\n\r\n    private getAllInputsArrForAddedVacation = () => {\r\n\r\n        // Defining, and returning an array of all the inputs inside the 'Add Vacation' modal\r\n\r\n        const vacationName: HTMLInputElement = document.getElementById(\"addedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.getElementById(\"addStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.getElementById(\"addEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.getElementById(\"addedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.getElementById(\"addedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.getElementById(\"addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n\r\n        return allInputsArr;\r\n    }\r\n\r\n    private getAllInputsArrForUpdatedVacation = () => {\r\n\r\n        // Defining, and returning an array of all the inputs inside the 'Update Vacation' modal\r\n\r\n        const vacationName: HTMLInputElement = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        const vacationImageURL: HTMLInputElement = document.getElementById(\"editedVacationImageURL\") as HTMLInputElement;\r\n\r\n        const allInputsArr = [vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription, vacationImageURL];\r\n\r\n        return allInputsArr;\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the 'follow' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        const isUserLogged = isUserLoggedValidator();\r\n        \r\n        // If the user is currently logged in\r\n        if (isUserLogged) {\r\n            \r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is already liked by the user, unfollow that vacation.\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateVacationIsNotLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        // Validating the vacation chosen is not already liked by the user\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find(\r\n            favoriteVacation => favoriteVacation.vacationID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation from the Global Store's 'all vacations' array\r\n\r\n        let allVacations: Vacation[] = store.getState().allVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = allVacations.find( allVacations =>  allVacations.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = allVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation from the Global Store's 'favorites' array\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private onVacationAdditionAttempt = () => {\r\n\r\n        /*\r\n            Before the 'add' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            this.displayAdditionModal();\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationEditAttempt = (clickedVacation: Vacation, event : MouseEvent) => {\r\n\r\n        /*\r\n            Before the 'edit' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to edit a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n            const button = event.target as HTMLButtonElement;\r\n            this.disableButton(button);\r\n            this.displayEditModal(clickedVacation);\r\n            this.enableButton(button);\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationDeleteAttempt = (clickedVacation: Vacation, event : MouseEvent) => {\r\n\r\n        /*\r\n            Before the 'delete' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n        \r\n        if (isUserLogged) {\r\n            const button = event.target as HTMLButtonElement;\r\n            this.disableButton(button);\r\n            this.displayDeletionModal(clickedVacation);\r\n            this.enableButton(button);\r\n        }\r\n\r\n        // If the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateNewVacationData = (inputsArr: HTMLInputElement[]) => {\r\n\r\n        // This function validates all the Modal's fields are valid\r\n\r\n        const newNameTrimmedValue = inputsArr[0].value.trim();\r\n        const vacationStartDateValue = inputsArr[1].value;\r\n        const vacationEndDateValue = inputsArr[2].value;\r\n        const newPriceValue = inputsArr[3].valueAsNumber;\r\n        const newDescriptionTrimmedValue = inputsArr[4].value.trim();\r\n        const newVacationURL = inputsArr[5].value.trim();\r\n \r\n\r\n        // Validating all Modal fields are valid\r\n\r\n        let isNewVacationURLValid = this.validateNewVacationURL(newVacationURL);\r\n        let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\r\n        let isNewPriceValid = this.validateNewPrice(newPriceValue);\r\n        let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\r\n        let isNewNameValid = this.validateNewName(newNameTrimmedValue);\r\n\r\n        if (isNewNameValid) {\r\n            if (isNewPriceValid) {\r\n                if (isNewDescriptionValid) {\r\n                    if (areDatesValid) {\r\n                        if (isNewVacationURLValid) {\r\n\r\n                            // Creating an object that has all the necessary data for adding / updating a vacation locally\r\n                            let newVacationData = {\r\n                                vacationName: newNameTrimmedValue,\r\n                                vacationPrice: newPriceValue,\r\n                                vacationDescription: newDescriptionTrimmedValue,\r\n                                startDate: vacationStartDateValue,\r\n                                endDate: vacationEndDateValue,\r\n                                imageURL: newVacationURL,\r\n                            };\r\n    \r\n                            // retrning the data + a 'true', in order to inform the caller that the data is valid\r\n                            return [true, newVacationData];\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // In case one of the parameters of the updated vacation is not valid\r\n        return [false, {}];\r\n    }\r\n\r\n    private validateNewName = (newTrimmedName: string) => {\r\n\r\n        // Validating the vacation's name inside the Modal\r\n\r\n        if (newTrimmedName !== \"\") {\r\n            if (newTrimmedName.length >= 3) {\r\n                if (newTrimmedName.length <= 44) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewPrice = (newPrice: number) => {\r\n\r\n        // Validating the vacation's price inside the Modal\r\n\r\n        if (newPrice > 0) {\r\n            if (newPrice < 100000) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new price must be larger than 0 and Lower than 100,000\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDescription = (newTrimmedDescription: string) => {\r\n\r\n        // Validating the vacation's description inside the Modal\r\n\r\n        if (newTrimmedDescription !== \"\") {\r\n            if (newTrimmedDescription.length >= 5) {\r\n                if (newTrimmedDescription.length <= 249) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDates = (newVacationStartDate: string, newVacationEndDate: string) => {\r\n\r\n        // Validating the logic of the dates inputs in the 'add Modal'\r\n\r\n        if (newVacationStartDate !== \"\") {\r\n            if (newVacationStartDate !== undefined) {\r\n\r\n                if (newVacationEndDate !== \"\") {\r\n                    if (newVacationEndDate !== undefined) {\r\n\r\n                        let currentDate = new Date().setHours(0, 0, 0, 0);\r\n                        let startDate = new Date(newVacationStartDate).setHours(0, 0, 0, 0);\r\n                        let endDate = new Date(newVacationEndDate).setHours(0, 0, 0, 0);\r\n\r\n                        // Checking if the starting date is not in the past\r\n                        if (startDate >= currentDate) {\r\n\r\n                            // Checking if the ending date is greater than the starting date\r\n                            if (endDate > startDate) {\r\n                                return true;\r\n                            }\r\n\r\n                            else {\r\n                                this.vacationsErrorHandler(\"The return date must be later than the starting date\");\r\n                                return false;\r\n                            }\r\n                        }\r\n\r\n                        else {\r\n                            this.vacationsErrorHandler(\"The starting date must be later than today\");\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewVacationURL = (newTrimmedImageURL: string) => {\r\n\r\n        // Validating the vacation's URL inside the Modal\r\n\r\n        if (newTrimmedImageURL !== \"\") {\r\n            if (newTrimmedImageURL.length >= 10) {\r\n                if (newTrimmedImageURL.length <= 998) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Image URL must be between 10 - 998 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private addVacationViaSocketIO = (newlyAddedVacation: Vacation) => {\r\n\r\n        // This function occurs whenever an admin adds a new vacation (the listener triggers this function using a Socket.io message).\r\n        // Updating the Global Store with the new vacation, in order to update the UI\r\n\r\n        store.dispatch({type: ActionType.AddVacation, payload: newlyAddedVacation});\r\n    }\r\n\r\n    private updateVacationInfoViaSocketIO = (convertedValidDataForUIDisplay: Vacation) => {\r\n\r\n        // Updating the user's UI with the vacation that was updated (edited) by the admin, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let updatedVacationID = convertedValidDataForUIDisplay.vacationID;\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(updatedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(updatedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.UpdateVacation, payload: {indexOfClickedVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n            store.dispatch({type: ActionType.UpdateFavoriteVacation, payload: {indexOfClickedFavoriteVacationInGlobalStore, convertedValidDataForUIDisplay} });\r\n        }\r\n    }\r\n\r\n    private deleteVacationViaSocketIO = (clickedVacationID: number) => {\r\n        \r\n        // Updating the user's UI with the vacation that was deleted by the admin, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedFavoriteVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n\r\n        // Updating the vacations in the 'all vacations' component\r\n        store.dispatch({type: ActionType.DeleteVacationViaSocketIO, payload: indexOfClickedVacationInGlobalStore });\r\n\r\n        // Checking if the user has liked this vacation\r\n        // Updating the vacations in the user's 'favorite vacations' component\r\n        if (indexOfClickedFavoriteVacationInGlobalStore !== -1) {\r\n            store.dispatch({type: ActionType.DeleteFavoriteVacationViaSocketIO, payload: indexOfClickedFavoriteVacationInGlobalStore });\r\n        }\r\n    }\r\n\r\n    private increaseVacationFollowersCountViaSocketIO = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        // Updating the user's UI with the followers count of the vacation that was liked by other users, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\r\n\r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount + 1;\r\n\r\n        // Checking if the user has liked this vacation\r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.IncreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.IncreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n\r\n        this.checkIfUserShouldIncreaseFollowersCountInUI(socketInfo);\r\n    }\r\n\r\n    private decreaseVacationFollowersCountViaSocketIO = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        // Updating the user's UI with the followers count of the vacation that was unliked by other users, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(socketInfo.clickedVacationID);\r\n        let indexOfFavoriteClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(socketInfo.clickedVacationID);\r\n        \r\n        let newFollowersCount = store.getState().allVacations[indexOfClickedVacationInGlobalStore].followersCount - 1;\r\n\r\n        // Checking if the user has liked this vacation\r\n        if (indexOfFavoriteClickedVacationInGlobalStore !== -1) {\r\n            \r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.DecreaseFavoriteVacationFollowersCount, payload: {indexOfFavoriteClickedVacationInGlobalStore, newFollowersCount}});\r\n        }\r\n\r\n        // Updating the vacation's followers count in the UI\r\n        store.dispatch({type: ActionType.DecreaseVacationFollowersCount, payload: {indexOfClickedVacationInGlobalStore, newFollowersCount}});\r\n\r\n        this.checkIfUserShouldDecreaseFollowersCountInUI(socketInfo);\r\n    }\r\n\r\n    private checkIfUserShouldIncreaseFollowersCountInUI = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        const clickedVacationID = socketInfo.clickedVacationID;\r\n        const clickedVacationIndex = this.getIndexOfVacationByID(clickedVacationID);\r\n        const clickedVacation = store.getState().allVacations[clickedVacationIndex];\r\n\r\n        if (this.userNameFromServerCache === socketInfo.userName) {\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        };\r\n    }\r\n\r\n    private checkIfUserShouldDecreaseFollowersCountInUI = (socketInfo: {clickedVacationID: number, userName: string}) => {\r\n\r\n        const clickedVacationID = socketInfo.clickedVacationID;\r\n        const clickedVacationIndex = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n        if (this.userNameFromServerCache === socketInfo.userName) {\r\n            store.dispatch({type: ActionType.UnfollowVacation, payload: clickedVacationIndex});\r\n        };\r\n    }\r\n\r\n    private generateSocketUserID = () => {\r\n        const userID = Math.floor(Math.random() * 10000);\r\n        return userID;\r\n    }\r\n\r\n    private initiateSocket = () => {\r\n\r\n        // Connecting to the server's socket\r\n        this.socket = socketIOClient('http://localhost:3002', { query: \"userID=\" + this.socketID});\r\n        this.registerAllSocketListeners();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = true;\r\n        button.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableButton = (button : HTMLButtonElement) : void => {\r\n        button.disabled = false;\r\n        button.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private disableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.disableButton(button)\r\n        }\r\n    }\r\n\r\n    private enableButtonsGroup = (buttonsGroup : HTMLButtonElement[]) => {\r\n\r\n        for (let button of buttonsGroup) {\r\n            this.enableButton(button)\r\n        }\r\n    }\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private displayVacationNameInEditModal = (clickedVacationName: string) => {\r\n\r\n        // Displaying 'Edit' Modal Name\r\n\r\n        const editedVacationNameField = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        editedVacationNameField.value = clickedVacationName;\r\n    }\r\n\r\n    private displayVacationPriceInEditModal = (clickedVacationPrice: number) => {\r\n\r\n        // Dusplaying 'Edit' Modal Price\r\n\r\n        const editedVacationPriceField = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        editedVacationPriceField.valueAsNumber = clickedVacationPrice;\r\n    }\r\n\r\n    private displayVacationDatesInEditModal = (clickedVacationStartDate: string, clickedVacationEndDate: string) => {\r\n\r\n        // Displaying 'Edit' Modal Dates\r\n\r\n        const editStartDateField = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const editEndDateField = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n\r\n        // Start Date\r\n        let startDateYear = +clickedVacationStartDate.split('/')[2];\r\n        let startDateMonth = +clickedVacationStartDate.split('/')[1];\r\n        let startDateDay = +clickedVacationStartDate.split('/')[0];\r\n        let fullStartDate = startDateYear+\"-\"+startDateMonth+\"-\"+startDateDay;\r\n\r\n        // End Date\r\n        let endDateYear = +clickedVacationEndDate.split('/')[2];\r\n        let endDateMonth = +clickedVacationEndDate.split('/')[1];\r\n        let endDateDay = +clickedVacationEndDate.split('/')[0];\r\n        let fullEndDate = endDateYear+\"-\"+endDateMonth+\"-\"+endDateDay;\r\n        \r\n        editStartDateField.valueAsDate = new Date(fullStartDate);\r\n        editEndDateField.valueAsDate = new Date(fullEndDate);\r\n    }\r\n\r\n    private displayVacationDescriptionInEditModal = (clickedVacationDescription: string) => {\r\n\r\n        // Displaying 'Edit' Modal Description\r\n\r\n        const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        editVacationDescriptionField.value = clickedVacationDescription;\r\n    }\r\n\r\n    private displayVacationImageInEditModal = (clickedVacationImageURL: string) => {\r\n        \r\n        const editedVacationImageURL = document.getElementById(\"editedVacationImageURL\") as HTMLInputElement;\r\n        editedVacationImageURL.value = clickedVacationImageURL;\r\n    }\r\n\r\n    private displayAdditionModal = () => {\r\n\r\n        // Defining the 'Add' Modal in the UI\r\n\r\n        const addModalBackground = document.getElementById(\"addModalContainer\");\r\n        const addModalDoneBtn = document.getElementById(\"addModalDoneBtn\");\r\n        const addModalCancelBtn = document.getElementById(\"addModalCancelBtn\");\r\n\r\n        addModalBackground.style.display = \"block\";\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        addModalCancelBtn.onclick = () => {this.hideModal(addModalBackground)};\r\n\r\n        addModalDoneBtn.onclick = () => {\r\n\r\n            this.addVacation(addModalBackground);\r\n        };\r\n\r\n        window.addEventListener(\"click\", (event: MouseEvent) => {\r\n            if (event.target === addModalBackground) {\r\n                this.hideModal(addModalBackground);\r\n            }\r\n        })\r\n    }\r\n\r\n    private displayEditModal = (clickedVacation: Vacation) => {\r\n\r\n        // Defining the 'Edit' Modal in the UI\r\n\r\n        const editModalBackground = document.getElementById(\"editModalContainer\");\r\n        const editModalIcon = document.getElementById(\"editModalIcon\") as HTMLImageElement;\r\n        const editModalHeader = document.getElementById(\"editModalHeader\");\r\n        const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\r\n        const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\");\r\n\r\n\r\n        // Displaying the values inside the 'Edit' Modal\r\n\r\n        this.displayVacationNameInEditModal(clickedVacation.vacationName);\r\n        this.displayVacationPriceInEditModal(clickedVacation.vacationPrice);\r\n        this.displayVacationDescriptionInEditModal(clickedVacation.vacationDescription);\r\n        this.displayVacationDatesInEditModal(clickedVacation.startDate, clickedVacation.endDate);\r\n        this.displayVacationImageInEditModal(clickedVacation.imageURL);\r\n        \r\n\r\n        editModalBackground.style.display = \"block\";\r\n        editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\r\n        editModalIcon.src = clickedVacation.imageURL;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        editModalCancelBtn.onclick = () => {this.hideModal(editModalBackground)};\r\n\r\n        editModalDoneBtn.onclick = () => {\r\n\r\n            this.updateVacation(clickedVacation, editModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === editModalBackground) {\r\n                editModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private displayDeletionModal = (clickedVacation: Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\r\n        const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\r\n        const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\r\n        const deleteBtn = document.getElementById(\"deleteBtn\");\r\n        const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\r\n        const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\r\n\r\n        deletionModalBackground.style.display = \"block\";\r\n        deletionModalHeader.textContent = \"Confirm Your Deletion\";\r\n        deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\r\n        deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        dontDeleteBtn.onclick = () => {this.hideModal(deletionModalBackground)};\r\n\r\n        deleteBtn.onclick = () => {\r\n            this.deleteVacation(clickedVacationID);\r\n            this.hideModal(deletionModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === deletionModalBackground) {\r\n                deletionModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearModalInputs = () => {\r\n\r\n        // Clearing the inputs of the 'Add' Modal\r\n\r\n        let additionModalNameInput = document.getElementById(\"addedVacationName\") as HTMLInputElement;\r\n        let additionModalStartDateInput = document.getElementById(\"addStartDate\") as HTMLInputElement;\r\n        let additionModalEndDateInput = document.getElementById(\"addEndDate\") as HTMLInputElement;\r\n        let additionModalPriceInput = document.getElementById(\"addedVacationPrice\") as HTMLInputElement;\r\n        let additionModalDescriptionInput = document.getElementById(\"addedVacationDescription\") as HTMLInputElement;\r\n        let additionModalImageURLInput = document.getElementById(\"addedVacationImageURL\") as HTMLInputElement;\r\n\r\n        additionModalNameInput.value = \"\";\r\n        additionModalStartDateInput.value = \"\";\r\n        additionModalEndDateInput.value = \"\";\r\n        additionModalPriceInput.valueAsNumber = 0;\r\n        additionModalDescriptionInput.value = \"\";\r\n        additionModalImageURLInput.value = \"\";\r\n    }\r\n\r\n    private hideModal = (modal: any) => {\r\n\r\n        modal.style.display = \"none\";\r\n        this.clearModalInputs();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                    {this.userTypeFromServerCache === \"ADMIN\"\r\n                    && \r\n                        <div className=\"topNavbarSection\">\r\n                            <span id=\"adminText\">Logged as an Admin</span>\r\n\r\n                            <span id=\"reportsNavItem\" className=\"topNavItem reportsNavItem\">\r\n                                <NavLink to=\"/reports\">View Reports Page</NavLink>\r\n                            </span>\r\n                        </div>\r\n                    }\r\n\r\n                    {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                    <div className=\"headerContainer\">\r\n                        {this.userTypeFromServerCache === \"ADMIN\" ?\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations You Can Edit</h2>\r\n                            :\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You</h2>\r\n                        }\r\n                    </div>\r\n                \r\n                    <div className=\"allVacations\">\r\n\r\n                        {/* If The Current User Is An Admin, Show Him The 'Add Vacation' Button */}\r\n\r\n                        {this.userTypeFromServerCache === \"ADMIN\"\r\n                            &&\r\n\r\n                            <div className=\"addVacationSquare\" onClick={this.onVacationAdditionAttempt}>\r\n                                <div className=\"newVacationText\">\r\n                                    <h2 className=\"sharp-text\">New Vacation</h2>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n\r\n                        {\r\n                            this.state.allVacations.length > 0 ?\r\n\r\n                            // ---------- In case the user type in the server's cache is type 'USER' ---------- //\r\n\r\n                            this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                                <VacationComponent key={index} vacation= {vacation} onVacationFollowAttempt= {this.onVacationFollowAttempt}\r\n                                                    validateVacationIsNotLikedByTheUser= {this.validateVacationIsNotLikedByTheUser} onVacationDeleteAttempt= {this.onVacationDeleteAttempt}\r\n                                                    onVacationEditAttempt= {this.onVacationEditAttempt} userTypeFromServerCache= {this.userTypeFromServerCache}\r\n                                                    disableBtn= {this.disableButton} enableBtn= {this.enableButton} />\r\n                            )\r\n                            \r\n                            // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\r\n                            :\r\n                            <div className=\"noVcationsSection\">\r\n                                <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                                <h1 className=\"sharp-text\">Oops, We Could Not Find Any Vacations</h1>\r\n                            </div>\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n                {/* ---------------------------------------------- Modals and Snackbar ---------------------------------------------- */}\r\n\r\n                {/* --------------- The 'Deletion' Modal --------------- */}\r\n                <div id=\"deletionModalContainer\">\r\n                    <div id=\"deletionModal\">\r\n                        <h1 id=\"deletionModalHeader\">.</h1>\r\n                        <p id=\"deletionModalText\"></p>\r\n                        <h2 id=\"deletionModalVacationName\">.</h2>\r\n\r\n                        <img id=\"deleteModalIcon\" src={deleteSVG} alt=\"Delete Vacation Modal\" />\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"dontDeleteBtn\">Don't Delete</button>\r\n                            <button id=\"deleteBtn\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"editModalContainer\">\r\n                    <div id=\"editModal\">\r\n                        <h1 id=\"editModalHeader\">.</h1>\r\n\r\n                        <img id=\"editModalIcon\" alt=\"Add New Vacation Modal\" />\r\n\r\n                        <div id=\"editInputs\">\r\n                            <TextField id=\"editedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"editDatesSection\">\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"editStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"editEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"editedVacationPrice\" type=\"number\" label=\"Price\"variant=\"standard\" />\r\n\r\n                            <TextField id=\"editedVacationDescription\" label=\"Description\" />\r\n\r\n                            <TextField id=\"editedVacationImageURL\" label=\"Image URL\" />\r\n                            <p>The Image You Upload Will Be Saved!</p>\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"editModalCancelBtn\">Cancel</button>\r\n                            <button id=\"editModalDoneBtn\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"addModalContainer\">\r\n                    <div id=\"addModal\">\r\n                        <h1 id=\"addModalHeader\">Add a New Vacation !</h1>\r\n\r\n                        <img id=\"addModalIcon\" src={spinningEarthSVG} alt=\"Vacation URL Is Broken\" />\r\n\r\n                        <div id=\"addInputs\">\r\n                            <TextField id=\"addedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"addDatesSection\">\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"addStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" min={new Date().toISOString().slice(0,10)} max={\"2999-01-01\"} id=\"addEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"addedVacationPrice\" type=\"number\" label=\"Price\" variant=\"standard\" />\r\n\r\n                            <TextField id=\"addedVacationDescription\"label=\"Description\" />\r\n\r\n                            <TextField id=\"addedVacationImageURL\" label=\"Image URL\" />\r\n                            <p>The Image You Upload Will Be Saved!</p>\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"addModalCancelBtn\">Cancel</button>\r\n                            <button id=\"addModalDoneBtn\">Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}