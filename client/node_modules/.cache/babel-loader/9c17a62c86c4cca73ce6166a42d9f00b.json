{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\favoriteVacations\\\\FavoriteVacations.tsx\";\nimport React, { Component } from 'react';\nimport fullHeart from '../../assets/likedIMG.png';\nimport axios from 'axios';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport './favoriteVacations.css';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nexport class FavoriteVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n      interceptorHandler(); // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        favoriteVacations: store.getState().favoriteVacations\n      })); // Checks whether the user's favorite vacations exist in the global store\n\n      this.checkIfGlobalStoreHasFavoriteVacations();\n    };\n\n    this.getFavoriteVacationsFromServer = async () => {\n      /*\r\n          Before getting the user's favorite vacations, checking if the user is currently logged in.\r\n          This validation happens to prevent asking the DB for the favorite vacations if the user is not logged in.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the Token inside the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          const response = await axios.get('http://localhost:3001/vacations/favorite_vacations'); // Here we are receiving all the user's favorite vacations from the server, as a JSON\n\n          const favoriteVacations = response.data; // Updating the Global Store\n\n          store.dispatch({\n            type: ActionType.GetFavoriteVacations,\n            payload: favoriteVacations\n          });\n        } catch (error) {\n          try {\n            let errorMessage = error.response.data.error;\n            this.favoriteVacationsErrorHandler(errorMessage);\n          } catch {\n            this.favoriteVacationsErrorHandler(error);\n          }\n        }\n      }\n    };\n\n    this.removeClickedVacationFromFavorites = async clickedVacationID => {\n      /*\r\n          Before unfollowing a vacation, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to unfollow a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the Token inside the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\n          let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the global store\n\n          store.dispatch({\n            type: ActionType.UnfolloweVacation,\n            payload: indexOfClickedVacationInGlobalStore\n          });\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.favoriteVacationsErrorHandler(errorMessage);\n        }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.favoriteVacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.OnUserDislikeClick = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      this.removeClickedVacationFromFavorites(clickedVacationID);\n    };\n\n    this.getIndexOfVacationByID = vacationID => {\n      // Finding and returning the index of a vacation\n      let favoriteVacations = store.getState().favoriteVacations; // Finding the clicked vacation in the global store, in order to remove it\n\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.checkIfGlobalStoreHasFavoriteVacations = () => {\n      // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\n      const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\n\n      if (favoriteVacationsInGlobalStore.length === 0) {\n        this.getFavoriteVacationsFromServer();\n      } // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\n      else {\n          this.setState({\n            favoriteVacations: favoriteVacationsInGlobalStore\n          });\n        }\n    };\n\n    this.state = {\n      favoriteVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  // ------------------------------------------------- View ------------------------------------------------- //\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, this.state.favoriteVacations.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text favoritesHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 33\n      }\n    }, \"Your Favorite Vacations\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 29\n      }\n    }, this.state.favoriteVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardWithoutInfoSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.imageURL,\n      alt: vacation.vacationDescription,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"dislike\",\n      onClick: () => this.OnUserDislikeClick(vacation),\n      src: fullHeart,\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 53\n      }\n    }, vacation.followersCount)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 45\n      }\n    }, vacation.vacationDescription), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 49\n      }\n    }, vacation.startDate), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 49\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 49\n      }\n    }, vacation.endDate)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 45\n      }\n    }, vacation.vacationPrice, \" $\")))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(FavoriteVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","fullHeart","axios","store","ActionType","withRouter","isUserLoggedValidator","interceptorHandler","FavoriteVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","getFavoriteVacationsFromServer","isUserLogged","response","get","data","dispatch","type","GetFavoriteVacations","payload","error","errorMessage","favoriteVacationsErrorHandler","removeClickedVacationFromFavorites","clickedVacationID","post","indexOfClickedVacationInGlobalStore","getIndexOfVacationByID","UnfolloweVacation","history","push","snackbar","document","getElementById","className","textContent","setTimeout","replace","OnUserDislikeClick","clickedVacation","vacationID","clickedVacationInGlobalStore","find","favoriteVacation","indexOf","favoriteVacationsInGlobalStore","length","state","Array","render","map","vacation","index","imageURL","vacationDescription","followersCount","startDate","endDate","vacationPrice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport poundingHeartAnimation from '../../assets/poundingHeart.svg';\r\nimport fullHeart from '../../assets/likedIMG.png';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport colorfulAstroid from '../../assets/wavyLine.png';\r\nimport noVacations from '../../assets/noVacations.png';\r\nimport {withRouter} from 'react-router';\r\nimport './favoriteVacations.css';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\n\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n    \r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        interceptorHandler();\r\n\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the global store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        /*\r\n            Before getting the user's favorite vacations, checking if the user is currently logged in.\r\n            This validation happens to prevent asking the DB for the favorite vacations if the user is not logged in.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the Token inside the sessionStorage\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the user's favorite vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                // Updating the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n\r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.favoriteVacationsErrorHandler(errorMessage);\r\n                }\r\n                catch {\r\n                    this.favoriteVacationsErrorHandler(error);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the Token inside the sessionStorage\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n       \r\n                let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID);\r\n    \r\n                // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the global store\r\n                store.dispatch({\r\n                    type: ActionType.UnfolloweVacation,\r\n                    payload: indexOfClickedVacationInGlobalStore\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning the index of a vacation\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        // Finding the clicked vacation in the global store, in order to remove it\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore\r\n    }\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n\r\n        const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\r\n\r\n        if (favoriteVacationsInGlobalStore.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: favoriteVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h2 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h2>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- Favorite Vacations Cards ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <div className=\"vacationCardContainer\" key={index}>\r\n\r\n                                        <div className=\"vacationCardWithoutInfoSection\">\r\n                                            <img className=\"vacationCardImg\" src={vacation.imageURL} alt={vacation.vacationDescription}/>\r\n                                \r\n                                            <div className=\"vacationCard\">\r\n                                                <div className=\"topVacationCardSection\">\r\n                                                    <img className=\"dislike\" onClick={ () => this.OnUserDislikeClick(vacation)} src={fullHeart} alt=\"Like Button\"/>\r\n                                                    <p className=\"followersText\">{vacation.followersCount}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"vacationInfoCard\">\r\n                                            <h4 className=\"resortName\">{vacation.vacationDescription}</h4>\r\n                                \r\n                                            <div className=\"vacationDates\">\r\n                                                <h4 className=\"vacationDate\">{vacation.startDate}</h4>\r\n                                                <span> - </span>\r\n                                                <h4 className=\"vacationDate\">{vacation.endDate}</h4>\r\n                                            </div>\r\n                                \r\n                                            <h4 className=\"vacationPrice\">{vacation.vacationPrice} $</h4>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);"]},"metadata":{},"sourceType":"module"}