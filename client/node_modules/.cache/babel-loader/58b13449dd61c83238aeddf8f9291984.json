{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\loginPage\\\\LoginPage.tsx\";\nimport React, { Component } from 'react';\nimport logo from \"../../assets/astronautSVG.svg\";\nimport UserLoginDetails from '../../models/UserLoginDetails';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport './loginPage.css';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport TopBanner from '../topBanner/TopBanner';\nimport { successfulLoginHandler } from \"../../models/SuccessfulLoginHandler\"; // ------------------------------------------------- This Component Displays The Login Screen ------------------------------------------------- //\n\nexport default class LoginPage extends Component {\n  // Defining the global DOM elemends\n  constructor(props) {\n    super(props); // initializing the state with empty values\n\n    this.usernameInputField = void 0;\n    this.passwordInputField = void 0;\n    this.userMessagesParagraph = void 0;\n\n    this.componentDidMount = () => {\n      // Retrieving all vacations from the DB before the user even logs in, in order to load\n      // the data behind the scenes, while the user is bussy logging -> Better UX\n      this.getAllVacationsFromServer(); // Defining global DOM elements\n\n      this.usernameInputField = document.getElementById(\"usernameFieldset\");\n      this.passwordInputField = document.getElementById(\"passwordFieldset\");\n      this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\");\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data; // Updating the Global Store\n\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.loginErrorHandler(errorMessage);\n        } catch {\n          this.loginErrorHandler(error);\n        }\n      }\n    };\n\n    this.login = async () => {\n      this.resetInputFields();\n      let userNameIsNotEmpty = this.checkIfUsernameEnteredIsEmpty();\n      let passwordIsNotEmpty = this.checkIfPasswordEnteredIsEmpty();\n\n      if (userNameIsNotEmpty && passwordIsNotEmpty) {\n        try {\n          let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password); // The response we get, should be type of 'SuccessfulLoginServerResponse' class\n\n          const serverResponse = await axios.post('http://localhost:3001/users/login', userLoginDetails); // Here we are receiving the token & user type from the data we got back from the server\n\n          const serverResponseData = serverResponse.data; // A Model that handles a successful login response from the server\n\n          successfulLoginHandler(serverResponseData); // Handle the URL routing based on the user's type\n\n          this.routingHandler();\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.loginErrorHandler(errorMessage);\n        }\n      }\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the username entered in the username's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputFieldValue\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      this.setState({\n        password: passwordInputFieldValue\n      });\n    };\n\n    this.checkIfUsernameEnteredIsEmpty = () => {\n      let userNameInputField = document.getElementById(\"usernameField\");\n      let userNameInputFieldValue = userNameInputField.value;\n      let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n\n      if (trimmedUserNameInputFieldValue === \"\") {\n        this.notifyUserAboutInvalidUserName();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkIfPasswordEnteredIsEmpty = () => {\n      let passwordInputField = document.getElementById(\"passwordField\");\n      let passwordInputFieldValue = passwordInputField.value;\n      let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\n\n      if (trimmedUserNameInputFieldValue === \"\") {\n        this.notifyUserAboutInvalidPassword();\n        return false;\n      }\n\n      return true;\n    };\n\n    this.routingHandler = () => {\n      // ---------- Navigating To The Vacations Page URl After a Successful Login ---------- //\n      this.props.history.push('/vacations');\n    };\n\n    this.notifyUserAboutInvalidUserName = () => {\n      this.usernameInputField.style.border = \"2px solid red\";\n    };\n\n    this.notifyUserAboutInvalidPassword = () => {\n      this.passwordInputField.style.border = \"2px solid red\";\n    };\n\n    this.resetInputFields = () => {\n      this.usernameInputField.style.border = \"1px solid #00d1ff\";\n      this.passwordInputField.style.border = \"1px solid #00d1ff\";\n      this.userMessagesParagraph.textContent = \"\";\n    };\n\n    this.loginErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying the error message\n      this.userMessagesParagraph.textContent = errorMessage;\n    };\n\n    this.state = {\n      userName: \"\",\n      password: \"\"\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSectionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopBanner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"login-logo\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 25\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 25\n      }\n    }, \"To Continue To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"usernameFieldset\",\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"passwordFieldset\",\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"loginBtn\",\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 29\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"notRegisteredLink sharp-text\",\n      to: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    }, \"I Don't Have An Account\")), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"userMessagesParagraph\",\n      className: \"userMessagesParagraph sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/loginPage/LoginPage.tsx"],"names":["React","Component","UserLoginDetails","NavLink","axios","store","ActionType","TopBanner","successfulLoginHandler","LoginPage","constructor","props","usernameInputField","passwordInputField","userMessagesParagraph","componentDidMount","getAllVacationsFromServer","document","getElementById","response","get","allVacations","data","dispatch","type","GetAllVacations","payload","error","errorMessage","loginErrorHandler","login","resetInputFields","userNameIsNotEmpty","checkIfUsernameEnteredIsEmpty","passwordIsNotEmpty","checkIfPasswordEnteredIsEmpty","userLoginDetails","state","userName","password","serverResponse","post","serverResponseData","routingHandler","updateUserNameValue","event","userNameInputField","target","userNameInputFieldValue","value","trimmedUserNameInputFieldValue","trim","setState","updatePasswordValue","passwordInputFieldValue","notifyUserAboutInvalidUserName","notifyUserAboutInvalidPassword","history","push","style","border","textContent","render","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport { successfulLoginHandler } from \"../../models/SuccessfulLoginHandler\";\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Login Screen ------------------------------------------------- //\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private usernameInputField: HTMLFieldSetElement;\r\n    private passwordInputField: HTMLFieldSetElement;\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n\r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Retrieving all vacations from the DB before the user even logs in, in order to load\r\n        // the data behind the scenes, while the user is bussy logging -> Better UX\r\n        this.getAllVacationsFromServer();\r\n\r\n        // Defining global DOM elements\r\n        this.usernameInputField = document.getElementById(\"usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputField = document.getElementById(\"passwordFieldset\") as HTMLFieldSetElement;\r\n        this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            // Updating the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.loginErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.loginErrorHandler(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    private login = async () => {\r\n\r\n        this.resetInputFields();\r\n\r\n        let userNameIsNotEmpty = this.checkIfUsernameEnteredIsEmpty();\r\n        let passwordIsNotEmpty = this.checkIfPasswordEnteredIsEmpty();\r\n\r\n        if (userNameIsNotEmpty && passwordIsNotEmpty) {\r\n\r\n            try {\r\n\r\n                let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n                \r\n                // The response we get, should be type of 'SuccessfulLoginServerResponse' class\r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/login', userLoginDetails);\r\n    \r\n                // Here we are receiving the token & user type from the data we got back from the server\r\n                const serverResponseData = serverResponse.data;\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n\r\n                // Handle the URL routing based on the user's type\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n\r\n                let errorMessage = error.response.data.error;\r\n                this.loginErrorHandler(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n    private checkIfUsernameEnteredIsEmpty = () => {\r\n\r\n        let userNameInputField: HTMLInputElement = document.getElementById(\"usernameField\") as HTMLInputElement;\r\n        let userNameInputFieldValue = userNameInputField.value;\r\n        let trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidUserName();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private checkIfPasswordEnteredIsEmpty = () => {\r\n\r\n        let passwordInputField: HTMLInputElement = document.getElementById(\"passwordField\") as HTMLInputElement;\r\n        let passwordInputFieldValue = passwordInputField.value;\r\n        let trimmedUserNameInputFieldValue = passwordInputFieldValue.trim();\r\n\r\n        if (trimmedUserNameInputFieldValue === \"\") {\r\n            this.notifyUserAboutInvalidPassword();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // ---------- Navigating To The Vacations Page URl After a Successful Login ---------- //\r\n\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private notifyUserAboutInvalidUserName = () => {\r\n        this.usernameInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private notifyUserAboutInvalidPassword = () => {\r\n        this.passwordInputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputField.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputField.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n    private loginErrorHandler = (errorMessage : string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"loginSection\">\r\n                    <div className=\"loginSquare\">\r\n                        <img className=\"login-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Login</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button className=\"loginBtn\" onClick={this.login}>Login</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I Don't Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}