{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport settingsImage from '../../assets/settingsImg.png';\nimport deleteSVG from \"../../assets/deleteSVG.svg\";\nimport editSVG from \"../../assets/editSVG.svg\";\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport VacationComponent from '../vacationComponent/VacationComponent';\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\nimport TextField from '@material-ui/core/TextField';\nimport './allVacations.css'; // ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\n\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n      this.checkIfGlobalStoraHasAllVacations();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      // Getting all the vacations from the server and inserting them to the Global Store\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data; // Insert all the vacations from the server to the Global Store\n\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.followVacation = async clickedVacation => {\n      // This function occurs after validations approved that this vacation can be liked by the user\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`); // Updating The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      // This function is designated to make the user 'unfollow' a vacation\n      try {\n        // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\n        let clickedVacationID = clickedVacation.vacationID;\n        await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\n        let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\n\n        store.dispatch({\n          type: ActionType.UnfolloweVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.updateVacation = async clickedVacation => {\n      const vacationName = document.getElementById(\"editedVacationName\");\n      const vacationStartDate = document.getElementById(\"editStartDate\");\n      const vacationEndDate = document.getElementById(\"editEndDate\");\n      const vacationPrice = document.getElementById(\"editedVacationPrice\");\n      const vacationDescription = document.getElementById(\"editedVacationDescription\");\n      const vacationID = clickedVacation.vacationID; // Validating all field of the updated vacation are valid\n\n      let newValidVacationData = this.validateNewVacationData(vacationID, vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription); // Syntax is written '!==false' because this function can return an object or 'false'\n\n      if (newValidVacationData !== false) {\n        let clickedVacationID = clickedVacation.vacationID;\n\n        try {\n          await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newValidVacationData); // let serverResponse = await axios.put<Vacation>(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData);\n          // let newlyAddedVacation = serverResponse.data;\n          // console.log(newlyAddedVacation);\n          // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to update it in the Global Store (UI)\n          // let vacationDataConvertedToUI = this.convertVacationDataToUIRepresintation(newValidVacationData);\n\n          let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID);\n          store.dispatch({\n            type: ActionType.UpdateVacation,\n            payload: {\n              indexOfClickedVacationInGlobalStore,\n              newValidVacationData\n            }\n          });\n        } catch (error) {\n          // let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.deleteVacation = async clickedVacationID => {\n      try {\n        await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`);\n        let indexOfClickedVacationInGlobalStore = this.getIndexOfVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store\n\n        store.dispatch({\n          type: ActionType.DeleteVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.checkIfGlobalStoraHasAllVacations = () => {\n      // Checking if the global store has all the vacations to display, and if not, get them from the server\n      let allVacationsInGlobalStore = store.getState().allVacations;\n\n      if (allVacationsInGlobalStore.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: allVacationsInGlobalStore\n        });\n      }\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      /*\r\n          Before the 'follow' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator(); // If the user is currently logged in\n\n      if (isUserLogged) {\n        // checking if the user hasn't liked this vacation already\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        } // If the vacation selected is already liked by the user, unfollow that vacation.\n        else {\n            this.unfollowVacation(clickedVacation);\n          }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateVacationIsNotLikedByTheUser = clickedVacation => {\n      // Validating the vacation chosen is not already liked by the user\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.vacationID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.vacationID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.getIndexOfVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let allVacations = store.getState().allVacations;\n      let clickedVacationInGlobalStore = allVacations.find(allVacations => allVacations.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = allVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.getIndexOfFavoriteVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.convertVacationDataToUIRepresintation = newVacationData => {\n      newVacationData.startDate.replace(\"-\", \"/\");\n      newVacationData.endDate.replace(\"-\", \"/\");\n      return newVacationData;\n    };\n\n    this.onVacationEditAttempt = clickedVacation => {\n      /*\r\n          Before the 'edit' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to edit a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayEditModal(clickedVacation);\n      } // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.onVacationDeleteAttempt = clickedVacation => {\n      /*\r\n          Before the 'delete' action, checking if the user is currently logged in.\r\n          This validation is made because a user might delete his token before trying\r\n          to delete a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\n      // Checking if the user is logged based on the Token in the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        this.displayDeletionModal(clickedVacation);\n      } // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.validateNewVacationData = (vacationId, vacationName, vacationStartDate, vacationEndDate, vacationPrice, vacationDescription) => {\n      const newNameTrimmedValue = vacationName.value.trim();\n      const newPriceValue = vacationPrice.valueAsNumber;\n      const newDescriptionTrimmedValue = vacationDescription.value.trim();\n      const vacationStartDateValue = vacationStartDate.value;\n      const vacationEndDateValue = vacationEndDate.value;\n      console.log(vacationStartDateValue);\n      console.log(vacationEndDateValue); // Validating all 'Edit' Modal fields are valid\n\n      let isNewNameValid = this.validateNewName(newNameTrimmedValue);\n      let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\n      let isNewPriceValid = this.validateNewPrice(newPriceValue);\n      let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\n\n      if (isNewNameValid) {\n        if (isNewPriceValid) {\n          if (isNewDescriptionValid) {\n            if (areDatesValid) {\n              let newVacationData = {\n                vacationID: vacationId,\n                vacationName: newNameTrimmedValue,\n                vacationPrice: newPriceValue,\n                vacationDescription: newDescriptionTrimmedValue,\n                startDate: vacationStartDateValue,\n                endDate: vacationEndDateValue,\n                imageURL: \"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\"\n              };\n              return newVacationData;\n            }\n          }\n        }\n      } // In case one of the parameters of the updated vacation is not valid\n\n\n      return false;\n    };\n\n    this.validateNewName = newTrimmedName => {\n      if (newTrimmedName !== \"\") {\n        if (newTrimmedName.length >= 3) {\n          if (newTrimmedName.length <= 44) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\n      return false;\n    };\n\n    this.validateNewPrice = newPrice => {\n      if (newPrice > 0) {\n        return true;\n      }\n\n      this.vacationsErrorHandler(\"The new price must be larger than 0\");\n      return false;\n    };\n\n    this.validateNewDescription = newTrimmedDescription => {\n      if (newTrimmedDescription !== \"\") {\n        if (newTrimmedDescription.length >= 5) {\n          if (newTrimmedDescription.length <= 249) {\n            return true;\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\n      return false;\n    };\n\n    this.validateNewDates = (newVacationStartDate, newVacationEndDate) => {\n      if (newVacationStartDate !== \"\") {\n        if (newVacationStartDate !== undefined) {\n          if (newVacationEndDate !== \"\") {\n            if (newVacationEndDate !== undefined) {\n              return true;\n            }\n          }\n        }\n      }\n\n      this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\n      return false;\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.displayVacationName = clickedVacationName => {\n      // Displaying 'Edit' Modal Name\n      const editedVacationNameField = document.getElementById(\"editedVacationName\");\n      editedVacationNameField.value = clickedVacationName;\n    };\n\n    this.displayVacationPrice = clickedVacationPrice => {\n      // Dusplaying 'Edit' Modal Price\n      const editedVacationPriceField = document.getElementById(\"editedVacationPrice\");\n      editedVacationPriceField.valueAsNumber = clickedVacationPrice;\n    };\n\n    this.displayVacationDates = (clickedVacationStartDate, clickedVacationEndDate) => {\n      // Displaying 'Edit' Modal Dates\n      const editStartDateField = document.getElementById(\"editStartDate\");\n      const editEndDateField = document.getElementById(\"editEndDate\"); // Start Date\n\n      let startDateYear = +clickedVacationStartDate.split('/')[2];\n      let startDateMonth = +clickedVacationStartDate.split('/')[1];\n      let startDateDay = +clickedVacationStartDate.split('/')[0];\n      let fullStartDate = startDateYear + \"-\" + startDateMonth + \"-\" + startDateDay; // End Date\n\n      let endDateYear = +clickedVacationEndDate.split('/')[2];\n      let endDateMonth = +clickedVacationEndDate.split('/')[1];\n      let endDateDay = +clickedVacationEndDate.split('/')[0];\n      let fullEndDate = endDateYear + \"-\" + endDateMonth + \"-\" + endDateDay;\n      editStartDateField.valueAsDate = new Date(fullStartDate);\n      editEndDateField.valueAsDate = new Date(fullEndDate);\n    };\n\n    this.displayVacationDescription = clickedVacationDescription => {\n      // Displaying 'Edit' Modal Description\n      const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\");\n      editVacationDescriptionField.value = clickedVacationDescription;\n    };\n\n    this.displayEditModal = clickedVacation => {\n      // Defining the 'Edit' Modal in the UI\n      const editModalBackground = document.getElementById(\"editModalContainer\");\n      const editModalHeader = document.getElementById(\"editModalHeader\");\n      const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\n      const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\"); // Displaying the values inside the 'Edit' Modal\n\n      this.displayVacationName(clickedVacation.vacationName);\n      this.displayVacationPrice(clickedVacation.vacationPrice);\n      this.displayVacationDescription(clickedVacation.vacationDescription);\n      this.displayVacationDates(clickedVacation.startDate, clickedVacation.endDate);\n      editModalBackground.style.display = \"block\";\n      editModalHeader.textContent = `Update ${clickedVacation.vacationName}`; // Defining the event listeners for the modal\n\n      editModalCancelBtn.onclick = () => {\n        this.hideModal(editModalBackground);\n      };\n\n      editModalDoneBtn.onclick = () => {\n        this.updateVacation(clickedVacation);\n        this.hideModal(editModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === editModalBackground) {\n          editModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.displayDeletionModal = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\n      const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\n      const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\n      const deleteBtn = document.getElementById(\"deleteBtn\");\n      const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\n      const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\n      deletionModalBackground.style.display = \"block\";\n      deletionModalHeader.textContent = \"Confirm Your Deletion\";\n      deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\n      deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`; // Defining the event listeners for the modal\n\n      dontDeleteBtn.onclick = () => {\n        this.hideModal(deletionModalBackground);\n      };\n\n      deleteBtn.onclick = () => {\n        this.deleteVacation(clickedVacationID);\n        this.hideModal(deletionModalBackground);\n      };\n\n      window.onclick = function (event) {\n        if (event.target === deletionModalBackground) {\n          deletionModalBackground.style.display = \"none\";\n        }\n      };\n    };\n\n    this.hideModal = modal => {\n      modal.style.display = \"none\";\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 13\n      }\n    }, this.state.allVacations.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 25\n      }\n    }, getUserTypeFromStorage() === \"ADMIN\" && /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"addVacationSquare sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newVacationText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 37\n      }\n    }, \"New Vacation\")), this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(VacationComponent, {\n      key: index,\n      vacation: vacation,\n      onVacationFollowAttempt: this.onVacationFollowAttempt,\n      validateVacationIsNotLikedByTheUser: this.validateVacationIsNotLikedByTheUser,\n      onVacationDeleteAttempt: this.onVacationDeleteAttempt,\n      onVacationEditAttempt: this.onVacationEditAttempt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 33\n      }\n    })))) // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\n    :\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"noVcationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"settingsImage\",\n      src: settingsImage,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 25\n      }\n    }, \"We Are Sorry, There Was a Problem\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 25\n      }\n    }, \"Getting The Vacations From The Server\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deletionModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"deletionModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"deletionModalText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"deletionModalVacationName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"deleteModalIcon\",\n      src: deleteSVG,\n      alt: \"Deletion Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"dontDeleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 29\n      }\n    }, \"Don't Delete\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"deleteBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 29\n      }\n    }, \"Delete\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModalContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"editModalHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 25\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"img\", {\n      id: \"editModalIcon\",\n      src: editSVG,\n      alt: \"Edit Modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationName\",\n      label: \"Name\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"editDatesSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"editStartDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 33\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      id: \"editEndDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationPrice\",\n      type: \"number\",\n      label: \"Price\",\n      variant: \"standard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"editedVacationDescription\",\n      label: \"Description\",\n      multiline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalCancelBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"editModalDoneBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 29\n      }\n    }, \"Update\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","store","axios","ActionType","withRouter","settingsImage","isUserLoggedValidator","VacationComponent","getUserTypeFromStorage","TextField","AllVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","allVacations","getState","checkIfGlobalStoraHasAllVacations","getAllVacationsFromServer","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","vacationsErrorHandler","followVacation","clickedVacation","clickedVacationID","vacationID","post","SetFollowedVacation","unfollowVacation","indexOfClickedVacationInGlobalStore","getIndexOfFavoriteVacationByID","UnfolloweVacation","updateVacation","vacationName","document","getElementById","vacationStartDate","vacationEndDate","vacationPrice","vacationDescription","newValidVacationData","validateNewVacationData","put","getIndexOfVacationByID","UpdateVacation","deleteVacation","DeleteVacation","allVacationsInGlobalStore","length","onVacationFollowAttempt","isUserLogged","vacationIsNotAlreadyLikedByTheUser","validateVacationIsNotLikedByTheUser","history","push","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationInGlobalStore","find","favoriteVacation","undefined","indexOf","convertVacationDataToUIRepresintation","newVacationData","startDate","replace","endDate","onVacationEditAttempt","displayEditModal","onVacationDeleteAttempt","displayDeletionModal","vacationId","newNameTrimmedValue","value","trim","newPriceValue","valueAsNumber","newDescriptionTrimmedValue","vacationStartDateValue","vacationEndDateValue","console","log","isNewNameValid","validateNewName","areDatesValid","validateNewDates","isNewPriceValid","validateNewPrice","isNewDescriptionValid","validateNewDescription","imageURL","newTrimmedName","newPrice","newTrimmedDescription","newVacationStartDate","newVacationEndDate","snackbar","className","textContent","setTimeout","displayVacationName","clickedVacationName","editedVacationNameField","displayVacationPrice","clickedVacationPrice","editedVacationPriceField","displayVacationDates","clickedVacationStartDate","clickedVacationEndDate","editStartDateField","editEndDateField","startDateYear","split","startDateMonth","startDateDay","fullStartDate","endDateYear","endDateMonth","endDateDay","fullEndDate","valueAsDate","Date","displayVacationDescription","clickedVacationDescription","editVacationDescriptionField","editModalBackground","editModalHeader","editModalDoneBtn","editModalCancelBtn","style","display","onclick","hideModal","window","event","target","deletionModalBackground","deletionModalHeader","deletionModalTextParagraph","deleteBtn","dontDeleteBtn","deletionModalVacationName","modal","state","Array","render","map","vacation","index","deleteSVG","editSVG"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport deleteSVG from '../../assets/deleteSVG.svg';\r\nimport editSVG from '../../assets/editSVG.svg';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport VacationComponent from '../vacationComponent/VacationComponent';\r\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './allVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            \r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n\r\n        // Getting all the vacations from the server and inserting them to the Global Store\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            \r\n            // Insert all the vacations from the server to the Global Store\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function occurs after validations approved that this vacation can be liked by the user\r\n\r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to follow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Updating The Global Store\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n\r\n        // This function is designated to make the user 'unfollow' a vacation\r\n        \r\n        try {\r\n\r\n            // Attempting to make a POST request to the server with the clicked vacation's ID, to unfollow a vacation\r\n\r\n            let clickedVacationID : number = clickedVacation.vacationID;\r\n            await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n            let indexOfClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n\r\n            // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store's favorites\r\n            store.dispatch({type: ActionType.UnfolloweVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private updateVacation = async (clickedVacation : Vacation) => {\r\n\r\n        const vacationName: HTMLInputElement = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        const vacationStartDate: HTMLInputElement = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const vacationEndDate: HTMLInputElement = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n        const vacationPrice: HTMLInputElement = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        const vacationDescription: HTMLInputElement = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        const vacationID = clickedVacation.vacationID;\r\n\r\n        // Validating all field of the updated vacation are valid\r\n        let newValidVacationData: any = this.validateNewVacationData(vacationID, vacationName, vacationStartDate,\r\n                                                        vacationEndDate, vacationPrice, vacationDescription);\r\n\r\n        // Syntax is written '!==false' because this function can return an object or 'false'\r\n        if (newValidVacationData !== false) {\r\n\r\n            let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n            try {\r\n    \r\n                await axios.put(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newValidVacationData);\r\n                // let serverResponse = await axios.put<Vacation>(`http://localhost:3001/vacations/update_vacation/${clickedVacationID}`, newVacationData);\r\n                // let newlyAddedVacation = serverResponse.data;\r\n                // console.log(newlyAddedVacation);\r\n                \r\n\r\n\r\n                // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to update it in the Global Store (UI)\r\n                // let vacationDataConvertedToUI = this.convertVacationDataToUIRepresintation(newValidVacationData);\r\n\r\n                let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n                store.dispatch({type: ActionType.UpdateVacation, payload: {indexOfClickedVacationInGlobalStore, newValidVacationData} });\r\n            }\r\n            \r\n            catch (error) {\r\n    \r\n                // let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private deleteVacation = async (clickedVacationID : number) => {\r\n\r\n        try {\r\n\r\n            await axios.post(`http://localhost:3001/vacations/delete_vacation/${clickedVacationID}`);\r\n\r\n            let indexOfClickedVacationInGlobalStore: number = this.getIndexOfVacationByID(clickedVacationID);\r\n\r\n            // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the Global Store\r\n            store.dispatch({type: ActionType.DeleteVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n        \r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the global store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the 'follow' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        // If the user is currently logged in\r\n        if (isUserLogged) {\r\n\r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is already liked by the user, unfollow that vacation.\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateVacationIsNotLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        // Validating the vacation chosen is not already liked by the user\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find(\r\n            favoriteVacation => favoriteVacation.vacationID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let allVacations: Vacation[] = store.getState().allVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = allVacations.find( allVacations =>  allVacations.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = allVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private convertVacationDataToUIRepresintation = (newVacationData: Vacation) => {\r\n        \r\n        newVacationData.startDate.replace(\"-\", \"/\");\r\n        newVacationData.endDate.replace(\"-\", \"/\");\r\n\r\n        return newVacationData;\r\n    }\r\n\r\n    private onVacationEditAttempt = (clickedVacation: Vacation) => {\r\n\r\n        /*\r\n            Before the 'edit' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to edit a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            this.displayEditModal(clickedVacation);\r\n        }\r\n\r\n\r\n        // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private onVacationDeleteAttempt = (clickedVacation: Vacation) => {\r\n\r\n        /*\r\n            Before the 'delete' action, checking if the user is currently logged in.\r\n            This validation is made because a user might delete his token before trying\r\n            to delete a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all components that needs to make this validation).\r\n        // Checking if the user is logged based on the Token in the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            this.displayDeletionModal(clickedVacation);\r\n        }\r\n\r\n\r\n        // If for some reason, the Admin has decided to delete his Token from the sessionStorage, throw him out to login again\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private validateNewVacationData = (vacationId: number, vacationName: HTMLInputElement, vacationStartDate: HTMLInputElement, vacationEndDate: HTMLInputElement, vacationPrice: HTMLInputElement, vacationDescription: HTMLInputElement) => {\r\n\r\n        const newNameTrimmedValue = vacationName.value.trim();\r\n        const newPriceValue = vacationPrice.valueAsNumber;\r\n        const newDescriptionTrimmedValue = vacationDescription.value.trim();\r\n        const vacationStartDateValue = vacationStartDate.value;\r\n        const vacationEndDateValue = vacationEndDate.value;\r\n\r\n        console.log(vacationStartDateValue);\r\n        console.log(vacationEndDateValue);\r\n        \r\n\r\n\r\n        // Validating all 'Edit' Modal fields are valid\r\n\r\n        let isNewNameValid = this.validateNewName(newNameTrimmedValue);\r\n        let areDatesValid = this.validateNewDates(vacationStartDateValue, vacationEndDateValue);\r\n        let isNewPriceValid = this.validateNewPrice(newPriceValue);\r\n        let isNewDescriptionValid = this.validateNewDescription(newDescriptionTrimmedValue);\r\n\r\n        if (isNewNameValid) {\r\n            if (isNewPriceValid) {\r\n                if (isNewDescriptionValid) {\r\n                    if (areDatesValid) {\r\n\r\n                        let newVacationData = {\r\n                            vacationID: vacationId,\r\n                            vacationName: newNameTrimmedValue,\r\n                            vacationPrice: newPriceValue,\r\n                            vacationDescription: newDescriptionTrimmedValue,\r\n                            startDate: vacationStartDateValue,\r\n                            endDate: vacationEndDateValue,\r\n                            imageURL: \"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\"\r\n                        };\r\n    \r\n                        return newVacationData;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // In case one of the parameters of the updated vacation is not valid\r\n        return false;\r\n    }\r\n\r\n    private validateNewName = (newTrimmedName: string) => {\r\n\r\n        if (newTrimmedName !== \"\") {\r\n\r\n            if (newTrimmedName.length >= 3) {\r\n\r\n                if (newTrimmedName.length <= 44) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new name must be between 3 - 44 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewPrice = (newPrice: number) => {\r\n\r\n        if (newPrice > 0) {\r\n            return true;\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new price must be larger than 0\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDescription = (newTrimmedDescription: string) => {\r\n\r\n        if (newTrimmedDescription !== \"\") {\r\n\r\n            if (newTrimmedDescription.length >= 5) {\r\n\r\n                if (newTrimmedDescription.length <= 249) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"The new description must be between 5 - 249 characters long\");\r\n        return false;\r\n    }\r\n\r\n    private validateNewDates = (newVacationStartDate: string, newVacationEndDate: string ) => {\r\n\r\n        if (newVacationStartDate !== \"\") {\r\n\r\n            if (newVacationStartDate !== undefined) {\r\n\r\n                if (newVacationEndDate !== \"\") {\r\n\r\n                    if (newVacationEndDate !== undefined) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.vacationsErrorHandler(\"Vacation Dates Not Valid, Try Again\");\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n    private displayVacationName = (clickedVacationName: string) => {\r\n\r\n        // Displaying 'Edit' Modal Name\r\n\r\n        const editedVacationNameField = document.getElementById(\"editedVacationName\") as HTMLInputElement;\r\n        editedVacationNameField.value = clickedVacationName;\r\n    }\r\n\r\n    private displayVacationPrice = (clickedVacationPrice: number) => {\r\n\r\n        // Dusplaying 'Edit' Modal Price\r\n\r\n        const editedVacationPriceField = document.getElementById(\"editedVacationPrice\") as HTMLInputElement;\r\n        editedVacationPriceField.valueAsNumber = clickedVacationPrice;\r\n    }\r\n\r\n    private displayVacationDates = (clickedVacationStartDate: string, clickedVacationEndDate: string) => {\r\n\r\n        // Displaying 'Edit' Modal Dates\r\n\r\n        const editStartDateField = document.getElementById(\"editStartDate\") as HTMLInputElement;\r\n        const editEndDateField = document.getElementById(\"editEndDate\") as HTMLInputElement;\r\n\r\n        // Start Date\r\n        let startDateYear = +clickedVacationStartDate.split('/')[2];\r\n        let startDateMonth = +clickedVacationStartDate.split('/')[1];\r\n        let startDateDay = +clickedVacationStartDate.split('/')[0];\r\n        let fullStartDate = startDateYear+\"-\"+startDateMonth+\"-\"+startDateDay;\r\n\r\n        // End Date\r\n        let endDateYear = +clickedVacationEndDate.split('/')[2];\r\n        let endDateMonth = +clickedVacationEndDate.split('/')[1];\r\n        let endDateDay = +clickedVacationEndDate.split('/')[0];\r\n        let fullEndDate = endDateYear+\"-\"+endDateMonth+\"-\"+endDateDay;\r\n        \r\n        editStartDateField.valueAsDate = new Date(fullStartDate);\r\n        editEndDateField.valueAsDate = new Date(fullEndDate);\r\n    }\r\n\r\n    private displayVacationDescription = (clickedVacationDescription: string) => {\r\n\r\n        // Displaying 'Edit' Modal Description\r\n\r\n        const editVacationDescriptionField = document.getElementById(\"editedVacationDescription\") as HTMLInputElement;\r\n        editVacationDescriptionField.value = clickedVacationDescription;\r\n    }\r\n\r\n    private displayEditModal = (clickedVacation: Vacation) => {\r\n\r\n        // Defining the 'Edit' Modal in the UI\r\n\r\n        const editModalBackground = document.getElementById(\"editModalContainer\");\r\n        const editModalHeader = document.getElementById(\"editModalHeader\");\r\n        const editModalDoneBtn = document.getElementById(\"editModalDoneBtn\");\r\n        const editModalCancelBtn = document.getElementById(\"editModalCancelBtn\");\r\n\r\n        // Displaying the values inside the 'Edit' Modal\r\n\r\n        this.displayVacationName(clickedVacation.vacationName);\r\n        this.displayVacationPrice(clickedVacation.vacationPrice);\r\n        this.displayVacationDescription(clickedVacation.vacationDescription);\r\n        this.displayVacationDates(clickedVacation.startDate, clickedVacation.endDate);\r\n\r\n        editModalBackground.style.display = \"block\";\r\n        editModalHeader.textContent = `Update ${clickedVacation.vacationName}`;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        editModalCancelBtn.onclick = () => {this.hideModal(editModalBackground)};\r\n\r\n        editModalDoneBtn.onclick = () => {\r\n\r\n            this.updateVacation(clickedVacation);\r\n            this.hideModal(editModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === editModalBackground) {\r\n                editModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private displayDeletionModal = (clickedVacation: Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n\r\n        const deletionModalBackground = document.getElementById(\"deletionModalContainer\");\r\n        const deletionModalHeader = document.getElementById(\"deletionModalHeader\");\r\n        const deletionModalTextParagraph = document.getElementById(\"deletionModalText\");\r\n        const deleteBtn = document.getElementById(\"deleteBtn\");\r\n        const dontDeleteBtn = document.getElementById(\"dontDeleteBtn\");\r\n        const deletionModalVacationName = document.getElementById(\"deletionModalVacationName\");\r\n\r\n        deletionModalBackground.style.display = \"block\";\r\n        deletionModalHeader.textContent = \"Confirm Your Deletion\";\r\n        deletionModalTextParagraph.textContent = `Are You Sure You Would Like To Delete`;\r\n        deletionModalVacationName.textContent = `${clickedVacation.vacationName} ?`;\r\n\r\n\r\n        // Defining the event listeners for the modal\r\n\r\n        dontDeleteBtn.onclick = () => {this.hideModal(deletionModalBackground)};\r\n\r\n        deleteBtn.onclick = () => {\r\n            this.deleteVacation(clickedVacationID);\r\n            this.hideModal(deletionModalBackground);\r\n        };\r\n\r\n        window.onclick = function(event : MouseEvent) {\r\n            \r\n            if (event.target === deletionModalBackground) {\r\n                deletionModalBackground.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private hideModal = (modal: any) => {\r\n\r\n        modal.style.display = \"none\";\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.allVacations.length > 0 ?\r\n\r\n                    <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                        {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                        <div className=\"headerContainer\">\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You\r\n                            </h2>\r\n                        </div>\r\n                    \r\n                        <div className=\"allVacations\">\r\n\r\n                            {/* If The Current User Is An Admin, Show Him The 'Add Vacation' Button */}\r\n                            {getUserTypeFromStorage() === \"ADMIN\"\r\n                                &&\r\n                                <h2 className=\"addVacationSquare sharp-text\">\r\n                                    <div className=\"newVacationText\">\r\n                                        New Vacation\r\n                                    </div>\r\n                                </h2>\r\n                            }\r\n\r\n                            {/* ---------- All Vacations Cards, Using a Designated 'Vacation' Component ---------- */}\r\n                            {this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n\r\n                                <VacationComponent key={index} vacation= {vacation} onVacationFollowAttempt= {this.onVacationFollowAttempt}\r\n                                                   validateVacationIsNotLikedByTheUser= {this.validateVacationIsNotLikedByTheUser} onVacationDeleteAttempt= {this.onVacationDeleteAttempt}\r\n                                                   onVacationEditAttempt= {this.onVacationEditAttempt} />\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>      \r\n\r\n                    // ---------- else, if the vacations were not retrieved from the server for some reason ---------- //\r\n                    :\r\n                    <div className=\"noVcationsSection\">\r\n                        <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                        <h1 className=\"sharp-text\">We Are Sorry, There Was a Problem</h1>\r\n                        <h1 className=\"sharp-text\">Getting The Vacations From The Server</h1>\r\n                    </div>\r\n                }\r\n\r\n\r\n                {/* ---------------------------------------------- Modals and Snackbar ---------------------------------------------- */}\r\n\r\n                {/* --------------- The 'Deletion' Modal --------------- */}\r\n                <div id=\"deletionModalContainer\">\r\n                    <div id=\"deletionModal\">\r\n                        <h1 id=\"deletionModalHeader\">.</h1>\r\n                        <p id=\"deletionModalText\"></p>\r\n                        <h2 id=\"deletionModalVacationName\">.</h2>\r\n\r\n                        <img id=\"deleteModalIcon\" src={deleteSVG} alt=\"Deletion Modal\" />\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"dontDeleteBtn\">Don't Delete</button>\r\n                            <button id=\"deleteBtn\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* --------------- The 'Edit' Modal --------------- */}\r\n                <div id=\"editModalContainer\">\r\n                    <div id=\"editModal\">\r\n                        <h1 id=\"editModalHeader\">.</h1>\r\n\r\n                        <img id=\"editModalIcon\" src={editSVG} alt=\"Edit Modal\" />\r\n\r\n                        <div id=\"editInputs\">\r\n                            <TextField id=\"editedVacationName\" label=\"Name\" variant=\"standard\" />\r\n\r\n                            <div id=\"editDatesSection\">\r\n                                <input type=\"date\" id=\"editStartDate\"/>\r\n                                <span>-</span>\r\n                                <input type=\"date\" id=\"editEndDate\"/>\r\n                            </div>\r\n\r\n                            <TextField id=\"editedVacationPrice\" type=\"number\" label=\"Price\" variant=\"standard\" />\r\n\r\n                            <TextField id=\"editedVacationDescription\" label=\"Description\" multiline />\r\n                        </div>\r\n\r\n                        <div className=\"buttonsSection\">\r\n                            <button id=\"editModalCancelBtn\">Cancel</button>\r\n                            <button id=\"editModalDoneBtn\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}