{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\vacations\\\\src\\\\components\\\\loginPage\\\\LoginPage.tsx\";\nimport React, { Component } from 'react';\nimport logo from '../../assets/Explorer-logo.png';\nimport UserLoginDetails from '../../models/UserLoginDetails';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport './loginPage.css';\nexport default class LoginPage extends Component {\n  constructor(props) {\n    super(props); // initializing the state with empty values\n\n    this.updateUserNameValue = event => {\n      // getting the username entered in the username's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputFieldValue\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      this.setState({\n        password: passwordInputFieldValue\n      });\n    };\n\n    this.login = async () => {\n      try {\n        let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\n        const response = await axios.post('http://localhost:3001/users/login', userLoginDetails); // Here we are receiving the token & user type from the data we got back from the server\n\n        const serverResponseData = response.data; // Attaching the Token we received from the server, to every HTTP request we'll send from now on\n        // This is our Interceptor\n\n        axios.defaults.headers.common['Authorization'] = serverResponseData.token;\n        this.handlePageAccordingToUserType(serverResponseData);\n      } catch (error) {\n        alert(error.message);\n        console.log(error);\n      }\n    };\n\n    this.handlePageAccordingToUserType = serverResponseData => {\n      if (serverResponseData.userType === \"ADMIN\") {\n        this.props.history.push('/admin');\n        sessionStorage.setItem('userType', 'ADMIN');\n      } else {\n        this.props.history.push('/customer');\n        sessionStorage.setItem(\"userType\", \"USER\");\n      }\n    };\n\n    this.state = {\n      userName: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"explorer-logo margin-bottom-1\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"To Continue To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"loginBtn\",\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"notRegisteredLink sharp-text\",\n      to: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"I'm Not Registered\")));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/vacations/src/components/loginPage/LoginPage.tsx"],"names":["React","Component","logo","UserLoginDetails","NavLink","axios","LoginPage","constructor","props","updateUserNameValue","event","userNameInputField","target","userNameInputFieldValue","value","trimmedUserNameInputFieldValue","trim","setState","userName","updatePasswordValue","passwordInputField","passwordInputFieldValue","password","login","userLoginDetails","state","response","post","serverResponseData","data","defaults","headers","common","token","handlePageAccordingToUserType","error","alert","message","console","log","userType","history","push","sessionStorage","setItem","render"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/Explorer-logo.png';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\n\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n    \r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n    \r\n\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n\r\n    private login = async () => {\r\n\r\n        try {\r\n            let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n            const response = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/login', userLoginDetails);\r\n\r\n            // Here we are receiving the token & user type from the data we got back from the server\r\n            const serverResponseData = response.data;\r\n\r\n            // Attaching the Token we received from the server, to every HTTP request we'll send from now on\r\n            // This is our Interceptor\r\n            axios.defaults.headers.common['Authorization'] = serverResponseData.token;\r\n\r\n            this.handlePageAccordingToUserType(serverResponseData);\r\n        }\r\n\r\n        catch (error) {\r\n            alert(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private handlePageAccordingToUserType = (serverResponseData : SuccessfulLoginServerResponse) => {\r\n\r\n        if (serverResponseData.userType === \"ADMIN\") {\r\n            this.props.history.push('/admin');\r\n            sessionStorage.setItem('userType', 'ADMIN');\r\n        }\r\n\r\n        else {\r\n            this.props.history.push('/customer');\r\n            sessionStorage.setItem(\"userType\", \"USER\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSection\">\r\n\r\n                <div className=\"loginSquare\">\r\n                    <img className=\"explorer-logo margin-bottom-1\" src={logo} alt=\"Explorer\"/>\r\n\r\n                    <h2 className=\"sharp-text\">Login</h2>\r\n                    <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                    <div className=\"inputFieldSection\">\r\n                        <fieldset className=\"cerdinals-fieldset\">\r\n                            <legend>Username</legend>\r\n                            <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                        </fieldset>\r\n\r\n                        <fieldset className=\"cerdinals-fieldset\">\r\n                            <legend>Password</legend>\r\n                            <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                        </fieldset>\r\n\r\n                        <button className=\"loginBtn\" onClick={this.login}>Login</button>\r\n                    </div>\r\n\r\n                    <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I'm Not Registered</NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}