{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\reportsPage\\\\ReportsPage.tsx\";\nimport React, { Component } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\nimport noAuthorizationSVG from \"../../assets/noAuthorizationSVG.svg\";\nimport './reportsPage.css';\nexport default class ReportsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.userTypeFromServerCache = void 0;\n    this.allVacationsInGlobalStore = store.getState().allVacations;\n\n    this.componentDidMount = async () => {\n      interceptorHandler();\n      this.userTypeFromServerCache = await getUserTypeFromServerCache();\n\n      if (this.userTypeFromServerCache === \"ADMIN\") {\n        this.checkIfGlobalStoreHasAllVacations();\n      }\n    };\n\n    this.reportsPageErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 6000);\n    };\n\n    this.extractFollowedVacationsNames = followedVacationsFromGlobalStore => {\n      let followedVacationsNames = new Array();\n      followedVacationsFromGlobalStore.map(vacation => {\n        followedVacationsNames.push(vacation.vacationName);\n      });\n      return followedVacationsNames;\n    };\n\n    this.extractFollowedVacationsFollowersCount = followedVacationsFromGlobalStore => {\n      let followedVacationsFollowersCount = new Array();\n      followedVacationsFromGlobalStore.map(vacation => {\n        followedVacationsFollowersCount.push(vacation.followersCount);\n      });\n      return followedVacationsFollowersCount;\n    };\n\n    this.checkIfGlobalStoreHasAllVacations = () => {\n      if (this.allVacationsInGlobalStore.length === 0) {\n        this.getAllFollowedVacationsFromServer();\n      } else {\n        // If the client already has all the vacations in the Global Store, filter them by the ones that have at least 1 follower\n        let followedVacationsFromGlobalStore = store.getState().allVacations.filter(vacation => vacation.followersCount > 0);\n        console.log(followedVacationsFromGlobalStore);\n        let followedVacationsNames = this.extractFollowedVacationsNames(followedVacationsFromGlobalStore);\n        let followedVacationsFollowersCount = this.extractFollowedVacationsFollowersCount(followedVacationsFromGlobalStore);\n        this.setState({\n          followedVacationsNames: followedVacationsNames,\n          followedVacationsFollowersCount: followedVacationsFollowersCount\n        });\n      }\n    };\n\n    this.getAllFollowedVacationsFromServer = async () => {\n      interceptorHandler(); // Getting all the followed vacations from the server\n\n      try {\n        // Attempting to get all of the followed vacations from the server\n        const response = await axios.get('http://localhost:3001/vacations/all_followed_vacations');\n        const followedVacationsData = response.data;\n        let followedVacationsNames = this.extractFollowedVacationsNames(followedVacationsData);\n        let followedVacationsFollowersCount = this.extractFollowedVacationsFollowersCount(followedVacationsData);\n        this.setState({\n          followedVacationsNames: followedVacationsNames,\n          followedVacationsFollowersCount: followedVacationsFollowersCount\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.reportsPageErrorHandler(errorMessage);\n        } catch {\n          this.reportsPageErrorHandler(error);\n        }\n      }\n    };\n\n    this.state = {\n      followedVacationsNames: new Array(),\n      followedVacationsFollowersCount: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reportsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Doughnut, {\n      data: {\n        labels: this.state.followedVacationsNames,\n        datasets: [{\n          label: 'Likes',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: this.state.followedVacationsFollowersCount\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Liked Users Vacations',\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        },\n        maintainAspectRatio: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noAuthSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, \"Oops... You are not authorized to view that page\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"noAuthImg\",\n      src: noAuthorizationSVG,\n      alt: \"No Authorization\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/reportsPage/ReportsPage.tsx"],"names":["React","Component","Doughnut","store","axios","interceptorHandler","getUserTypeFromServerCache","ReportsPage","constructor","props","userTypeFromServerCache","allVacationsInGlobalStore","getState","allVacations","componentDidMount","checkIfGlobalStoreHasAllVacations","reportsPageErrorHandler","errorMessage","snackbar","document","getElementById","className","textContent","setTimeout","replace","extractFollowedVacationsNames","followedVacationsFromGlobalStore","followedVacationsNames","Array","map","vacation","push","vacationName","extractFollowedVacationsFollowersCount","followedVacationsFollowersCount","followersCount","length","getAllFollowedVacationsFromServer","filter","console","log","setState","response","get","followedVacationsData","data","error","state","render","labels","datasets","label","backgroundColor","borderColor","borderWidth","title","display","text","fontSize","legend","position","maintainAspectRatio","noAuthorizationSVG"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Doughnut  } from 'react-chartjs-2';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\r\nimport noAuthorizationSVG from '../../assets/noAuthorizationSVG.svg';\r\nimport './reportsPage.css';\r\n\r\n\r\ninterface FollowedVacationsState {\r\n    followedVacationsNames: string[];\r\n    followedVacationsFollowersCount: number[];\r\n}\r\n\r\nexport default class ReportsPage extends Component <any, FollowedVacationsState> {\r\n\r\n    private userTypeFromServerCache: string;\r\n    private allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            followedVacationsNames: new Array <string> (),\r\n            followedVacationsFollowersCount: new Array <number> ()\r\n        };\r\n    }\r\n    \r\n\r\n    componentDidMount = async () => {\r\n\r\n        interceptorHandler();\r\n\r\n        this.userTypeFromServerCache = await getUserTypeFromServerCache();\r\n\r\n        if (this.userTypeFromServerCache === \"ADMIN\") {\r\n    \r\n            this.checkIfGlobalStoreHasAllVacations();\r\n        }\r\n    }\r\n    \r\n\r\n    private reportsPageErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private extractFollowedVacationsNames = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsNames: string[] = new Array <string> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => {\r\n            followedVacationsNames.push(vacation.vacationName);\r\n        });\r\n\r\n        return followedVacationsNames;\r\n    }\r\n\r\n    private extractFollowedVacationsFollowersCount = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsFollowersCount: number[] = new Array <number> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => {\r\n            followedVacationsFollowersCount.push(vacation.followersCount);\r\n        });\r\n\r\n        return followedVacationsFollowersCount;\r\n    }\r\n\r\n    private checkIfGlobalStoreHasAllVacations = () => {\r\n\r\n        if (this.allVacationsInGlobalStore.length === 0) {\r\n\r\n            this.getAllFollowedVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n\r\n            // If the client already has all the vacations in the Global Store, filter them by the ones that have at least 1 follower\r\n\r\n            let followedVacationsFromGlobalStore = store.getState().allVacations.filter( vacation => vacation.followersCount > 0);\r\n            console.log(followedVacationsFromGlobalStore);\r\n            \r\n            \r\n            let followedVacationsNames: string[] = this.extractFollowedVacationsNames(followedVacationsFromGlobalStore);\r\n            let followedVacationsFollowersCount: number[] = this.extractFollowedVacationsFollowersCount(followedVacationsFromGlobalStore);\r\n\r\n\r\n            this.setState({\r\n                followedVacationsNames: followedVacationsNames,\r\n                followedVacationsFollowersCount: followedVacationsFollowersCount\r\n            });\r\n        }\r\n    }\r\n\r\n    private getAllFollowedVacationsFromServer = async () => {\r\n\r\n        interceptorHandler();\r\n\r\n        // Getting all the followed vacations from the server\r\n\r\n        try {\r\n\r\n            // Attempting to get all of the followed vacations from the server\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/all_followed_vacations');\r\n            const followedVacationsData = response.data;\r\n\r\n            let followedVacationsNames: string[] = this.extractFollowedVacationsNames(followedVacationsData);\r\n            let followedVacationsFollowersCount: number[] = this.extractFollowedVacationsFollowersCount(followedVacationsData);\r\n\r\n\r\n            this.setState({\r\n                followedVacationsNames: followedVacationsNames,\r\n                followedVacationsFollowersCount: followedVacationsFollowersCount\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.reportsPageErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.reportsPageErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"reportsPage\">\r\n                {\r\n                    this.userTypeFromServerCache === \"ADMIN\" ?\r\n\r\n                    <div>\r\n                        <Doughnut \r\n                            data={\r\n                                {\r\n                                    labels: this.state.followedVacationsNames,\r\n                                    datasets: [\r\n                                            {\r\n                                                label: 'Likes',\r\n                                                backgroundColor: 'rgba(75,192,192,1)',\r\n                                                borderColor: 'rgba(0,0,0,1)',\r\n                                                borderWidth: 2,\r\n                                                data: this.state.followedVacationsFollowersCount\r\n                                            }\r\n                                        ]\r\n                                }\r\n                            }\r\n                            options={{\r\n                                title:{\r\n                                    display:true,\r\n                                    text:'Liked Users Vacations',\r\n                                    fontSize:20\r\n                                },\r\n                                legend:{\r\n                                    display:true,\r\n                                    position:'right'\r\n                                },\r\n                                maintainAspectRatio: true\r\n                            }}\r\n                        />\r\n\r\n\r\n                        {/* The User's Snackbar Error Indication */}\r\n                        <div id=\"snackbar\"></div>\r\n                    </div>\r\n\r\n                    :\r\n\r\n                    <div className=\"noAuthSection\">\r\n                        <h1 className=\"sharp-text\">Oops... You are not authorized to view that page</h1>\r\n                        <img className=\"noAuthImg\" src={noAuthorizationSVG} alt=\"No Authorization\"/>\r\n                    </div>\r\n                }\r\n        </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}