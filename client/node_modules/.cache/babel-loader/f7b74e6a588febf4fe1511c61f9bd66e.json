{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\vacations\\\\src\\\\components\\\\loginPage\\\\LoginPage.tsx\";\nimport React, { Component } from 'react';\nimport logo from '../../assets/Explorer-logo.png';\nimport UserLoginDetails from '../../models/UserLoginDetails';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport './loginPage.css';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nexport default class LoginPage extends Component {\n  constructor(props) {\n    super(props); // initializing the state with empty values\n\n    this.componentDidMount = () => {\n      // Retrieving all vacations from the DB before the user even logs in, in order to load\n      // the data behind the scenes, while the user is bussy logging\n      this.getAllVacationsFromServer();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations');\n        console.log(\"-----------------\");\n        console.log(response); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data;\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        // alert(error.message);\n        console.log(error);\n      }\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the username entered in the username's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputFieldValue = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputFieldValue\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      this.setState({\n        password: passwordInputFieldValue\n      });\n    };\n\n    this.login = async () => {\n      try {\n        let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password); // The response we get, should be type of 'SuccessfulLoginServerResponse' class (token & user type)\n\n        const response = await axios.post('http://localhost:3001/users/login', userLoginDetails); // Here we are receiving the token & user type from the data we got back from the server\n\n        const serverResponseData = response.data;\n        console.log(serverResponseData); // Attaching the Token we received from the server, to every HTTP request we'll send from now on\n        // This is our 'Interceptor'\n\n        axios.defaults.headers.common['Authorization'] = \"Bearer\" + serverResponseData.token; // A Function that handles the URL and SessionStorage based on the data received from the server\n\n        this.handleUserInfoFromServer(serverResponseData);\n      } catch (error) {\n        alert(error.message);\n        console.log(error);\n      }\n    };\n\n    this.handleUserInfoFromServer = serverResponseData => {\n      // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n      let strUserInfo = JSON.stringify(serverResponseData);\n\n      if (serverResponseData.userType === \"ADMIN\") {\n        this.props.history.push('/home');\n      } else if (serverResponseData.userType === \"USER\") {\n        this.props.history.push('/user');\n      } // ---------- Inserting the user's info (Token & Type) to the sessionStorage ---------- //\n\n\n      sessionStorage.setItem('userInfo', strUserInfo);\n    };\n\n    this.state = {\n      userName: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"explorer-logo margin-bottom-1\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, \"To Continue To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"loginBtn\",\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"notRegisteredLink sharp-text\",\n      to: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, \"I'm Not Registered\")));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/vacations/src/components/loginPage/LoginPage.tsx"],"names":["React","Component","logo","UserLoginDetails","NavLink","axios","store","ActionType","LoginPage","constructor","props","componentDidMount","getAllVacationsFromServer","response","get","console","log","allVacations","data","dispatch","type","GetAllVacations","payload","error","updateUserNameValue","event","userNameInputField","target","userNameInputFieldValue","value","trimmedUserNameInputFieldValue","trim","setState","userName","updatePasswordValue","passwordInputField","passwordInputFieldValue","password","login","userLoginDetails","state","post","serverResponseData","defaults","headers","common","token","handleUserInfoFromServer","alert","message","strUserInfo","JSON","stringify","userType","history","push","sessionStorage","setItem","render"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAQA,eAAe,MAAMC,SAAN,SAAwBP,SAAxB,CAAoD;AAExDQ,EAAAA,WAAP,CAAoBC,KAApB,EAAgC;AAC5B,UAAMA,KAAN,EAD4B,CAG5B;;AAH4B,SAUhCC,iBAVgC,GAUZ,MAAM;AACtB;AACA;AACA,WAAKC,yBAAL;AACH,KAd+B;;AAAA,SAkBxBA,yBAlBwB,GAkBI,YAAY;AAE5C,UAAI;AACA;AACA,cAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAsB,iCAAtB,CAAvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEAD,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EALA,CAQA;;AACA,cAAMI,YAAyB,GAAGJ,QAAQ,CAACK,IAA3C;AAEAZ,QAAAA,KAAK,CAACa,QAAN,CAAe;AACXC,UAAAA,IAAI,EAAEb,UAAU,CAACc,eADN;AAEXC,UAAAA,OAAO,EAAEL;AAFE,SAAf;AAIH,OAfD,CAiBA,OAAOM,KAAP,EAAc;AACV;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,KAzC+B;;AAAA,SA2CxBC,mBA3CwB,GA2CDC,KAAD,IAA4C;AAEtE;AACA,YAAMC,kBAAqC,GAAGD,KAAK,CAACE,MAApD;AACA,YAAMC,uBAAgC,GAAIF,kBAAkB,CAACG,KAA7D;AACA,YAAMC,8BAAuC,GAAGF,uBAAuB,CAACG,IAAxB,EAAhD;AAEA,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEH;AADA,OAAd;AAGH,KArD+B;;AAAA,SAuDxBI,mBAvDwB,GAuDDT,KAAD,IAA4C;AAEtE;AACA,YAAMU,kBAAqC,GAAGV,KAAK,CAACE,MAApD;AACA,YAAMS,uBAAgC,GAAID,kBAAkB,CAACN,KAA7D;AAEA,WAAKG,QAAL,CAAc;AACVK,QAAAA,QAAQ,EAAED;AADA,OAAd;AAGH,KAhE+B;;AAAA,SAmExBE,KAnEwB,GAmEhB,YAAY;AAExB,UAAI;AACA,YAAIC,gBAAgB,GAAG,IAAIpC,gBAAJ,CAAqB,KAAKqC,KAAL,CAAWP,QAAhC,EAA0C,KAAKO,KAAL,CAAWH,QAArD,CAAvB,CADA,CAGA;;AACA,cAAMxB,QAAQ,GAAG,MAAMR,KAAK,CAACoC,IAAN,CAA0C,mCAA1C,EAA+EF,gBAA/E,CAAvB,CAJA,CAMA;;AACA,cAAMG,kBAAkB,GAAG7B,QAAQ,CAACK,IAApC;AAEAH,QAAAA,OAAO,CAACC,GAAR,CAAY0B,kBAAZ,EATA,CAYA;AACA;;AACArC,QAAAA,KAAK,CAACsC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,kBAAkB,CAACI,KAA/E,CAdA,CAgBA;;AACA,aAAKC,wBAAL,CAA8BL,kBAA9B;AACH,OAlBD,CAoBA,OAAOnB,KAAP,EAAc;AACVyB,QAAAA,KAAK,CAACzB,KAAK,CAAC0B,OAAP,CAAL;AACAlC,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,KA7F+B;;AAAA,SA+FxBwB,wBA/FwB,GA+FIL,kBAAD,IAAwD;AAEvF;AAEA,UAAIQ,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeV,kBAAf,CAAlB;;AAEA,UAAIA,kBAAkB,CAACW,QAAnB,KAAgC,OAApC,EAA6C;AACzC,aAAK3C,KAAL,CAAW4C,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACH,OAFD,MAIK,IAAIb,kBAAkB,CAACW,QAAnB,KAAgC,MAApC,EAA4C;AAC7C,aAAK3C,KAAL,CAAW4C,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACH,OAZsF,CAcvF;;;AAEAC,MAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCP,WAAnC;AACH,KAhH+B;;AAI5B,SAAKV,KAAL,GAAa;AACRP,MAAAA,QAAQ,EAAE,EADF;AAERI,MAAAA,QAAQ,EAAE;AAFF,KAAb;AAIH;;AA4GDqB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,+BAAf;AAA+C,MAAA,GAAG,EAAExD,IAApD;AAA0D,MAAA,GAAG,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,eAII;AAAI,MAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJJ,eAOI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAU,MAAA,SAAS,EAAC,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,MAAA,QAAQ,EAAE,KAAKsB,mBAAtB;AAA2C,MAAA,IAAI,EAAC,MAAhD;AAAuD,MAAA,IAAI,EAAC,UAA5D;AAAuE,MAAA,EAAE,EAAC,eAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAMI;AAAU,MAAA,SAAS,EAAC,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,MAAA,QAAQ,EAAE,KAAKU,mBAAtB;AAA2C,MAAA,IAAI,EAAC,UAAhD;AAA2D,MAAA,IAAI,EAAC,UAAhE;AAA2E,MAAA,EAAE,EAAC,eAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CANJ,eAWI;AAAQ,MAAA,SAAS,EAAC,UAAlB;AAA6B,MAAA,OAAO,EAAE,KAAKI,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXJ,CAPJ,eAqBI,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,8BAAnB;AAAkD,MAAA,EAAE,EAAC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BArBJ,CAFJ,CADJ;AA6BH;;AApJ8D","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport logo from '../../assets/Explorer-logo.png';\r\nimport UserLoginDetails from '../../models/UserLoginDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './loginPage.css';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { ActionType } from '../../Redux/ActionType';\r\n\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class LoginPage extends Component <any, LoginState> {\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n    \r\n        // initializing the state with empty values\r\n        this.state = {\r\n             userName: \"\",\r\n             password: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // Retrieving all vacations from the DB before the user even logs in, in order to load\r\n        // the data behind the scenes, while the user is bussy logging\r\n        this.getAllVacationsFromServer();\r\n    }\r\n\r\n\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n            console.log(\"-----------------\");\r\n            \r\n            console.log(response);\r\n            \r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });            \r\n        }\r\n\r\n        catch (error) {\r\n            // alert(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username entered in the username's input field\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputFieldValue : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputFieldValue\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password entered in the password's input field\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n\r\n        this.setState({\r\n            password: passwordInputFieldValue\r\n        });\r\n    }\r\n\r\n\r\n    private login = async () => {\r\n\r\n        try {\r\n            let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n            \r\n            // The response we get, should be type of 'SuccessfulLoginServerResponse' class (token & user type)\r\n            const response = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/login', userLoginDetails);\r\n\r\n            // Here we are receiving the token & user type from the data we got back from the server\r\n            const serverResponseData = response.data;\r\n\r\n            console.log(serverResponseData);\r\n            \r\n\r\n            // Attaching the Token we received from the server, to every HTTP request we'll send from now on\r\n            // This is our 'Interceptor'\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer\" + serverResponseData.token;\r\n            \r\n            // A Function that handles the URL and SessionStorage based on the data received from the server\r\n            this.handleUserInfoFromServer(serverResponseData);\r\n        }\r\n\r\n        catch (error) {\r\n            alert(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private handleUserInfoFromServer = (serverResponseData : SuccessfulLoginServerResponse) => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        let strUserInfo = JSON.stringify(serverResponseData);\r\n\r\n        if (serverResponseData.userType === \"ADMIN\") {\r\n            this.props.history.push('/home');\r\n        }\r\n\r\n        else if (serverResponseData.userType === \"USER\") {\r\n            this.props.history.push('/user');\r\n        }\r\n\r\n        // ---------- Inserting the user's info (Token & Type) to the sessionStorage ---------- //\r\n\r\n        sessionStorage.setItem('userInfo', strUserInfo);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginSection\">\r\n\r\n                <div className=\"loginSquare\">\r\n                    <img className=\"explorer-logo margin-bottom-1\" src={logo} alt=\"Explorer\"/>\r\n\r\n                    <h2 className=\"sharp-text\">Login</h2>\r\n                    <h3 className=\"sharp-text margin-bottom-2\">To Continue To Explorer</h3>\r\n\r\n\r\n                    <div className=\"inputFieldSection\">\r\n                        <fieldset className=\"cerdinals-fieldset\">\r\n                            <legend>Username</legend>\r\n                            <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                        </fieldset>\r\n\r\n                        <fieldset className=\"cerdinals-fieldset\">\r\n                            <legend>Password</legend>\r\n                            <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                        </fieldset>\r\n\r\n                        <button className=\"loginBtn\" onClick={this.login}>Login</button>\r\n                    </div>\r\n\r\n                    <NavLink className=\"notRegisteredLink sharp-text\" to=\"/register\">I'm Not Registered</NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}