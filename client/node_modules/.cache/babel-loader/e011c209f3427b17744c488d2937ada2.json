{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\allVacations\\\\AllVacations.tsx\";\nimport React, { Component } from 'react';\nimport emptyHeart from '../../assets/likeImg.png';\nimport fullHeart from '../../assets/likedIMG.png';\nimport { store } from '../../Redux/Store';\nimport axios from 'axios';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport './allVacations.css';\nimport settingsImage from '../../assets/settingsImg.png';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator'; // ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\n\nexport class AllVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small space optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        allVacations: store.getState().allVacations\n      }));\n      this.checkIfGlobalStoraHasAllVacations();\n    };\n\n    this.getAllVacationsFromServer = async () => {\n      try {\n        // The response we get, should be type of 'Vacation' class\n        const response = await axios.get('http://localhost:3001/vacations'); // Here we are receiving all the vacations from the server, as a JSON\n\n        const allVacations = response.data;\n        store.dispatch({\n          type: ActionType.GetAllVacations,\n          payload: allVacations\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.vacationsErrorHandler(errorMessage);\n        } catch {\n          this.vacationsErrorHandler(error);\n        }\n      }\n    };\n\n    this.checkIfGlobalStoraHasAllVacations = () => {\n      // Checking if the global store has all the vacations to display, and if not, get them from the server\n      let allVacationsInGlobalStore = store.getState().allVacations;\n\n      if (allVacationsInGlobalStore.length === 0) {\n        this.getAllVacationsFromServer();\n      } else {\n        this.setState({\n          allVacations: allVacationsInGlobalStore\n        });\n      }\n    };\n\n    this.validateVacationIsNotAlreadyLikedByTheUser = clickedVacation => {\n      let favoriteVacationsFromGlobalState = store.getState().favoriteVacations;\n      let clickedVacationID = clickedVacation.Vacation_ID; // Searching the clicked vacation's ID inside our global store\n\n      let clickedVacationInGlobalStore = favoriteVacationsFromGlobalState.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID); // If no result came back (if the user hasn't liked this vacation already)\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.followVacation = async clickedVacation => {\n      try {\n        let clickedVacationID = clickedVacation.Vacation_ID;\n        await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`); // Update The Global Store\n\n        store.dispatch({\n          type: ActionType.SetFollowedVacation,\n          payload: clickedVacation\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.unfollowVacation = async clickedVacation => {\n      try {\n        let clickedVacationID = clickedVacation.Vacation_ID;\n        await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`); // -------------------- Removing the vacation from the global store -------------------- //\n\n        let favoriteVacations = store.getState().favoriteVacations; // Finding the clicked vacation in the global store, in order to remove it\n\n        let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n        let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore); // Update The Global Store\n\n        store.dispatch({\n          type: ActionType.UnfolloweVacation,\n          payload: indexOfClickedVacationInGlobalStore\n        });\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.vacationsErrorHandler(errorMessage);\n      }\n    };\n\n    this.vacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.onVacationFollowAttempt = clickedVacation => {\n      /*\r\n          Before the action, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to like a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the global store\n      const isUserLogged = isUserLoggedValidator(); // If the user is currently logged in (If the current person is not a guest)\n\n      if (isUserLogged) {\n        // checking if the user hasn't liked this vacation already\n        const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation); // If the vacation selected is not already liked by the user, follow that vacation\n\n        if (vacationIsNotAlreadyLikedByTheUser) {\n          this.followVacation(clickedVacation);\n        } // If the vacation selected is ALREADY liked by the user, unfollow that vacation\n        else {\n            this.unfollowVacation(clickedVacation);\n          }\n      } else {\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n        this.props.history.push('/login');\n      }\n    };\n\n    this.checkIfVacationIsFollowed = vacation => {\n      // Inserting the vacation to the global store for future use (acts like cache)\n      let favoriteVacations = store.getState().favoriteVacations;\n      let clickedVacationID = vacation.Vacation_ID; // Finding the clicked vacation in the global store, in order to remove it\n\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\n\n      if (clickedVacationInGlobalStore === undefined) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      allVacations: new Array()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, this.state.allVacations.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacationsSection\",\n      id: \"allVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"allVacationsHeader sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 29\n      }\n    }, \"All \", this.state.allVacations.length, \" Vacations We've Got For You\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }, this.state.allVacations.map((vacation, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardContainer\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCardWithoutInfoSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"vacationCardImg\",\n      src: vacation.Image_URL,\n      alt: vacation.Vacation_Description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topVacationCardSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 45\n      }\n    }, this.checkIfVacationIsFollowed(vacation) ? /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon dislike\",\n      src: fullHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heartIcon\",\n      src: emptyHeart,\n      onClick: () => {\n        this.onVacationFollowAttempt(vacation);\n      },\n      alt: \"Like Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"followersText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 49\n      }\n    }, vacation.Followers_Count)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationInfoCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"resortName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 41\n      }\n    }, vacation.Vacation_Description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vacationDates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 45\n      }\n    }, vacation.Start_Date), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 45\n      }\n    }, \" - \"), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 45\n      }\n    }, vacation.End_Date)), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"vacationPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 45\n      }\n    }, vacation.Vacation_Price, \" $\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noVcationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"settingsImage\",\n      src: settingsImage,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 25\n      }\n    }, \"We Are Sorry, There Was a Problem\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 25\n      }\n    }, \"Getting The Vacations From The Server\")));\n  }\n\n}\nexport default withRouter(AllVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/allVacations/AllVacations.tsx"],"names":["React","Component","emptyHeart","fullHeart","store","axios","ActionType","withRouter","settingsImage","isUserLoggedValidator","AllVacations","constructor","props","unSubscribeStore","componentWillUnmount","componentDidMount","subscribe","setState","allVacations","getState","checkIfGlobalStoraHasAllVacations","getAllVacationsFromServer","response","get","data","dispatch","type","GetAllVacations","payload","error","errorMessage","vacationsErrorHandler","allVacationsInGlobalStore","length","validateVacationIsNotAlreadyLikedByTheUser","clickedVacation","favoriteVacationsFromGlobalState","favoriteVacations","clickedVacationID","Vacation_ID","clickedVacationInGlobalStore","find","favoriteVacation","undefined","followVacation","post","SetFollowedVacation","unfollowVacation","indexOfClickedVacationInGlobalStore","indexOf","UnfolloweVacation","snackbar","document","getElementById","className","textContent","setTimeout","replace","onVacationFollowAttempt","isUserLogged","vacationIsNotAlreadyLikedByTheUser","history","push","checkIfVacationIsFollowed","vacation","state","Array","render","map","index","Image_URL","Vacation_Description","Followers_Count","Start_Date","End_Date","Vacation_Price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Vacation from '../../models/Vacation';\r\nimport emptyHeart from '../../assets/likeImg.png';\r\nimport fullHeart from '../../assets/likedIMG.png';\r\nimport { store } from '../../Redux/Store';\r\nimport axios from 'axios';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport { Unsubscribe } from 'redux';\r\nimport {withRouter} from 'react-router';\r\nimport './allVacations.css';\r\nimport settingsImage from '../../assets/settingsImg.png';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The Vacations The Website Has To Offer  ------------------------------------------------- //\r\n\r\ninterface allVacationsState {\r\n    allVacations : Vacation[];\r\n}\r\n\r\nexport class AllVacations extends Component <any, allVacationsState> {\r\n\r\n    private unSubscribeStore : Unsubscribe;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allVacations : new Array <Vacation> ()\r\n        };\r\n    }\r\n\r\n\r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small space optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                allVacations: store.getState().allVacations\r\n            })\r\n        );\r\n\r\n        this.checkIfGlobalStoraHasAllVacations();\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getAllVacationsFromServer = async () => {\r\n        \r\n        try {\r\n            // The response we get, should be type of 'Vacation' class\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations');\r\n\r\n            // Here we are receiving all the vacations from the server, as a JSON\r\n            const allVacations : Vacation[] = response.data;\r\n\r\n            store.dispatch({\r\n                type: ActionType.GetAllVacations,\r\n                payload: allVacations\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.vacationsErrorHandler(errorMessage);\r\n            }\r\n\r\n            catch {\r\n                this.vacationsErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkIfGlobalStoraHasAllVacations = () => {\r\n\r\n        // Checking if the global store has all the vacations to display, and if not, get them from the server\r\n        \r\n        let allVacationsInGlobalStore = store.getState().allVacations;\r\n\r\n        if (allVacationsInGlobalStore.length === 0) {\r\n            this.getAllVacationsFromServer();\r\n        }\r\n\r\n        else {\r\n            this.setState ({\r\n                allVacations: allVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private validateVacationIsNotAlreadyLikedByTheUser = (clickedVacation : Vacation) => {\r\n\r\n        let favoriteVacationsFromGlobalState: Vacation[] = store.getState().favoriteVacations;\r\n        let clickedVacationID: number = clickedVacation.Vacation_ID;\r\n\r\n        // Searching the clicked vacation's ID inside our global store\r\n\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacationsFromGlobalState.find( favoriteVacation => favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        // If no result came back (if the user hasn't liked this vacation already)\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    private followVacation = async (clickedVacation : Vacation) => {\r\n        try {\r\n\r\n            let clickedVacationID : number = clickedVacation.Vacation_ID;\r\n            await axios.post(`http://localhost:3001/vacations/follow_vacation/${clickedVacationID}`);\r\n\r\n            // Update The Global Store\r\n            store.dispatch({type: ActionType.SetFollowedVacation, payload: clickedVacation});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private unfollowVacation = async (clickedVacation : Vacation) => {\r\n        try {\r\n\r\n            let clickedVacationID : number = clickedVacation.Vacation_ID;\r\n            await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n\r\n\r\n            // -------------------- Removing the vacation from the global store -------------------- //\r\n\r\n            let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n            // Finding the clicked vacation in the global store, in order to remove it\r\n            let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n            let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n            // Update The Global Store\r\n            store.dispatch({type: ActionType.UnfolloweVacation, payload: indexOfClickedVacationInGlobalStore});\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.vacationsErrorHandler(errorMessage);\r\n        }\r\n    }\r\n\r\n    private vacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function(){ snackbar.className = snackbar.className.replace(\"show\", \"\"); }, 3000);\r\n    }\r\n\r\n    private onVacationFollowAttempt = (clickedVacation : Vacation) => {\r\n\r\n        /*\r\n            Before the action, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to like a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the global store\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        // If the user is currently logged in (If the current person is not a guest)\r\n        if (isUserLogged) {\r\n\r\n            // checking if the user hasn't liked this vacation already\r\n            const vacationIsNotAlreadyLikedByTheUser = this.validateVacationIsNotAlreadyLikedByTheUser(clickedVacation);\r\n\r\n            // If the vacation selected is not already liked by the user, follow that vacation\r\n            if (vacationIsNotAlreadyLikedByTheUser) {\r\n                this.followVacation(clickedVacation);\r\n            }\r\n\r\n            // If the vacation selected is ALREADY liked by the user, unfollow that vacation\r\n            else {\r\n                this.unfollowVacation(clickedVacation);\r\n            }\r\n        }\r\n\r\n        else {\r\n            // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    private checkIfVacationIsFollowed = (vacation : Vacation) => {\r\n\r\n        // Inserting the vacation to the global store for future use (acts like cache)\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n        let clickedVacationID = vacation.Vacation_ID;\r\n\r\n        // Finding the clicked vacation in the global store, in order to remove it\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.Vacation_ID === clickedVacationID);\r\n\r\n        if (clickedVacationInGlobalStore === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                {\r\n                    this.state.allVacations.length > 0 ?\r\n\r\n                    <div className=\"allVacationsSection\" id=\"allVacationsSection\">\r\n\r\n                        {/* ---------- All Vacations Section Header ---------- */}\r\n\r\n                        <div className=\"headerContainer\">\r\n                            <h2 className=\"allVacationsHeader sharp-text\">All {this.state.allVacations.length} Vacations We've Got For You\r\n                            </h2>\r\n                        </div>\r\n                    \r\n\r\n                        <div className=\"allVacations\">\r\n\r\n                            {/* ---------- All Vacations Cards ---------- */}\r\n\r\n                            {this.state.allVacations.map( (vacation : Vacation, index : number) => \r\n                                <div className=\"vacationCardContainer\" key={index}>\r\n\r\n                                    <div className=\"vacationCardWithoutInfoSection\">\r\n                                        <img className=\"vacationCardImg\" src={vacation.Image_URL} alt={vacation.Vacation_Description}/>\r\n\r\n                                        <div className=\"vacationCard\">\r\n                                        \r\n                                            <div className=\"topVacationCardSection\">\r\n                                                {this.checkIfVacationIsFollowed(vacation) ?\r\n                                                    <img className=\"heartIcon dislike\" src={fullHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                                :\r\n                                                    <img className=\"heartIcon\" src={emptyHeart} onClick={() => {this.onVacationFollowAttempt(vacation)}} alt=\"Like Button\"/>\r\n                                                }\r\n                                                <p className=\"followersText\">{vacation.Followers_Count}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <div className=\"vacationInfoCard\">\r\n                                        <h4 className=\"resortName\">{vacation.Vacation_Description}</h4>\r\n\r\n                                        <div className=\"vacationDates\">\r\n                                            <h4 className=\"vacationDate\">{vacation.Start_Date}</h4>\r\n                                            <span> - </span>\r\n                                            <h4 className=\"vacationDate\">{vacation.End_Date}</h4>\r\n                                        </div>\r\n\r\n                                            <h4 className=\"vacationPrice\">{vacation.Vacation_Price} $</h4>\r\n                                    </div>\r\n                                    \r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n\r\n\r\n                        {/* The User's Snackbar Error Indication */}\r\n                        <div id=\"snackbar\"></div>\r\n                    </div>\r\n\r\n                    :\r\n\r\n                    <div className=\"noVcationsSection\">\r\n                        <img className=\"settingsImage\" src={settingsImage} alt=\"\"/>\r\n                        <h1 className=\"sharp-text\">We Are Sorry, There Was a Problem</h1>\r\n                        <h1 className=\"sharp-text\">Getting The Vacations From The Server</h1>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(AllVacations);"]},"metadata":{},"sourceType":"module"}