{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\favoriteVacations\\\\FavoriteVacations.tsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { store } from '../../Redux/Store';\nimport { ActionType } from '../../Redux/ActionType';\nimport { withRouter } from 'react-router';\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\nimport socketIOClient from \"socket.io-client\";\nimport './favoriteVacations.css'; // ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\n\nexport class FavoriteVacations extends Component {\n  constructor(props) {\n    super(props);\n    this.unSubscribeStore = void 0;\n    this.socket = void 0;\n\n    this.componentWillUnmount = () => {\n      // Unsubscribing the store's listener right before the component will unmount\n      // In order to make a small optimization\n      this.unSubscribeStore();\n    };\n\n    this.componentDidMount = () => {\n      this.socket = socketIOClient('http://localhost:3002');\n      this.socket.on('decrease-vacation-followers-count', clickedVacationID => {\n        this.decreaseVacationFollowersCountViaSocketIO(clickedVacationID);\n      }); // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\n      // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\n      // and assign it to the interceptor\n\n      interceptorHandler(); // Optimizing a bit the memory leak of the store listener\n      // Also subscribes automatically to the store\n\n      this.unSubscribeStore = store.subscribe(() => this.setState({\n        favoriteVacations: store.getState().favoriteVacations\n      })); // Checks whether the user's favorite vacations exist in the Global Store\n\n      this.checkIfGlobalStoreHasFavoriteVacations();\n    };\n\n    this.getFavoriteVacationsFromServer = async () => {\n      // Explanation -> 2 layers validation:\n      // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\n      // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\n      // If the validation fails in the server, the request will not retrieve any favorite vacations.\n      // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\n      const userTypeFromStorage = getUserTypeFromStorage();\n\n      if (userTypeFromStorage === \"USER\") {\n        try {\n          // The response we get, should be type of 'Vacation' class\n          const response = await axios.get('http://localhost:3001/vacations/favorite_vacations'); // Here we are receiving all the user's favorite vacations from the server, as a JSON\n\n          const favoriteVacations = response.data; // Updating the Global Store\n\n          store.dispatch({\n            type: ActionType.GetFavoriteVacations,\n            payload: favoriteVacations\n          });\n        } catch (error) {\n          try {\n            let errorMessage = error.response.data.error;\n            this.favoriteVacationsErrorHandler(errorMessage);\n          } catch {\n            this.favoriteVacationsErrorHandler(error);\n          }\n        }\n      }\n    };\n\n    this.removeClickedVacationFromFavorites = async clickedVacationID => {\n      /*\r\n          Before unfollowing a vacation, checking if the user is currently logged in.\r\n          This validation happens because a user might delete his token before trying\r\n          to unfollow a vacation. In that case, throw him out to login again.\r\n      */\n      // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\n      // Checking if the user is logged based on the Token inside the sessionStorage\n      const isUserLogged = isUserLoggedValidator();\n\n      if (isUserLogged) {\n        interceptorHandler();\n\n        try {\n          // The response we get, should be type of 'Vacation' class\n          await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\n          let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID); // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the global store\n\n          store.dispatch({\n            type: ActionType.UnfolloweVacation,\n            payload: indexOfClickedVacationInGlobalStore\n          }); // Sending a socket command to the server, in order to inform all clients about the new updated vacation\n\n          this.socket.emit('decrease-vacation-followers-count', clickedVacationID);\n        } catch (error) {\n          let errorMessage = error.response.data.error;\n          this.favoriteVacationsErrorHandler(errorMessage);\n        }\n      } // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\n      else {\n          this.props.history.push('/login');\n        }\n    };\n\n    this.OnUserDislikeClick = clickedVacation => {\n      let clickedVacationID = clickedVacation.vacationID;\n      this.removeClickedVacationFromFavorites(clickedVacationID);\n    };\n\n    this.getIndexOfFavoriteVacationByID = vacationID => {\n      // Finding and returning the index of a vacation, by a given ID\n      let favoriteVacations = store.getState().favoriteVacations; // Finding the clicked vacation in the Global Store\n\n      let clickedVacationInGlobalStore = favoriteVacations.find(favoriteVacation => favoriteVacation.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = favoriteVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.getIndexOfVacationByID = vacationID => {\n      // Finding and returning an index of a vacation\n      let allVacations = store.getState().allVacations;\n      let clickedVacationInGlobalStore = allVacations.find(allVacations => allVacations.vacationID === vacationID);\n      let indexOfClickedVacationInGlobalStore = allVacations.indexOf(clickedVacationInGlobalStore);\n      return indexOfClickedVacationInGlobalStore;\n    };\n\n    this.checkIfGlobalStoreHasFavoriteVacations = () => {\n      // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\n      const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\n\n      if (favoriteVacationsInGlobalStore.length === 0) {\n        this.getFavoriteVacationsFromServer();\n      } // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\n      else {\n          this.setState({\n            favoriteVacations: favoriteVacationsInGlobalStore\n          });\n        }\n    };\n\n    this.decreaseVacationFollowersCountViaSocketIO = clickedVacationID => {\n      // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\n      // Finding the indexes of the changed vacation in the Global Store, and updating them locally\n      let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\n      let followersCountToAssign = store.getState().favoriteVacations[indexOfClickedVacationInGlobalStore].followersCount - 1;\n\n      if (indexOfClickedVacationInGlobalStore !== -1) {\n        // Updating the vacation's followers count in the UI\n        store.dispatch({\n          type: ActionType.DecreaseFavoriteVacationFollowersCount,\n          payload: followersCountToAssign\n        });\n      }\n    };\n\n    this.favoriteVacationsErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying the error as a Popup message\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 3000);\n    };\n\n    this.state = {\n      favoriteVacations: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, this.state.favoriteVacations.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacationsSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text favoritesHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 33\n      }\n    }, \"Your Favorite Vacations\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"favoriteVacations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 29\n      }\n    }, this.state.favoriteVacations.map((vacation, index) => /*#__PURE__*/React.createElement(FavoriteVacationComponent, {\n      key: index,\n      vacation: vacation,\n      OnUserDislikeClick: this.OnUserDislikeClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default withRouter(FavoriteVacations);","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/favoriteVacations/FavoriteVacations.tsx"],"names":["React","Component","axios","store","ActionType","withRouter","isUserLoggedValidator","interceptorHandler","FavoriteVacationComponent","getUserTypeFromStorage","socketIOClient","FavoriteVacations","constructor","props","unSubscribeStore","socket","componentWillUnmount","componentDidMount","on","clickedVacationID","decreaseVacationFollowersCountViaSocketIO","subscribe","setState","favoriteVacations","getState","checkIfGlobalStoreHasFavoriteVacations","getFavoriteVacationsFromServer","userTypeFromStorage","response","get","data","dispatch","type","GetFavoriteVacations","payload","error","errorMessage","favoriteVacationsErrorHandler","removeClickedVacationFromFavorites","isUserLogged","post","indexOfClickedVacationInGlobalStore","getIndexOfFavoriteVacationByID","UnfolloweVacation","emit","history","push","OnUserDislikeClick","clickedVacation","vacationID","clickedVacationInGlobalStore","find","favoriteVacation","indexOf","getIndexOfVacationByID","allVacations","favoriteVacationsInGlobalStore","length","followersCountToAssign","followersCount","DecreaseFavoriteVacationFollowersCount","snackbar","document","getElementById","className","textContent","setTimeout","replace","state","Array","render","map","vacation","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { store } from '../../Redux/Store';\r\nimport { Unsubscribe } from 'redux';\r\nimport { ActionType } from '../../Redux/ActionType';\r\nimport {withRouter} from 'react-router';\r\nimport { isUserLoggedValidator } from '../../models/IsUserLoggedValidator';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport FavoriteVacationComponent from '../vacationComponent/FavoriteVacationComponent';\r\nimport { getUserTypeFromStorage } from '../../models/GetUserTypeFromStorage';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './favoriteVacations.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays All The User's Favorite Vacations ------------------------------------------------- //\r\n\r\ninterface VacationsState {\r\n    favoriteVacations : Vacation[];\r\n}\r\n\r\nexport class FavoriteVacations extends Component <any, VacationsState> {\r\n    \r\n    private unSubscribeStore : Unsubscribe;\r\n    private socket: any;\r\n\r\n    constructor(props : any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            favoriteVacations : new Array <Vacation> ()\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n    \r\n    componentWillUnmount = () => {\r\n\r\n        // Unsubscribing the store's listener right before the component will unmount\r\n        // In order to make a small optimization\r\n        this.unSubscribeStore();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        this.socket = socketIOClient('http://localhost:3002');\r\n\r\n        this.socket.on('decrease-vacation-followers-count', (clickedVacationID: number) => {\r\n\r\n            this.decreaseVacationFollowersCountViaSocketIO(clickedVacationID);\r\n        });\r\n\r\n        // Explanation -> The interceptor is a just JS variable (from axios library). On refresh = it resets.\r\n        // So, this Model takes the token the user got from the server (which is now inside the sessionStorage),\r\n        // and assign it to the interceptor\r\n        interceptorHandler();\r\n\r\n\r\n        // Optimizing a bit the memory leak of the store listener\r\n        // Also subscribes automatically to the store\r\n        this.unSubscribeStore = store.subscribe(\r\n            () => this.setState ({\r\n                favoriteVacations: store.getState().favoriteVacations\r\n            })\r\n        );\r\n\r\n        // Checks whether the user's favorite vacations exist in the Global Store\r\n        this.checkIfGlobalStoreHasFavoriteVacations();\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n\r\n    private getFavoriteVacationsFromServer = async () => {\r\n        \r\n        // Explanation -> 2 layers validation:\r\n        // Using a Model I made to check if the user is 'USER' type, and if so, attempt to fetch his favorite vacations.\r\n        // This validation happens again in the server, using the server's cache, to MAKE SURE he is indeed a 'USER' type.\r\n        // If the validation fails in the server, the request will not retrieve any favorite vacations.\r\n        // This validation happens to speed up proccesses and for better UX -> Not seding a request to the server if not absolutely necessary!\r\n        \r\n        const userTypeFromStorage = getUserTypeFromStorage();\r\n\r\n        if (userTypeFromStorage === \"USER\") {\r\n\r\n            try {\r\n\r\n                // The response we get, should be type of 'Vacation' class\r\n                const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/favorite_vacations');\r\n                \r\n                // Here we are receiving all the user's favorite vacations from the server, as a JSON\r\n                const favoriteVacations : Vacation[] = response.data;\r\n    \r\n                // Updating the Global Store\r\n                store.dispatch({\r\n                    type: ActionType.GetFavoriteVacations,\r\n                    payload: favoriteVacations\r\n                });\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.favoriteVacationsErrorHandler(errorMessage);\r\n                }\r\n                catch {\r\n                    this.favoriteVacationsErrorHandler(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeClickedVacationFromFavorites = async (clickedVacationID : number) => {\r\n\r\n        /*\r\n            Before unfollowing a vacation, checking if the user is currently logged in.\r\n            This validation happens because a user might delete his token before trying\r\n            to unfollow a vacation. In that case, throw him out to login again.\r\n        */\r\n\r\n        // Using a Model I made to check if the user is still logged (Preventing duplication of code from all component that needs to make this validation).\r\n        // Checking if the user is logged based on the Token inside the sessionStorage\r\n\r\n        const isUserLogged = isUserLoggedValidator();\r\n\r\n        if (isUserLogged) {\r\n\r\n            interceptorHandler();\r\n\r\n            try {\r\n                // The response we get, should be type of 'Vacation' class\r\n                await axios.post(`http://localhost:3001/vacations/unfollow_vacation/${clickedVacationID}`);\r\n       \r\n                let indexOfClickedVacationInGlobalStore = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n    \r\n                // Updating the Global Store. Sending the index of the vacation to the Reducer, in order to remove it from the global store\r\n                store.dispatch({\r\n                    type: ActionType.UnfolloweVacation,\r\n                    payload: indexOfClickedVacationInGlobalStore\r\n                });\r\n\r\n                // Sending a socket command to the server, in order to inform all clients about the new updated vacation\r\n                this.socket.emit('decrease-vacation-followers-count', clickedVacationID);\r\n            }\r\n    \r\n            catch (error) {\r\n                let errorMessage = error.response.data.error;\r\n                this.favoriteVacationsErrorHandler(errorMessage);\r\n            }\r\n        }\r\n\r\n\r\n        // In case a guest tried to follow a vacation, send him to the login page in order for him to login (a guest is not logged in)\r\n        else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private OnUserDislikeClick = (clickedVacation : Vacation) => {\r\n\r\n        let clickedVacationID: number = clickedVacation.vacationID;\r\n        this.removeClickedVacationFromFavorites(clickedVacationID);\r\n    }\r\n\r\n    private getIndexOfFavoriteVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning the index of a vacation, by a given ID\r\n\r\n        let favoriteVacations: Vacation[] = store.getState().favoriteVacations as Vacation[];\r\n\r\n        // Finding the clicked vacation in the Global Store\r\n        let clickedVacationInGlobalStore: Vacation = favoriteVacations.find( favoriteVacation =>  favoriteVacation.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = favoriteVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore\r\n    }\r\n\r\n    private getIndexOfVacationByID = (vacationID: number) => {\r\n\r\n        // Finding and returning an index of a vacation\r\n\r\n        let allVacations: Vacation[] = store.getState().allVacations as Vacation[];\r\n\r\n        let clickedVacationInGlobalStore: Vacation = allVacations.find( allVacations =>  allVacations.vacationID === vacationID);\r\n        let indexOfClickedVacationInGlobalStore: number = allVacations.indexOf(clickedVacationInGlobalStore);\r\n\r\n        return indexOfClickedVacationInGlobalStore;\r\n    }\r\n\r\n    private checkIfGlobalStoreHasFavoriteVacations = () => {\r\n\r\n        // If our favorite vacations state in the global store is empty, fetch the favorite vacations from the server and insert them to the global store\r\n\r\n        const favoriteVacationsInGlobalStore = store.getState().favoriteVacations;\r\n\r\n        if (favoriteVacationsInGlobalStore.length === 0) {\r\n            this.getFavoriteVacationsFromServer();\r\n        }\r\n\r\n        // If we have the user's favorite vacations in the Global Store, fetch them instead of sending a request to the server\r\n        else {\r\n            this.setState ({\r\n                favoriteVacations: favoriteVacationsInGlobalStore\r\n            });\r\n        }\r\n    }\r\n\r\n    private decreaseVacationFollowersCountViaSocketIO = (clickedVacationID: number) => {\r\n\r\n        // Updating the followers count of the vacation that was updated by the admin, in the user's UI, via Socket.io\r\n\r\n        // Finding the indexes of the changed vacation in the Global Store, and updating them locally\r\n        let indexOfClickedVacationInGlobalStore: number = this.getIndexOfFavoriteVacationByID(clickedVacationID);\r\n        let followersCountToAssign: number = store.getState().favoriteVacations[indexOfClickedVacationInGlobalStore].followersCount -1;\r\n\r\n        if (indexOfClickedVacationInGlobalStore !== -1) {\r\n\r\n            // Updating the vacation's followers count in the UI\r\n            store.dispatch({type: ActionType.DecreaseFavoriteVacationFollowersCount, payload: followersCountToAssign});\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private favoriteVacationsErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying the error as a Popup message\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 3000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.favoriteVacations.length > 0\r\n                    &&\r\n                    \r\n                        <div className=\"favoriteVacationsSection\">\r\n\r\n                            <div className=\"headerContainer\">\r\n                                <h2 className=\"sharp-text favoritesHeader\">Your Favorite Vacations</h2>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"favoriteVacations\">\r\n\r\n                                {/* ---------- All Vacations Cards, Using a Designated 'Favorite Vacation' Component ---------- */}\r\n\r\n                                {this.state.favoriteVacations.map( (vacation : Vacation, index : number) => \r\n                                    <FavoriteVacationComponent key={index} vacation={vacation} OnUserDislikeClick={this.OnUserDislikeClick} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n                {/* The User's Snackbar Error Indication */}\r\n                <div id=\"snackbar\"></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteVacations);"]},"metadata":{},"sourceType":"module"}