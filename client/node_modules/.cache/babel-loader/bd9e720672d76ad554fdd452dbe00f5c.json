{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\reportsPage\\\\ReportsPage.tsx\";\nimport React, { Component } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { interceptorHandler } from '../../models/InterceptorHandler';\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\nimport noAuthorizationSVG from \"../../assets/noAuthorizationSVG.svg\";\nimport './reportsPage.css';\nimport TopNavbar from '../topNavbar/TopNavbar'; // ------------------------------------------------- This Component Displays The Reports Screen ------------------------------------------------- //\n\nexport default class ReportsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.userTypeFromServerCache = void 0;\n\n    this.componentDidMount = async () => {\n      interceptorHandler(); // Getting the user type from the server's cache\n\n      this.userTypeFromServerCache = await getUserTypeFromServerCache();\n\n      if (this.userTypeFromServerCache === \"ADMIN\") {\n        this.getAllFollowedVacationsFromServer();\n      }\n    };\n\n    this.getAllFollowedVacationsFromServer = async () => {\n      interceptorHandler(); // Attempting to get all the followed vacations from the server, and assigning them to the state\n\n      try {\n        // Attempting to get all of the followed vacations from the server\n        const response = await axios.get('http://localhost:3001/vacations/all_followed_vacations');\n        const followedVacationsData = response.data; // Creating 2 arrays, one for each vacation's parameter (name and followers count)\n\n        let followedVacationsNames = this.extractFollowedVacationsNames(followedVacationsData);\n        let followedVacationsFollowersCount = this.extractFollowedVacationsFollowersCount(followedVacationsData); // Updating the state with the new arrays\n\n        this.setState({\n          followedVacationsNames: followedVacationsNames,\n          followedVacationsFollowersCount: followedVacationsFollowersCount\n        });\n      } catch (error) {\n        try {\n          let errorMessage = error.response.data.error;\n          this.reportsPageErrorHandler(errorMessage);\n        } catch {\n          this.reportsPageErrorHandler(error);\n        }\n      }\n    };\n\n    this.extractFollowedVacationsNames = followedVacationsFromGlobalStore => {\n      let followedVacationsNames = new Array();\n      followedVacationsFromGlobalStore.map(vacation => followedVacationsNames.push(vacation.vacationName));\n      return followedVacationsNames;\n    };\n\n    this.extractFollowedVacationsFollowersCount = followedVacationsFromGlobalStore => {\n      let followedVacationsFollowersCount = new Array();\n      followedVacationsFromGlobalStore.map(vacation => followedVacationsFollowersCount.push(vacation.followersCount));\n      return followedVacationsFollowersCount;\n    };\n\n    this.reportsPageErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\n      let snackbar = document.getElementById(\"snackbar\");\n      snackbar.className = \"show\";\n      snackbar.textContent = errorMessage;\n      setTimeout(function () {\n        snackbar.className = snackbar.className.replace(\"show\", \"\");\n      }, 6000);\n    };\n\n    this.getRandomChartColor = () => {\n      // Generating a random number for the 'user liked vacations' report chart\n      let letters = '0123456789ABCDEF'.split('');\n      let color = '#';\n\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    };\n\n    this.state = {\n      followedVacationsNames: new Array(),\n      followedVacationsFollowersCount: new Array()\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reportsPageContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reportsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, this.userTypeFromServerCache === \"ADMIN\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"graphSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text likedUsersVacationsHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, \"Liked Users Vacations\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"doughnut\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Doughnut, {\n      data: {\n        labels: this.state.followedVacationsNames,\n        datasets: [{\n          label: 'Likes',\n          backgroundColor: this.state.followedVacationsNames.map(() => this.getRandomChartColor()),\n          borderColor: 'white',\n          borderWidth: 2,\n          data: this.state.followedVacationsFollowersCount\n        }]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: 'right'\n        },\n        maintainAspectRatio: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noAuthSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, \"Oops... You are not authorized to view that page\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"noAuthImg\",\n      src: noAuthorizationSVG,\n      alt: \"No Authorization\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"snackbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/reportsPage/ReportsPage.tsx"],"names":["React","Component","Doughnut","axios","interceptorHandler","getUserTypeFromServerCache","TopNavbar","ReportsPage","constructor","props","userTypeFromServerCache","componentDidMount","getAllFollowedVacationsFromServer","response","get","followedVacationsData","data","followedVacationsNames","extractFollowedVacationsNames","followedVacationsFollowersCount","extractFollowedVacationsFollowersCount","setState","error","errorMessage","reportsPageErrorHandler","followedVacationsFromGlobalStore","Array","map","vacation","push","vacationName","followersCount","snackbar","document","getElementById","className","textContent","setTimeout","replace","getRandomChartColor","letters","split","color","i","Math","floor","random","state","render","labels","datasets","label","backgroundColor","borderColor","borderWidth","legend","display","position","maintainAspectRatio","noAuthorizationSVG"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;;AAEA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAGA;;AAOA,eAAe,MAAMC,WAAN,SAA0BN,SAA1B,CAAkE;AAI7EO,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFhBC,uBAEgB;;AAAA,SAYxBC,iBAZwB,GAYJ,YAAY;AAE5BP,MAAAA,kBAAkB,GAFU,CAI5B;;AACA,WAAKM,uBAAL,GAA+B,MAAML,0BAA0B,EAA/D;;AAEA,UAAI,KAAKK,uBAAL,KAAiC,OAArC,EAA8C;AAE1C,aAAKE,iCAAL;AACH;AACJ,KAvBuB;;AAAA,SA6BhBA,iCA7BgB,GA6BoB,YAAY;AAEpDR,MAAAA,kBAAkB,GAFkC,CAIpD;;AAEA,UAAI;AAEA;AACA,cAAMS,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAsB,wDAAtB,CAAvB;AACA,cAAMC,qBAAqB,GAAGF,QAAQ,CAACG,IAAvC,CAJA,CAMA;;AACA,YAAIC,sBAAgC,GAAG,KAAKC,6BAAL,CAAmCH,qBAAnC,CAAvC;AACA,YAAII,+BAAyC,GAAG,KAAKC,sCAAL,CAA4CL,qBAA5C,CAAhD,CARA,CAUA;;AACA,aAAKM,QAAL,CAAc;AACVJ,UAAAA,sBAAsB,EAAEA,sBADd;AAEVE,UAAAA,+BAA+B,EAAEA;AAFvB,SAAd;AAIH,OAfD,CAiBA,OAAOG,KAAP,EAAc;AAEV,YAAI;AACA,cAAIC,YAAY,GAAGD,KAAK,CAACT,QAAN,CAAeG,IAAf,CAAoBM,KAAvC;AACA,eAAKE,uBAAL,CAA6BD,YAA7B;AACH,SAHD,CAKA,MAAM;AACF,eAAKC,uBAAL,CAA6BF,KAA7B;AACH;AACJ;AACJ,KA/DuB;;AAAA,SAqEhBJ,6BArEgB,GAqEiBO,gCAAD,IAAkD;AAEtF,UAAIR,sBAAgC,GAAG,IAAIS,KAAJ,EAAvC;AAEAD,MAAAA,gCAAgC,CAACE,GAAjC,CAAuCC,QAAD,IAAcX,sBAAsB,CAACY,IAAvB,CAA4BD,QAAQ,CAACE,YAArC,CAApD;AAEA,aAAOb,sBAAP;AACH,KA5EuB;;AAAA,SA8EhBG,sCA9EgB,GA8E0BK,gCAAD,IAAkD;AAE/F,UAAIN,+BAAyC,GAAG,IAAIO,KAAJ,EAAhD;AAEAD,MAAAA,gCAAgC,CAACE,GAAjC,CAAuCC,QAAD,IAAcT,+BAA+B,CAACU,IAAhC,CAAqCD,QAAQ,CAACG,cAA9C,CAApD;AAEA,aAAOZ,+BAAP;AACH,KArFuB;;AAAA,SA2FhBK,uBA3FgB,GA2FWD,YAAD,IAA0B;AAExD;AAEA,UAAIS,QAAwB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA/B;AACAF,MAAAA,QAAQ,CAACG,SAAT,GAAqB,MAArB;AACAH,MAAAA,QAAQ,CAACI,WAAT,GAAuBb,YAAvB;AAEAc,MAAAA,UAAU,CAAC,YAAW;AAClBL,QAAAA,QAAQ,CAACG,SAAT,GAAqBH,QAAQ,CAACG,SAAT,CAAmBG,OAAnB,CAA2B,MAA3B,EAAmC,EAAnC,CAArB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KAtGuB;;AAAA,SAwGhBC,mBAxGgB,GAwGM,MAAM;AAEhC;AAEA,UAAIC,OAAO,GAAG,mBAAmBC,KAAnB,CAAyB,EAAzB,CAAd;AACA,UAAIC,KAAK,GAAG,GAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzBD,QAAAA,KAAK,IAAIF,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;AACH;;AACD,aAAOJ,KAAP;AACH,KAlHuB;;AAGpB,SAAKK,KAAL,GAAa;AACT9B,MAAAA,sBAAsB,EAAE,IAAIS,KAAJ,EADf;AAETP,MAAAA,+BAA+B,EAAE,IAAIO,KAAJ;AAFxB,KAAb;AAIH,GAX4E,CAc7E;;;AA2GAsB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAII;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKtC,uBAAL,KAAiC,OAAjC,gBAEA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,eAGI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AACI,MAAA,IAAI,EACA;AACIuC,QAAAA,MAAM,EAAE,KAAKF,KAAL,CAAW9B,sBADvB;AAEIiC,QAAAA,QAAQ,EAAE,CACF;AACIC,UAAAA,KAAK,EAAE,OADX;AAEIC,UAAAA,eAAe,EAAE,KAAKL,KAAL,CAAW9B,sBAAX,CAAkCU,GAAlC,CAAuC,MAAM,KAAKY,mBAAL,EAA7C,CAFrB;AAGIc,UAAAA,WAAW,EAAE,OAHjB;AAIIC,UAAAA,WAAW,EAAE,CAJjB;AAKItC,UAAAA,IAAI,EAAE,KAAK+B,KAAL,CAAW5B;AALrB,SADE;AAFd,OAFR;AAeI,MAAA,OAAO,EAAE;AACLoC,QAAAA,MAAM,EAAC;AACHC,UAAAA,OAAO,EAAC,IADL;AAEHC,UAAAA,QAAQ,EAAC;AAFN,SADF;AAKLC,QAAAA,mBAAmB,EAAE;AALhB,OAfb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHJ,CAFA,gBAiCA;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADJ,eAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,GAAG,EAAEC,kBAAhC;AAAoD,MAAA,GAAG,EAAC,kBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAnCR,eA0CI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CJ,CAJJ,CADJ;AAmDH;;AA7K4E","sourcesContent":["import React, { Component } from 'react';\r\nimport { Doughnut  } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport Vacation from '../../models/Vacation';\r\nimport { interceptorHandler } from '../../models/InterceptorHandler';\r\nimport { getUserTypeFromServerCache } from '../../models/GetUserTypeFromServerCache';\r\nimport noAuthorizationSVG from '../../assets/noAuthorizationSVG.svg';\r\nimport './reportsPage.css';\r\nimport TopNavbar from '../topNavbar/TopNavbar';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Reports Screen ------------------------------------------------- //\r\n\r\ninterface FollowedVacationsState {\r\n    followedVacationsNames: string[];\r\n    followedVacationsFollowersCount: number[];\r\n}\r\n\r\nexport default class ReportsPage extends Component <any, FollowedVacationsState> {\r\n\r\n    private userTypeFromServerCache: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            followedVacationsNames: new Array <string> (),\r\n            followedVacationsFollowersCount: new Array <number> ()\r\n        };\r\n    }\r\n    \r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = async () => {\r\n\r\n        interceptorHandler();\r\n\r\n        // Getting the user type from the server's cache\r\n        this.userTypeFromServerCache = await getUserTypeFromServerCache();\r\n\r\n        if (this.userTypeFromServerCache === \"ADMIN\") {\r\n    \r\n            this.getAllFollowedVacationsFromServer();\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n    \r\n    private getAllFollowedVacationsFromServer = async () => {\r\n        \r\n        interceptorHandler();\r\n        \r\n        // Attempting to get all the followed vacations from the server, and assigning them to the state\r\n        \r\n        try {\r\n            \r\n            // Attempting to get all of the followed vacations from the server\r\n            const response = await axios.get<Vacation[]>('http://localhost:3001/vacations/all_followed_vacations');\r\n            const followedVacationsData = response.data;\r\n            \r\n            // Creating 2 arrays, one for each vacation's parameter (name and followers count)\r\n            let followedVacationsNames: string[] = this.extractFollowedVacationsNames(followedVacationsData);\r\n            let followedVacationsFollowersCount: number[] = this.extractFollowedVacationsFollowersCount(followedVacationsData);\r\n            \r\n            // Updating the state with the new arrays\r\n            this.setState({\r\n                followedVacationsNames: followedVacationsNames,\r\n                followedVacationsFollowersCount: followedVacationsFollowersCount\r\n            });\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            try {\r\n                let errorMessage = error.response.data.error;\r\n                this.reportsPageErrorHandler(errorMessage);\r\n            }\r\n            \r\n            catch {\r\n                this.reportsPageErrorHandler(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private extractFollowedVacationsNames = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsNames: string[] = new Array <string> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => followedVacationsNames.push(vacation.vacationName));\r\n\r\n        return followedVacationsNames;\r\n    }\r\n\r\n    private extractFollowedVacationsFollowersCount = (followedVacationsFromGlobalStore: Vacation[]) => {\r\n\r\n        let followedVacationsFollowersCount: number[] = new Array <number> ();\r\n        \r\n        followedVacationsFromGlobalStore.map( (vacation) => followedVacationsFollowersCount.push(vacation.followersCount));\r\n\r\n        return followedVacationsFollowersCount;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private reportsPageErrorHandler = (errorMessage: string) => {\r\n\r\n        // Letting the user know he received an error, by displaying a Pop-Up Message at the bottom of the screen\r\n\r\n        let snackbar: HTMLDivElement = document.getElementById(\"snackbar\") as HTMLDivElement;\r\n        snackbar.className = \"show\";\r\n        snackbar.textContent = errorMessage;\r\n\r\n        setTimeout(function() {\r\n            snackbar.className = snackbar.className.replace(\"show\", \"\");\r\n        }, 6000);\r\n    }\r\n\r\n    private getRandomChartColor = () => {\r\n\r\n        // Generating a random number for the 'user liked vacations' report chart\r\n\r\n        let letters = '0123456789ABCDEF'.split('');\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++ ) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"reportsPageContainer\">\r\n\r\n                <TopNavbar />\r\n\r\n                <div className=\"reportsPage\">\r\n                    {\r\n                        this.userTypeFromServerCache === \"ADMIN\" ?\r\n\r\n                        <div className=\"graphSection\">\r\n                            <h1 className=\"sharp-text likedUsersVacationsHeader\">Liked Users Vacations</h1>\r\n\r\n                            <div className=\"doughnut\">\r\n                                <Doughnut\r\n                                    data={\r\n                                        {\r\n                                            labels: this.state.followedVacationsNames,\r\n                                            datasets: [\r\n                                                    {\r\n                                                        label: 'Likes',\r\n                                                        backgroundColor: this.state.followedVacationsNames.map( () => this.getRandomChartColor()),\r\n                                                        borderColor: 'white',\r\n                                                        borderWidth: 2,\r\n                                                        data: this.state.followedVacationsFollowersCount\r\n                                                    }\r\n                                                ]\r\n                                        }\r\n                                    }\r\n                                    options={{\r\n                                        legend:{\r\n                                            display:true,\r\n                                            position:'right'\r\n                                        },\r\n                                        maintainAspectRatio: true\r\n                                    }}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <div className=\"noAuthSection\">\r\n                            <h1 className=\"sharp-text\">Oops... You are not authorized to view that page</h1>\r\n                            <img className=\"noAuthImg\" src={noAuthorizationSVG} alt=\"No Authorization\"/>\r\n                        </div>\r\n                    }\r\n\r\n                    {/* The User's Snackbar Error Indication */}\r\n                    <div id=\"snackbar\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}