{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\registerPage\\\\RegisterPage.tsx\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport logo from \"../../assets/astronautSVG.svg\";\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\nimport TopBanner from '../topBanner/TopBanner';\nimport axios from 'axios';\nimport './registerPage.css'; // ------------------------------------------------- This Component Displays The Registration Screen ------------------------------------------------- //\n\nexport default class RegisterPage extends Component {\n  // Defining the global DOM elemends\n  constructor(props) {\n    super(props);\n    this.firstNameInputFieldset = void 0;\n    this.lastNameInputFieldset = void 0;\n    this.usernameInputFieldset = void 0;\n    this.passwordInputFieldset = void 0;\n    this.userMessagesParagraph = void 0;\n\n    this.componentDidMount = () => {\n      // Defining global DOM elements\n      this.firstNameInputFieldset = document.getElementById(\"firstNameFieldset\");\n      this.lastNameInputFieldset = document.getElementById(\"lastNameFieldset\");\n      this.usernameInputFieldset = document.getElementById(\"usernameFieldset\");\n      this.passwordInputFieldset = document.getElementById(\"passwordFieldset\");\n      this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\");\n    };\n\n    this.onUserRegisterClick = async () => {\n      this.resetInputFields();\n      const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\n\n      if (isRegistrationDataValid) {\n        try {\n          this.disableLoginButton();\n          let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password); // Explanation ->\n          // I chose to make the user login automatically after a successful registration.\n          // So, in the server, after a successful insertion of user's info to the DB, it automatically sends the user\n          // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\n\n          const serverResponse = await axios.post('http://localhost:3001/users/register', userRegisterDetails); // Getting the server response (after the 'login' function occurred on the server)\n\n          const serverResponseData = serverResponse.data; // A Model that handles a successful login response from the server\n\n          successfulLoginHandler(serverResponseData);\n          this.routingHandler();\n        } catch (error) {\n          try {\n            let errorMessage = error.response.data.error;\n            this.registerErrorHandler(errorMessage);\n          } catch {\n            this.registerErrorHandler(error);\n          }\n        } finally {\n          this.enableLoginBtn();\n        }\n      }\n    };\n\n    this.checkIfRegistrationDataIsValid = () => {\n      let isFirstNameValid = this.checkIfFirstNameIsValid();\n      let isLastNameValid = this.checkIfLastNameIsValid();\n      let isPasswordValid = this.checkIfPasswordIsValid();\n      let isUserNameValid = this.checkIfUserNameIsValid(); // If one of the input fields is not valid, return false\n\n      if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateFirstNameValue = event => {\n      // getting the first name value entered in the first name's input field\n      const firstNameInputField = event.target;\n      const firstNameInputFieldValue = firstNameInputField.value;\n      const trimmedFirstNameInputField = firstNameInputFieldValue.trim();\n      this.setState({\n        firstName: trimmedFirstNameInputField\n      });\n    };\n\n    this.updateLastNameValue = event => {\n      // getting the last name value entered in the last name's input field\n      const lastNameInputField = event.target;\n      const lastNameInputFieldValue = lastNameInputField.value;\n      const trimmedLastNameInputField = lastNameInputFieldValue.trim();\n      this.setState({\n        lastName: trimmedLastNameInputField\n      });\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the username value entered in the username's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputField = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputField\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password value entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      const trimmedPasswordInputField = passwordInputFieldValue.trim();\n      this.setState({\n        password: trimmedPasswordInputField\n      });\n    };\n\n    this.checkIfFirstNameIsValid = () => {\n      let trimmedFirstName = this.state.firstName.trim();\n      const firstNameInputField = this.firstNameInputFieldset;\n\n      if (trimmedFirstName !== \"\") {\n        // If the first name entered is less than 26 characters\n        if (trimmedFirstName.length <= 25) {\n          return true;\n        } // If the last name entered is more than 25 characters\n        else {\n            this.registerErrorHandler(\"First Name Must Not Be More Than 25 characters\");\n          }\n      }\n\n      this.notifyUserInputFieldIsNotValid(firstNameInputField);\n      return false;\n    };\n\n    this.checkIfLastNameIsValid = () => {\n      let trimmedLastName = this.state.lastName.trim();\n      const lastNameInputField = this.lastNameInputFieldset;\n\n      if (trimmedLastName !== \"\") {\n        // If the last name entered is less than 26 characters\n        if (trimmedLastName.length <= 25) {\n          return true;\n        } // If the last name entered is more than 25 characters\n        else {\n            this.registerErrorHandler(\"Last Name Must Not Be More Than 25 characters\");\n          }\n      }\n\n      this.notifyUserInputFieldIsNotValid(lastNameInputField);\n      return false;\n    };\n\n    this.checkIfPasswordIsValid = () => {\n      let trimmedPassword = this.state.password.trim();\n      let passwordInputField = this.passwordInputFieldset;\n\n      if (trimmedPassword !== \"\") {\n        // If the password is at least 6 characters long\n        if (trimmedPassword.length >= 6) {\n          // If the password is a maximum of 15 characters\n          if (trimmedPassword.length <= 15) {\n            return true;\n          } else {\n            this.registerErrorHandler(\"The Password Must Be a Maximum of 15 Characters\");\n          }\n        } // If the password is not empty, but smaller than 6 characters\n        else {\n            this.registerErrorHandler(\"Password Must Be At Least 6 Characters Long\");\n          } // Either way one of the valdiations failed, notify the user\n\n\n        this.notifyUserInputFieldIsNotValid(passwordInputField);\n        return false;\n      } // If the password is empty\n\n\n      this.notifyUserInputFieldIsNotValid(passwordInputField);\n      return false;\n    };\n\n    this.checkIfUserNameIsValid = () => {\n      let trimmedUserName = this.state.userName.trim();\n      let usernameInputField = this.usernameInputFieldset;\n\n      if (trimmedUserName !== \"\") {\n        // if the username entered is at least 3 characters long\n        if (trimmedUserName.length >= 3) {\n          // if the username entered is a maximum of 15 characters\n          if (trimmedUserName.length <= 15) {\n            return true;\n          } else {\n            this.registerErrorHandler(\"Username Must Be a Maximum of 15 Characters\");\n          }\n        } else {\n          this.registerErrorHandler(\"Username Must Be At Least 3 Characters Long\");\n        }\n      } // Either way one of the valdiations failed, notify the user\n\n\n      this.notifyUserInputFieldIsNotValid(usernameInputField);\n      return false;\n    };\n\n    this.routingHandler = () => {\n      // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n      this.props.history.push('/vacations');\n    };\n\n    this.disableLoginButton = () => {\n      const loginBtn = document.getElementById(\"registerBtn\");\n      loginBtn.disabled = true;\n      loginBtn.style.cursor = \"not-allowed\";\n    };\n\n    this.enableLoginBtn = () => {\n      const loginBtn = document.getElementById(\"registerBtn\");\n      loginBtn.disabled = false;\n      loginBtn.style.cursor = \"pointer\";\n    };\n\n    this.notifyUserInputFieldIsNotValid = inputField => {\n      inputField.style.border = \"2px solid red\";\n    };\n\n    this.registerErrorHandler = errorMessage => {\n      // Letting the user know he received an error, by displaying the error message\n      this.userMessagesParagraph.textContent = errorMessage;\n    };\n\n    this.resetInputFields = () => {\n      this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\n      this.userMessagesParagraph.textContent = \"\";\n    };\n\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      userName: \"\",\n      password: \"\"\n    };\n  } // ------------------------------------------------- Component Settings ------------------------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSectionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopBanner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"register-logo\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 25\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 25\n      }\n    }, \"To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"firstNameFieldset\",\n      className: \"cerdinals-fieldset firstNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 33\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateFirstNameValue,\n      type: \"text\",\n      name: \"firstName\",\n      id: \"firstNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"lastNameFieldset\",\n      className: \"cerdinals-fieldset lastNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 33\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateLastNameValue,\n      type: \"text\",\n      name: \"lastName\",\n      id: \"lastNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"usernameFieldset\",\n      className: \"cerdinals-fieldset usernameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"passwordFieldset\",\n      className: \"cerdinals-fieldset passwordFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"registerBtn\",\n      className: \"registerBtn\",\n      onClick: this.onUserRegisterClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 29\n      }\n    }, \"Register\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"alreadyRegisteredLink sharp-text\",\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 25\n      }\n    }, \"I Already Have An Account\")), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"userMessagesParagraph\",\n      className: \"userMessagesParagraph sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/registerPage/RegisterPage.tsx"],"names":["React","Component","NavLink","UserRegisterDetails","successfulLoginHandler","TopBanner","axios","RegisterPage","constructor","props","firstNameInputFieldset","lastNameInputFieldset","usernameInputFieldset","passwordInputFieldset","userMessagesParagraph","componentDidMount","document","getElementById","onUserRegisterClick","resetInputFields","isRegistrationDataValid","checkIfRegistrationDataIsValid","disableLoginButton","userRegisterDetails","state","firstName","lastName","userName","password","serverResponse","post","serverResponseData","data","routingHandler","error","errorMessage","response","registerErrorHandler","enableLoginBtn","isFirstNameValid","checkIfFirstNameIsValid","isLastNameValid","checkIfLastNameIsValid","isPasswordValid","checkIfPasswordIsValid","isUserNameValid","checkIfUserNameIsValid","updateFirstNameValue","event","firstNameInputField","target","firstNameInputFieldValue","value","trimmedFirstNameInputField","trim","setState","updateLastNameValue","lastNameInputField","lastNameInputFieldValue","trimmedLastNameInputField","updateUserNameValue","userNameInputField","userNameInputFieldValue","trimmedUserNameInputField","updatePasswordValue","passwordInputField","passwordInputFieldValue","trimmedPasswordInputField","trimmedFirstName","length","notifyUserInputFieldIsNotValid","trimmedLastName","trimmedPassword","trimmedUserName","usernameInputField","history","push","loginBtn","disabled","style","cursor","inputField","border","textContent","render","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport axios from 'axios';\r\nimport './registerPage.css';\r\n\r\n\r\n// ------------------------------------------------- This Component Displays The Registration Screen ------------------------------------------------- //\r\n\r\ninterface UserRegisterState {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\nexport default class RegisterPage extends Component <any, UserRegisterState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private firstNameInputFieldset: HTMLFieldSetElement;\r\n    private lastNameInputFieldset: HTMLFieldSetElement;\r\n    private usernameInputFieldset: HTMLFieldSetElement;\r\n    private passwordInputFieldset: HTMLFieldSetElement;\r\n\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n\r\n    // ------------------------------------------------- Component Settings ------------------------------------------------- //\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Defining global DOM elements\r\n        \r\n        this.firstNameInputFieldset = document.getElementById(\"firstNameFieldset\") as HTMLFieldSetElement;\r\n        this.lastNameInputFieldset = document.getElementById(\"lastNameFieldset\") as HTMLFieldSetElement;\r\n        this.usernameInputFieldset = document.getElementById(\"usernameFieldset\") as HTMLFieldSetElement;\r\n        this.passwordInputFieldset = document.getElementById(\"passwordFieldset\") as HTMLFieldSetElement;\r\n\r\n        this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n    \r\n\r\n\r\n    // ------------------------------------------------- Model ------------------------------------------------- //\r\n    \r\n    private onUserRegisterClick = async () => {\r\n\r\n        this.resetInputFields();\r\n        \r\n        const isRegistrationDataValid = this.checkIfRegistrationDataIsValid();\r\n\r\n        if (isRegistrationDataValid) {\r\n            \r\n            try {\r\n                this.disableLoginButton();\r\n\r\n                let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n                \r\n                // Explanation ->\r\n                // I chose to make the user login automatically after a successful registration.\r\n                // So, in the server, after a successful insertion of user's info to the DB, it automatically sends the user\r\n                // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\r\n    \r\n                const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/register', userRegisterDetails);\r\n    \r\n                // Getting the server response (after the 'login' function occurred on the server)\r\n                const serverResponseData = serverResponse.data;\r\n\r\n\r\n                // A Model that handles a successful login response from the server\r\n                successfulLoginHandler(serverResponseData);\r\n    \r\n\r\n                this.routingHandler();\r\n            }\r\n    \r\n            catch (error) {\r\n    \r\n                try {\r\n                    let errorMessage = error.response.data.error;\r\n                    this.registerErrorHandler(errorMessage)\r\n                }\r\n\r\n                catch {\r\n                    this.registerErrorHandler(error);\r\n                }\r\n            }\r\n\r\n            finally {\r\n                this.enableLoginBtn();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- Controller ------------------------------------------------- //\r\n\r\n    private checkIfRegistrationDataIsValid = () => {\r\n        \r\n        let isFirstNameValid = this.checkIfFirstNameIsValid();\r\n        let isLastNameValid = this.checkIfLastNameIsValid();\r\n        let isPasswordValid = this.checkIfPasswordIsValid();\r\n        let isUserNameValid = this.checkIfUserNameIsValid();\r\n\r\n        // If one of the input fields is not valid, return false\r\n\r\n        if (!isFirstNameValid || !isLastNameValid || !isUserNameValid || !isPasswordValid) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private updateFirstNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the first name value entered in the first name's input field\r\n\r\n        const firstNameInputField : HTMLInputElement = event.target;\r\n\r\n        const firstNameInputFieldValue : string =  firstNameInputField.value;\r\n        const trimmedFirstNameInputField : string = firstNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            firstName: trimmedFirstNameInputField\r\n        });\r\n    }\r\n\r\n    private updateLastNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the last name value entered in the last name's input field\r\n\r\n        const lastNameInputField : HTMLInputElement = event.target;\r\n\r\n        const lastNameInputFieldValue : string =  lastNameInputField.value;\r\n        const trimmedLastNameInputField : string = lastNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            lastName: trimmedLastNameInputField\r\n        });\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the username value entered in the username's input field\r\n\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputField : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputField\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n        const trimmedPasswordInputField : string = passwordInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            password: trimmedPasswordInputField\r\n        });\r\n    }\r\n\r\n    private checkIfFirstNameIsValid = () => {\r\n\r\n        let trimmedFirstName = this.state.firstName.trim();\r\n        const firstNameInputField = this.firstNameInputFieldset;\r\n        \r\n        if (trimmedFirstName !== \"\") {\r\n\r\n            // If the first name entered is less than 26 characters\r\n            if (trimmedFirstName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"First Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(firstNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfLastNameIsValid = () => {\r\n\r\n        let trimmedLastName = this.state.lastName.trim();\r\n        const lastNameInputField = this.lastNameInputFieldset;\r\n\r\n        if (trimmedLastName !== \"\") {\r\n\r\n            // If the last name entered is less than 26 characters\r\n            if (trimmedLastName.length <= 25) {\r\n                return true;\r\n            }\r\n\r\n            // If the last name entered is more than 25 characters\r\n            else {\r\n                this.registerErrorHandler(\"Last Name Must Not Be More Than 25 characters\");\r\n            }\r\n        }\r\n\r\n        this.notifyUserInputFieldIsNotValid(lastNameInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfPasswordIsValid = () => {\r\n        \r\n        let trimmedPassword = this.state.password.trim();\r\n        let passwordInputField = this.passwordInputFieldset;\r\n\r\n        if (trimmedPassword!== \"\") {\r\n\r\n            // If the password is at least 6 characters long\r\n            if (trimmedPassword.length >= 6) {\r\n\r\n                // If the password is a maximum of 15 characters\r\n                if (trimmedPassword.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"The Password Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            // If the password is not empty, but smaller than 6 characters\r\n            else {\r\n                this.registerErrorHandler(\"Password Must Be At Least 6 Characters Long\");\r\n            }\r\n            \r\n            // Either way one of the valdiations failed, notify the user\r\n            this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n            return false;\r\n        }\r\n\r\n        // If the password is empty\r\n        this.notifyUserInputFieldIsNotValid(passwordInputField);\r\n        return false;\r\n    }\r\n\r\n    private checkIfUserNameIsValid = () => {\r\n        \r\n        let trimmedUserName = this.state.userName.trim();\r\n        let usernameInputField = this.usernameInputFieldset;\r\n\r\n        if (trimmedUserName !== \"\") {\r\n\r\n            // if the username entered is at least 3 characters long\r\n            if (trimmedUserName.length >= 3) {\r\n\r\n                // if the username entered is a maximum of 15 characters\r\n                if (trimmedUserName.length <= 15) {\r\n                    return true;\r\n                }\r\n\r\n                else {\r\n                    this.registerErrorHandler(\"Username Must Be a Maximum of 15 Characters\");\r\n                }\r\n            }\r\n\r\n            else {\r\n                this.registerErrorHandler(\"Username Must Be At Least 3 Characters Long\");\r\n            }\r\n        }\r\n\r\n        // Either way one of the valdiations failed, notify the user\r\n        this.notifyUserInputFieldIsNotValid(usernameInputField);\r\n        return false;\r\n    }\r\n\r\n    private routingHandler = () => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        this.props.history.push('/vacations');\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------- View ------------------------------------------------- //\r\n\r\n    private disableLoginButton = () : void => {\r\n        const loginBtn = document.getElementById(\"registerBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = true;\r\n        loginBtn.style.cursor = \"not-allowed\";\r\n    }\r\n\r\n    private enableLoginBtn = () : void => {\r\n        const loginBtn = document.getElementById(\"registerBtn\") as HTMLButtonElement;\r\n        loginBtn.disabled = false;\r\n        loginBtn.style.cursor = \"pointer\";\r\n    }\r\n\r\n    private notifyUserInputFieldIsNotValid = (inputField : HTMLFieldSetElement) => {\r\n\r\n        inputField.style.border = \"2px solid red\";\r\n    }\r\n\r\n    private registerErrorHandler = (errorMessage : string) => {\r\n        \r\n        // Letting the user know he received an error, by displaying the error message\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n    private resetInputFields = () => {\r\n\r\n        this.usernameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.passwordInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.firstNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n        this.lastNameInputFieldset.style.border = \"1px solid #00d1ff\";\r\n\r\n        this.userMessagesParagraph.textContent = \"\";\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"registerSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"registerSection\">\r\n\r\n                    <div className=\"registerSquare\">\r\n                        <img className=\"register-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Register</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset id=\"firstNameFieldset\" className=\"cerdinals-fieldset firstNameFieldset\">\r\n                                <legend>First Name</legend>\r\n                                <input onChange={this.updateFirstNameValue} type=\"text\" name=\"firstName\" id=\"firstNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"lastNameFieldset\" className=\"cerdinals-fieldset lastNameFieldset\">\r\n                                <legend>Last Name</legend>\r\n                                <input onChange={this.updateLastNameValue} type=\"text\" name=\"lastName\" id=\"lastNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"usernameFieldset\" className=\"cerdinals-fieldset usernameFieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset id=\"passwordFieldset\" className=\"cerdinals-fieldset passwordFieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button id=\"registerBtn\" className=\"registerBtn\" onClick={this.onUserRegisterClick}>Register</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"alreadyRegisteredLink sharp-text\" to=\"/login\">I Already Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}