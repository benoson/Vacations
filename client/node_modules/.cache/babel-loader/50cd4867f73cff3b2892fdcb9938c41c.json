{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\John Bryce\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\project3 - Vacations\\\\client\\\\src\\\\components\\\\registerPage\\\\RegisterPage.tsx\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport logo from \"../../assets/astronautSVG.svg\";\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\nimport TopBanner from '../topBanner/TopBanner';\nimport axios from 'axios';\nimport './registerPage.css';\nexport default class RegisterPage extends Component {\n  // Defining the global DOM elemends\n  constructor(props) {\n    super(props);\n    this.userMessagesParagraph = void 0;\n\n    this.componentDidMount = () => {\n      // Defining global DOM elements\n      this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\");\n    };\n\n    this.updateFirstNameValue = event => {\n      // getting the first name value entered in the first name's input field\n      const firstNameInputField = event.target;\n      const firstNameInputFieldValue = firstNameInputField.value;\n      const trimmedFirstNameInputField = firstNameInputFieldValue.trim();\n      this.setState({\n        firstName: trimmedFirstNameInputField\n      });\n    };\n\n    this.updateLastNameValue = event => {\n      // getting the password value entered in the password's input field\n      const lastNameInputField = event.target;\n      const lastNameInputFieldValue = lastNameInputField.value;\n      const trimmedLastNameInputField = lastNameInputFieldValue.trim();\n      this.setState({\n        lastName: trimmedLastNameInputField\n      });\n    };\n\n    this.updateUserNameValue = event => {\n      // getting the password value entered in the password's input field\n      const userNameInputField = event.target;\n      const userNameInputFieldValue = userNameInputField.value;\n      const trimmedUserNameInputField = userNameInputFieldValue.trim();\n      this.setState({\n        userName: trimmedUserNameInputField\n      });\n    };\n\n    this.updatePasswordValue = event => {\n      // getting the password value entered in the password's input field\n      const passwordInputField = event.target;\n      const passwordInputFieldValue = passwordInputField.value;\n      const trimmedPasswordInputField = passwordInputFieldValue.trim();\n      this.setState({\n        password: trimmedPasswordInputField\n      });\n    };\n\n    this.registerErrorHandler = errorMessage => {\n      this.userMessagesParagraph.textContent = errorMessage;\n    };\n\n    this.onUserRegisterClick = async () => {\n      try {\n        let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password); // Explanation ->\n        // I chose to make the user login automatically after a successful registration.\n        // So, in the server, after a successful insertion of data to the DB, it automatically sends the user\n        // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\n\n        const serverResponse = await axios.post('http://localhost:3001/users/register', userRegisterDetails); // Getting the server response (after the 'login' function occurred on the server)\n        // (Token & User Type)\n\n        const serverResponseData = serverResponse.data;\n        /*\r\n            @ This model's roles: Attaching the token to the interceptor & Inserting the token and user type to the sessionStorage.\r\n        \n            I made this model in order to handle successful login responses both after a successful registration proccess,\r\n            and after a regular logic proccess. It prevents duplication of code.\r\n        */\n\n        successfulLoginHandler(serverResponseData);\n        this.handleUserNavigation();\n      } catch (error) {\n        let errorMessage = error.response.data.error;\n        this.registerErrorHandler(errorMessage);\n      }\n    };\n\n    this.handleUserNavigation = () => {\n      // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\n      const userInfo = JSON.parse(sessionStorage.getItem('userInfo'));\n      let userType = userInfo.type;\n\n      if (userType === \"ADMIN\") {\n        this.props.history.push('/home');\n      } else if (userType === \"USER\") {\n        this.props.history.push('/user');\n      }\n    };\n\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      userName: \"\",\n      password: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSectionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TopBanner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"registerSquare\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"register-logo\",\n      src: logo,\n      alt: \"Explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sharp-text margin-bottom-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, \"To Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputFieldSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset firstNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateFirstNameValue,\n      type: \"text\",\n      name: \"firstName\",\n      id: \"firstNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset lastNameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateLastNameValue,\n      type: \"text\",\n      name: \"lastName\",\n      id: \"lastNameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset usernameFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateUserNameValue,\n      type: \"text\",\n      name: \"username\",\n      id: \"usernameField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"cerdinals-fieldset passwordFieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updatePasswordValue,\n      type: \"password\",\n      name: \"password\",\n      id: \"passwordField\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"registerBtn\",\n      onClick: this.onUserRegisterClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }\n    }, \"Register\")), /*#__PURE__*/React.createElement(NavLink, {\n      className: \"alreadyRegisteredLink sharp-text\",\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 25\n      }\n    }, \"I Already Have An Account\")), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"userMessagesParagraph\",\n      className: \"userMessagesParagraph sharp-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ben/Desktop/John Bryce/פרוייקטים/project3 - Vacations/client/src/components/registerPage/RegisterPage.tsx"],"names":["React","Component","NavLink","UserRegisterDetails","successfulLoginHandler","TopBanner","axios","RegisterPage","constructor","props","userMessagesParagraph","componentDidMount","document","getElementById","updateFirstNameValue","event","firstNameInputField","target","firstNameInputFieldValue","value","trimmedFirstNameInputField","trim","setState","firstName","updateLastNameValue","lastNameInputField","lastNameInputFieldValue","trimmedLastNameInputField","lastName","updateUserNameValue","userNameInputField","userNameInputFieldValue","trimmedUserNameInputField","userName","updatePasswordValue","passwordInputField","passwordInputFieldValue","trimmedPasswordInputField","password","registerErrorHandler","errorMessage","textContent","onUserRegisterClick","userRegisterDetails","state","serverResponse","post","serverResponseData","data","handleUserNavigation","error","response","userInfo","JSON","parse","sessionStorage","getItem","userType","type","history","push","render","logo"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/astronautSVG.svg';\r\nimport UserRegisterDetails from '../../models/UserRegisterDetails';\r\nimport SuccessfulLoginServerResponse from '../../models/SuccessfulLoginServerResponse';\r\nimport { successfulLoginHandler } from '../../models/SuccessfulLoginHandler';\r\nimport TopBanner from '../topBanner/TopBanner';\r\nimport axios from 'axios';\r\nimport './registerPage.css';\r\n\r\n\r\ninterface UserRegisterState {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n}\r\n\r\n\r\nexport default class RegisterPage extends Component <any, UserRegisterState> {\r\n\r\n    // Defining the global DOM elemends\r\n    private userMessagesParagraph: HTMLParagraphElement;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // Defining global DOM elements\r\n        this.userMessagesParagraph = document.getElementById(\"userMessagesParagraph\") as HTMLParagraphElement;\r\n    }\r\n    \r\n\r\n    \r\n    private updateFirstNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the first name value entered in the first name's input field\r\n        const firstNameInputField : HTMLInputElement = event.target;\r\n\r\n        const firstNameInputFieldValue : string =  firstNameInputField.value;\r\n        const trimmedFirstNameInputField : string = firstNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            firstName: trimmedFirstNameInputField\r\n        });\r\n    }\r\n\r\n    private updateLastNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const lastNameInputField : HTMLInputElement = event.target;\r\n\r\n        const lastNameInputFieldValue : string =  lastNameInputField.value;\r\n        const trimmedLastNameInputField : string = lastNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            lastName: trimmedLastNameInputField\r\n        });\r\n    }\r\n\r\n    private updateUserNameValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const userNameInputField : HTMLInputElement = event.target;\r\n\r\n        const userNameInputFieldValue : string =  userNameInputField.value;\r\n        const trimmedUserNameInputField : string = userNameInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            userName: trimmedUserNameInputField\r\n        });\r\n    }\r\n\r\n    private updatePasswordValue = (event : ChangeEvent <HTMLInputElement>) => {\r\n\r\n        // getting the password value entered in the password's input field\r\n        const passwordInputField : HTMLInputElement = event.target;\r\n\r\n        const passwordInputFieldValue : string =  passwordInputField.value;\r\n        const trimmedPasswordInputField : string = passwordInputFieldValue.trim();\r\n\r\n        this.setState({\r\n            password: trimmedPasswordInputField\r\n        });\r\n    }\r\n\r\n    private registerErrorHandler = (errorMessage : string) => {\r\n\r\n        this.userMessagesParagraph.textContent = errorMessage;\r\n    }\r\n\r\n    private onUserRegisterClick = async () => {\r\n\r\n        try {\r\n\r\n            let userRegisterDetails = new UserRegisterDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n            \r\n            // Explanation ->\r\n            // I chose to make the user login automatically after a successful registration.\r\n            // So, in the server, after a successful insertion of data to the DB, it automatically sends the user\r\n            // to the 'login' function, which returns a Token & User Type, and saves his data in the server's cache.\r\n\r\n            const serverResponse = await axios.post<SuccessfulLoginServerResponse>('http://localhost:3001/users/register', userRegisterDetails);\r\n\r\n            // Getting the server response (after the 'login' function occurred on the server)\r\n            // (Token & User Type)\r\n            const serverResponseData = serverResponse.data;\r\n            \r\n\r\n            /*\r\n                @ This model's roles: Attaching the token to the interceptor & Inserting the token and user type to the sessionStorage.\r\n           \r\n                I made this model in order to handle successful login responses both after a successful registration proccess,\r\n                and after a regular logic proccess. It prevents duplication of code.\r\n            */\r\n            \r\n            successfulLoginHandler(serverResponseData);\r\n\r\n            this.handleUserNavigation();\r\n        }\r\n\r\n        catch (error) {\r\n\r\n            let errorMessage = error.response.data.error;\r\n            this.registerErrorHandler(errorMessage)\r\n        }\r\n    }\r\n\r\n    private handleUserNavigation = () => {\r\n\r\n        // ---------- Navigating To The Correct URL, Based On The User's Type ---------- //\r\n\r\n        const userInfo = JSON.parse(sessionStorage.getItem('userInfo'));\r\n        let userType = userInfo.type;     \r\n\r\n        if (userType === \"ADMIN\") {\r\n            this.props.history.push('/home');\r\n        }\r\n\r\n        else if (userType === \"USER\") {\r\n            this.props.history.push('/user');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"registerSectionContainer\">\r\n                <TopBanner />\r\n\r\n                <div className=\"registerSection\">\r\n\r\n                    <div className=\"registerSquare\">\r\n                        <img className=\"register-logo\" src={logo} alt=\"Explorer\"/>\r\n\r\n                        <h2 className=\"sharp-text\">Register</h2>\r\n                        <h3 className=\"sharp-text margin-bottom-2\">To Explorer</h3>\r\n\r\n\r\n                        <div className=\"inputFieldSection\">\r\n                            <fieldset className=\"cerdinals-fieldset firstNameFieldset\">\r\n                                <legend>First Name</legend>\r\n                                <input onChange={this.updateFirstNameValue} type=\"text\" name=\"firstName\" id=\"firstNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"cerdinals-fieldset lastNameFieldset\">\r\n                                <legend>Last Name</legend>\r\n                                <input onChange={this.updateLastNameValue} type=\"text\" name=\"lastName\" id=\"lastNameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"cerdinals-fieldset usernameFieldset\">\r\n                                <legend>Username</legend>\r\n                                <input onChange={this.updateUserNameValue} type=\"text\" name=\"username\" id=\"usernameField\"/>\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"cerdinals-fieldset passwordFieldset\">\r\n                                <legend>Password</legend>\r\n                                <input onChange={this.updatePasswordValue} type=\"password\" name=\"password\" id=\"passwordField\"/>\r\n                            </fieldset>\r\n\r\n                            <button className=\"registerBtn\" onClick={this.onUserRegisterClick}>Register</button>\r\n                        </div>\r\n\r\n                        <NavLink className=\"alreadyRegisteredLink sharp-text\" to=\"/login\">I Already Have An Account</NavLink>\r\n                    </div>\r\n\r\n                    <p id=\"userMessagesParagraph\" className=\"userMessagesParagraph sharp-text\"></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}